
SensorDataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b53c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba68  0800ba68  00030001  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba68  0800ba68  00030001  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba68  0800ba68  00030001  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ba70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  200001e0  0800bc50  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001e0c  0800bc50  00021e0c  2**0
                  ALLOC
 11 .log_data     00000001  08070000  08070000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00030001  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f12c  00000000  00000000  00030031  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003bf4  00000000  00000000  0004f15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000018c0  00000000  00000000  00052d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001718  00000000  00000000  00054618  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000446e  00000000  00000000  00055d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014a5c  00000000  00000000  0005a19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c954f  00000000  00000000  0006ebfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00138149  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072ec  00000000  00000000  001381c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6c4 	.word	0x0800b6c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b6c4 	.word	0x0800b6c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0); // set counter value to 0
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <delay_us+0x34>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t i = __HAL_TIM_GET_COUNTER(&htim2);
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <delay_us+0x34>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	60fb      	str	r3, [r7, #12]
	while(__HAL_TIM_GET_COUNTER(&htim2) < us){
 8000bd2:	bf00      	nop
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <delay_us+0x34>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3f9      	bcc.n	8000bd4 <delay_us+0x1c>
		;//i = __HAL_TIM_GET_COUNTER(&htim2);
	}
	// wait for the counter to reach the us input in the parameter
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20001c9c 	.word	0x20001c9c

08000bf0 <set_time>:

void set_time (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  char chTime[8] = {0}, chDate[11] = {0},
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	f8c3 2007 	str.w	r2, [r3, #7]
	   chHours[2] = {0}, chMinutes[2] = {0}, chSeconds[2] = {0};
 8000c0e:	2300      	movs	r3, #0
 8000c10:	813b      	strh	r3, [r7, #8]
 8000c12:	2300      	movs	r3, #0
 8000c14:	80bb      	strh	r3, [r7, #4]
 8000c16:	2300      	movs	r3, #0
 8000c18:	803b      	strh	r3, [r7, #0]
  memcpy(chTime, __TIME__, 8);
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <set_time+0xcc>)
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c24:	e883 0003 	stmia.w	r3, {r0, r1}
  memcpy(chDate, __DATE__, 11);
 8000c28:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <set_time+0xd0>)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c30:	c303      	stmia	r3!, {r0, r1}
 8000c32:	801a      	strh	r2, [r3, #0]
 8000c34:	3302      	adds	r3, #2
 8000c36:	0c12      	lsrs	r2, r2, #16
 8000c38:	701a      	strb	r2, [r3, #0]
  memcpy(chHours, chTime, 2);
 8000c3a:	8b3b      	ldrh	r3, [r7, #24]
 8000c3c:	813b      	strh	r3, [r7, #8]
  memcpy(chMinutes, chTime+3, 2);
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	3303      	adds	r3, #3
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	80bb      	strh	r3, [r7, #4]
  memcpy(chSeconds, chTime+6, 2);
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	3306      	adds	r3, #6
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	803b      	strh	r3, [r7, #0]

  sTime.Hours = atoi(chHours); // set hours
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f008 fc26 	bl	80094ac <atoi>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = atoi(chMinutes); // set minutes
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fc1e 	bl	80094ac <atoi>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = atoi(chSeconds); // set seconds
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f008 fc16 	bl	80094ac <atoi>
 8000c80:	4603      	mov	r3, r0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <set_time+0xd4>)
 8000c9a:	f004 fba4 	bl	80053e6 <HAL_RTC_SetTime>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d106      	bne.n	8000cb2 <set_time+0xc2>
//  sDate.Year = 0x18; // year
//  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
//  {
//    _Error_Handler(__FILE__, __LINE__);
//  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000ca4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <set_time+0xd4>)
 8000cac:	f004 fe81 	bl	80059b2 <HAL_RTCEx_BKUPWrite>
 8000cb0:	e000      	b.n	8000cb4 <set_time+0xc4>
	  return;
 8000cb2:	bf00      	nop
}
 8000cb4:	3738      	adds	r7, #56	; 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800b700 	.word	0x0800b700
 8000cc0:	0800b70c 	.word	0x0800b70c
 8000cc4:	20001c78 	.word	0x20001c78

08000cc8 <get_time>:

void get_time(char* time)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	6078      	str	r0, [r7, #4]
	//char time[10] = {0};
	//char date[10] = {0};
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <get_time+0x50>)
 8000cda:	f004 fc41 	bl	8005560 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <get_time+0x50>)
 8000ce8:	f004 fd3f 	bl	800576a <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	7b7b      	ldrb	r3, [r7, #13]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <get_time+0x54>)
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f009 f933 	bl	8009f68 <siprintf>
 int len = strlen(time);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fa6c 	bl	80001e0 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
 len = sizeof(time);
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
/* Display date Format: dd-mm-yy */
 //sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20001c78 	.word	0x20001c78
 8000d1c:	0800b718 	.word	0x0800b718

08000d20 <set_Pin_Output>:
uint8_t u8RhByte1 = 0, u8RhByte2 = 0, u8Temp1 = 0, u8Temp2 = 0;
uint16_t u16CheckSum = 0, u16RH = 0, u16Temp = 0;
uint8_t u8Presence = 0;

void set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_Init_S = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
	GPIO_Init_S.Pin = GPIO_Pin;
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	60fb      	str	r3, [r7, #12]
	GPIO_Init_S.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
	GPIO_Init_S.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_Init_S);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f002 fd62 	bl	8003818 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <set_Pin_Input>:

void set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_Init_S = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
	GPIO_Init_S.Pin = GPIO_Pin;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	60fb      	str	r3, [r7, #12]
	GPIO_Init_S.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
	GPIO_Init_S.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_Init_S);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f002 fd44 	bl	8003818 <HAL_GPIO_Init>
}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DHT11_Start>:

#define DHT11_GPIO GPIOA
#define DHT11_PIN  GPIO_PIN_1

void DHT11_Start(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	set_Pin_Output(DHT11_GPIO, DHT11_PIN);
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f7ff ffbd 	bl	8000d20 <set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_GPIO, DHT11_PIN, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f002 fed5 	bl	8003b5c <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000db2:	2012      	movs	r0, #18
 8000db4:	f001 fa06 	bl	80021c4 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO, DHT11_PIN, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2102      	movs	r1, #2
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f002 fecc 	bl	8003b5c <HAL_GPIO_WritePin>
	delay_us(30);
 8000dc4:	201e      	movs	r0, #30
 8000dc6:	f7ff fef7 	bl	8000bb8 <delay_us>
	set_Pin_Input(DHT11_GPIO, DHT11_PIN);
 8000dca:	2102      	movs	r1, #2
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f7ff ffc4 	bl	8000d5c <set_Pin_Input>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
	uint8_t u8Response = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	delay_us(40);
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f7ff fee8 	bl	8000bb8 <delay_us>
	if(!HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000de8:	2102      	movs	r1, #2
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f002 fe9d 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10f      	bne.n	8000e18 <DHT11_Check_Response+0x40>
	{
		delay_us(80);
 8000df8:	2050      	movs	r0, #80	; 0x50
 8000dfa:	f7ff fedd 	bl	8000bb8 <delay_us>
		if(HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000dfe:	2102      	movs	r1, #2
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f002 fe92 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <DHT11_Check_Response+0x3c>
		{
			u8Response = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e001      	b.n	8000e18 <DHT11_Check_Response+0x40>
		}
		else
		{
			u8Response = -1;
 8000e14:	23ff      	movs	r3, #255	; 0xff
 8000e16:	73fb      	strb	r3, [r7, #15]
		}
	}

	int k = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
	uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <DHT11_Check_Response+0x80>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000e24:	e008      	b.n	8000e38 <DHT11_Check_Response+0x60>
	{;
	    if(__HAL_TIM_GET_COUNTER(&htim2)-start > 50000)
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <DHT11_Check_Response+0x80>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d808      	bhi.n	8000e4a <DHT11_Check_Response+0x72>
	while(HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000e38:	2102      	movs	r1, #2
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f002 fe75 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1ee      	bne.n	8000e26 <DHT11_Check_Response+0x4e>
 8000e48:	e000      	b.n	8000e4c <DHT11_Check_Response+0x74>
	    {
	    	break;
 8000e4a:	bf00      	nop
	    }
	}

	return u8Response;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20001c9c 	.word	0x20001c9c

08000e5c <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	uint8_t i = 0, j;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]
	for(j = 0; j<8; ++j)
 8000e66:	2300      	movs	r3, #0
 8000e68:	73bb      	strb	r3, [r7, #14]
 8000e6a:	e04e      	b.n	8000f0a <DHT11_Read+0xae>
	{
		int k = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
		while(!HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000e70:	e002      	b.n	8000e78 <DHT11_Read+0x1c>
		{;
			k++;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
		while(!HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000e78:	2102      	movs	r1, #2
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f002 fe55 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f4      	beq.n	8000e72 <DHT11_Read+0x16>
		}
		delay_us(30);
 8000e88:	201e      	movs	r0, #30
 8000e8a:	f7ff fe95 	bl	8000bb8 <delay_us>
		if(!HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000e8e:	2102      	movs	r1, #2
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f002 fe4a 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10e      	bne.n	8000ebc <DHT11_Read+0x60>
		{
			i &= ~(1<<(7-j));
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f1c3 0307 	rsb	r3, r3, #7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e00b      	b.n	8000ed4 <DHT11_Read+0x78>
		}
		else
		{
		    i |= (1<<(7-j));
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	73fb      	strb	r3, [r7, #15]
		}
		uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <DHT11_Read+0xc0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	607b      	str	r3, [r7, #4]
		while(HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000edc:	e008      	b.n	8000ef0 <DHT11_Read+0x94>
		{;
		    if(__HAL_TIM_GET_COUNTER(&htim2)-start > 50000)
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <DHT11_Read+0xc0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d808      	bhi.n	8000f02 <DHT11_Read+0xa6>
		while(HAL_GPIO_ReadPin(DHT11_GPIO, DHT11_PIN))
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f002 fe19 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ee      	bne.n	8000ede <DHT11_Read+0x82>
 8000f00:	e000      	b.n	8000f04 <DHT11_Read+0xa8>
			{
			  	break;
 8000f02:	bf00      	nop
	for(j = 0; j<8; ++j)
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	3301      	adds	r3, #1
 8000f08:	73bb      	strb	r3, [r7, #14]
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d9ad      	bls.n	8000e6c <DHT11_Read+0x10>
			}
		}
	}
	return i;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20001c9c 	.word	0x20001c9c

08000f20 <OS_Tick_Enable>:
uint8_t PendST = 0;
int32_t  OS_Tick_Enable (void) {
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  if (PendST != 0U) {
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <OS_Tick_Enable+0x34>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <OS_Tick_Enable+0x1a>
    PendST = 0U;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <OS_Tick_Enable+0x34>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    SCB->ICSR = SCB_ICSR_PENDSTSET_Msk;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <OS_Tick_Enable+0x38>)
 8000f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f38:	605a      	str	r2, [r3, #4]
  }
  SysTick->CTRL |=  SysTick_CTRL_ENABLE_Msk;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <OS_Tick_Enable+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <OS_Tick_Enable+0x3c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
  return (0);
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000020d 	.word	0x2000020d
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <OS_Tick_Disable>:

int32_t  OS_Tick_Disable (void) {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <OS_Tick_Disable+0x38>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <OS_Tick_Disable+0x38>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]
  if ((SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) != 0U) {
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <OS_Tick_Disable+0x3c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <OS_Tick_Disable+0x2a>
    SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <OS_Tick_Disable+0x3c>)
 8000f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f82:	605a      	str	r2, [r3, #4]
    PendST = 1U;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <OS_Tick_Disable+0x40>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
  }
  return (0);
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	2000020d 	.word	0x2000020d

08000fa4 <LoggerInit>:

#define FLASH_KEY1               ((uint32_t)0x45670123)
#define FLASH_KEY2               ((uint32_t)0xCDEF89AB)
///////////////////////////////////////////////////////
void LoggerInit(void)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
	memcpy(LogHeaderS.bBuffer, (uint8_t*)LOGGER_DATA, sizeof(LOG_HEADER_S));
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <LoggerInit+0x68>)
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <LoggerInit+0x6c>)
 8000fae:	4614      	mov	r4, r2
 8000fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint64_t test1 = *(uint64_t*)LogHeaderS.bBuffer;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <LoggerInit+0x68>)
 8000fb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fbc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint64_t test2 = *(uint64_t*)(LogHeaderS.bBuffer+8);
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <LoggerInit+0x70>)
 8000fc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fc6:	e9c7 3400 	strd	r3, r4, [r7]
//	if(0xFFFFFFFFFFFFFFFF == *(uint64_t*)LogHeaderS.bBuffer &&
//	   0xFFFFFFFFFFFFFFFF == *(uint64_t*)(LogHeaderS.bBuffer+8))
	{
	    memset(LogHeaderS.bBuffer, 0, sizeof(LOG_HEADER_S));
 8000fca:	2210      	movs	r2, #16
 8000fcc:	2100      	movs	r1, #0
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <LoggerInit+0x68>)
 8000fd0:	f008 faad 	bl	800952e <memset>
	    HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 8000fd4:	f002 faae 	bl	8003534 <HAL_FLASH_Unlock>
 8000fd8:	f002 fae2 	bl	80035a0 <HAL_FLASH_OB_Unlock>
	    for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e009      	b.n	8000ff6 <LoggerInit+0x52>
	    {
	    	flash_write(LOGGER_DATA+i, 0);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoggerInit+0x6c>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f8f0 	bl	80011d0 <flash_write>
	    for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d9f2      	bls.n	8000fe2 <LoggerInit+0x3e>
	    }
	    HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 8000ffc:	f002 fac0 	bl	8003580 <HAL_FLASH_Lock>
 8001000:	f002 faea 	bl	80035d8 <HAL_FLASH_OB_Lock>
	}
}
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	200001fc 	.word	0x200001fc
 8001010:	08070000 	.word	0x08070000
 8001014:	20000204 	.word	0x20000204

08001018 <LoggerUpdate>:

void LoggerUpdate(uint8_t *pLogger)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint8_t test[16] = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
	uint32_t size = sizeof(LOG_HEADER_S);
 800102e:	2310      	movs	r3, #16
 8001030:	61fb      	str	r3, [r7, #28]
	HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 8001032:	f002 fa7f 	bl	8003534 <HAL_FLASH_Unlock>
 8001036:	f002 fab3 	bl	80035a0 <HAL_FLASH_OB_Unlock>
    for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
 800103e:	e00a      	b.n	8001056 <LoggerUpdate+0x3e>
    {
    	flash_write(LOGGER_DATA+i, 0xFFFF);
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <LoggerUpdate+0x88>)
 8001044:	4413      	add	r3, r2
 8001046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f8c0 	bl	80011d0 <flash_write>
    for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	3304      	adds	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d9f1      	bls.n	8001040 <LoggerUpdate+0x28>
    }
	for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	e00c      	b.n	800107c <LoggerUpdate+0x64>
    {
	    flash_write(LOGGER_DATA+i, *(uint32_t*)(pLogger+i));
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <LoggerUpdate+0x88>)
 8001066:	1898      	adds	r0, r3, r2
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f000 f8ad 	bl	80011d0 <flash_write>
	for(int i = 0; i<sizeof(LOG_HEADER_S); i+=4)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	3304      	adds	r3, #4
 800107a:	623b      	str	r3, [r7, #32]
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d9ef      	bls.n	8001062 <LoggerUpdate+0x4a>
	    //pLogger += 4;
	}
	memcpy(&test, (void*)(LOGGER_DATA), 16);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LoggerUpdate+0x88>)
 8001084:	f107 040c 	add.w	r4, r7, #12
 8001088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 800108e:	f002 fa77 	bl	8003580 <HAL_FLASH_Lock>
 8001092:	f002 faa1 	bl	80035d8 <HAL_FLASH_OB_Lock>
}
 8001096:	bf00      	nop
 8001098:	372c      	adds	r7, #44	; 0x2c
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	08070000 	.word	0x08070000

080010a4 <LogData>:

void LogData(uint8_t* pData, uint32_t size)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	if(LogHeaderS.HEADER_S.u32LogSize+size >= PAGE_SIZE)
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <LogData+0xfc>)
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010ba:	d33a      	bcc.n	8001132 <LogData+0x8e>
	{
		LogHeaderS.HEADER_S.u8PageNumber += 1;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <LogData+0xfc>)
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <LogData+0xfc>)
 80010c6:	711a      	strb	r2, [r3, #4]

		if(MAX_PAGES == LogHeaderS.HEADER_S.u8PageNumber)
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <LogData+0xfc>)
 80010ca:	791b      	ldrb	r3, [r3, #4]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d102      	bne.n	80010d6 <LogData+0x32>
		{
			LogHeaderS.HEADER_S.u8PageNumber = 0;
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <LogData+0xfc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	711a      	strb	r2, [r3, #4]
		}
		uint32_t page_adr = FLASH_STORAGE + PAGE_SIZE*LogHeaderS.HEADER_S.u8PageNumber;
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <LogData+0xfc>)
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	461a      	mov	r2, r3
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <LogData+0x100>)
 80010e0:	4413      	add	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
		if(0xFF == define_page(page_adr))
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f91b 	bl	8001320 <define_page>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2bff      	cmp	r3, #255	; 0xff
 80010ee:	d111      	bne.n	8001114 <LogData+0x70>
		{
			for(int i = 0; i<size; i+=4)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e009      	b.n	800110a <LogData+0x66>
			{
				flash_write(page_adr + i, 0);
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f866 	bl	80011d0 <flash_write>
			for(int i = 0; i<size; i+=4)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3304      	adds	r3, #4
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f1      	bhi.n	80010f6 <LogData+0x52>
 8001112:	e00b      	b.n	800112c <LogData+0x88>
			}
		}
		else
		{
			flash_erase(MIRROR_PAGE);
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <LogData+0x104>)
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f8ac 	bl	8001274 <flash_erase>
			flash_copy_page(page_adr, MIRROR_PAGE);
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <LogData+0x104>)
 800111e:	4619      	mov	r1, r3
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f8d7 	bl	80012d4 <flash_copy_page>
			flash_erase(page_adr);
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f8a4 	bl	8001274 <flash_erase>
		}
		LogHeaderS.HEADER_S.u32LogSize = 0;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <LogData+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
	}
	HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 8001132:	f002 f9ff 	bl	8003534 <HAL_FLASH_Unlock>
 8001136:	f002 fa33 	bl	80035a0 <HAL_FLASH_OB_Unlock>

	if(0 == size%4)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d11e      	bne.n	8001182 <LogData+0xde>
	{
		uint32_t curr_adr = LOGS_BEGIN+(LogHeaderS.HEADER_S.u8PageNumber*PAGE_SIZE)+LogHeaderS.HEADER_S.u32LogSize;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <LogData+0xfc>)
 8001146:	791b      	ldrb	r3, [r3, #4]
 8001148:	02db      	lsls	r3, r3, #11
 800114a:	461a      	mov	r2, r3
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <LogData+0xfc>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4413      	add	r3, r2
 8001152:	3310      	adds	r3, #16
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <LogData+0x100>)
 8001156:	4413      	add	r3, r2
 8001158:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i<size; i+=4)
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	e00c      	b.n	800117a <LogData+0xd6>
		{
			flash_write(curr_adr+i, *(uint32_t*)(pData+i));
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	18d0      	adds	r0, r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	f000 f82e 	bl	80011d0 <flash_write>
		for(int i = 0; i<size; i+=4)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	3304      	adds	r3, #4
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d8ee      	bhi.n	8001160 <LogData+0xbc>
//		{
//			flash_write(FLASH_STORAGE+LogHeaderS.HEADER_S.u32LogSize+i, *(uint16_t*)pData);
//		}
//		flash_write(FLASH_STORAGE+LogHeaderS.HEADER_S.u32LogSize+i, *(uint16_t*)pData);
//	}
	LogHeaderS.HEADER_S.u32LogSize += size;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <LogData+0xfc>)
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <LogData+0xfc>)
 800118c:	60d3      	str	r3, [r2, #12]
	HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 800118e:	f002 f9f7 	bl	8003580 <HAL_FLASH_Lock>
 8001192:	f002 fa21 	bl	80035d8 <HAL_FLASH_OB_Lock>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	08070000 	.word	0x08070000
 80011a8:	08071800 	.word	0x08071800

080011ac <flash_ready>:

uint8_t flash_ready(void) {
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	return !(FLASH->SR & FLASH_SR_BSY);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <flash_ready+0x20>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40022000 	.word	0x40022000

080011d0 <flash_write>:
	FLASH->CR |= FLASH_CR_LOCK;
}


void flash_write(uint32_t address,uint32_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    char chTest[4] = {0};
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
    uint16_t test = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	81fb      	strh	r3, [r7, #14]
	FLASH->CR |= FLASH_CR_PG;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <flash_write+0xa0>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <flash_write+0xa0>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6113      	str	r3, [r2, #16]
//	while(!flash_ready())
//		;
//	memset((void*)address, 0, sizeof(uint32_t));
	while(!flash_ready())
 80011ee:	bf00      	nop
 80011f0:	f7ff ffdc 	bl	80011ac <flash_ready>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0fa      	beq.n	80011f0 <flash_write+0x20>
		;
	test = (data>>0) & 0xFFFF;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	81fb      	strh	r3, [r7, #14]
	//HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
    *(__IO uint16_t*)address = test;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	89fa      	ldrh	r2, [r7, #14]
 8001202:	801a      	strh	r2, [r3, #0]
    test = *(__IO uint16_t*)address;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	81fb      	strh	r3, [r7, #14]
    *(uint16_t*)chTest = *(__IO uint16_t*)address;
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	8812      	ldrh	r2, [r2, #0]
 8001212:	b292      	uxth	r2, r2
 8001214:	801a      	strh	r2, [r3, #0]
	memcpy((__IO uint16_t*)address, (uint16_t*)&data, 2);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	883a      	ldrh	r2, [r7, #0]
 800121a:	801a      	strh	r2, [r3, #0]
	while(!flash_ready())
 800121c:	bf00      	nop
 800121e:	f7ff ffc5 	bl	80011ac <flash_ready>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0fa      	beq.n	800121e <flash_write+0x4e>
		;
	address+=2;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3302      	adds	r3, #2
 800122c:	607b      	str	r3, [r7, #4]
	test = (data>>16) & 0xFFFF;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	81fb      	strh	r3, [r7, #14]
    *(__IO uint16_t*)address = (data>>16) & 0xFFFF;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	0c1a      	lsrs	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b292      	uxth	r2, r2
 800123c:	801a      	strh	r2, [r3, #0]
    test = *(__IO uint16_t*)address;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	81fb      	strh	r3, [r7, #14]
    *(uint16_t*)(chTest+2) = (uint16_t)data;
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	3302      	adds	r3, #2
 800124c:	b292      	uxth	r2, r2
 800124e:	801a      	strh	r2, [r3, #0]
	//memcpy((__IO uint16_t*)address, ((uint16_t*)&data)+2, 2);
	while(!flash_ready())
 8001250:	bf00      	nop
 8001252:	f7ff ffab 	bl	80011ac <flash_ready>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0fa      	beq.n	8001252 <flash_write+0x82>
		;
    FLASH->CR &= ~(FLASH_CR_PG);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <flash_write+0xa0>)
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <flash_write+0xa0>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6113      	str	r3, [r2, #16]

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40022000 	.word	0x40022000

08001274 <flash_erase>:
uint32_t flash_read(uint32_t address) {
	return (*(__IO uint32_t*) address);
}

uint32_t flash_erase(uint32_t address)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/* Allow Access to option bytes sector */
	//HAL_FLASH_OB_Unlock();

	 /* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
	uint32_t PageError;
	volatile HAL_StatusTypeDef status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
	//OS_Tick_Disable();
	while(!flash_ready())
 800128c:	bf00      	nop
 800128e:	f7ff ff8d 	bl	80011ac <flash_ready>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fa      	beq.n	800128e <flash_erase+0x1a>
			;

	HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 8001298:	f002 f94c 	bl	8003534 <HAL_FLASH_Unlock>
 800129c:	f002 f980 	bl	80035a0 <HAL_FLASH_OB_Unlock>
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80012a0:	f107 0210 	add.w	r2, r7, #16
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fa16 	bl	80036dc <HAL_FLASHEx_Erase>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 80012b4:	f002 f964 	bl	8003580 <HAL_FLASH_Lock>
 80012b8:	f002 f98e 	bl	80035d8 <HAL_FLASH_OB_Lock>

	while(!flash_ready())
 80012bc:	bf00      	nop
 80012be:	f7ff ff75 	bl	80011ac <flash_ready>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0fa      	beq.n	80012be <flash_erase+0x4a>
			;
	//OS_Tick_Enable();

	return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <flash_copy_page>:

uint32_t flash_copy_page(uint32_t src, uint32_t dst)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 80012de:	f002 f929 	bl	8003534 <HAL_FLASH_Unlock>
 80012e2:	f002 f95d 	bl	80035a0 <HAL_FLASH_OB_Unlock>
    for(uint32_t i = 0; i<PAGE_SIZE; i += 4)
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e00c      	b.n	8001306 <flash_copy_page+0x32>
    {
    	flash_write(dst + i, *((uint32_t*)(src + i)));
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	18d0      	adds	r0, r2, r3
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff ff68 	bl	80011d0 <flash_write>
    for(uint32_t i = 0; i<PAGE_SIZE; i += 4)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3304      	adds	r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800130c:	d3ee      	bcc.n	80012ec <flash_copy_page+0x18>
    }
    HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 800130e:	f002 f937 	bl	8003580 <HAL_FLASH_Lock>
 8001312:	f002 f961 	bl	80035d8 <HAL_FLASH_OB_Lock>
    return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <define_page>:

uint8_t define_page(uint32_t address)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint8_t pageHeader[16] = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
	uint8_t pageState = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
 800133a:	f002 f921 	bl	8003580 <HAL_FLASH_Lock>
 800133e:	f002 f94b 	bl	80035d8 <HAL_FLASH_OB_Lock>
	memcpy(pageHeader, (uint8_t*)address, 16);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f107 040c 	add.w	r4, r7, #12
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if(0 == (uint64_t*)pageHeader[0] &&
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <define_page+0x44>
	   0 == (uint64_t*)pageHeader[1])
 8001358:	7b7b      	ldrb	r3, [r7, #13]
	if(0 == (uint64_t*)pageHeader[0] &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <define_page+0x44>
	{
		pageState = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	77fb      	strb	r3, [r7, #31]
 8001362:	e001      	b.n	8001368 <define_page+0x48>
	{
		pageState = 0xFF;
	}
	else
	{
		pageState = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Unlock(); HAL_FLASH_OB_Unlock();
 8001368:	f002 f8e4 	bl	8003534 <HAL_FLASH_Unlock>
 800136c:	f002 f918 	bl	80035a0 <HAL_FLASH_OB_Unlock>
	return pageState;
 8001370:	7ffb      	ldrb	r3, [r7, #31]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
	...

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 fee9 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f87d 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f000 fac5 	bl	8001918 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800138e:	f000 fa63 	bl	8001858 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001392:	f000 fa13 	bl	80017bc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001396:	f000 fa8f 	bl	80018b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800139a:	f000 f8dd 	bl	8001558 <MX_ADC1_Init>
  MX_ADC2_Init();
 800139e:	f000 f94b 	bl	8001638 <MX_ADC2_Init>
  MX_RTC_Init();
 80013a2:	f000 f9a7 	bl	80016f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80013a6:	482c      	ldr	r0, [pc, #176]	; (8001458 <main+0xdc>)
 80013a8:	f004 fb48 	bl	8005a3c <HAL_TIM_Base_Start>
  DATA_LOG_S TestTmp_S = {0}, TestHmd_S = {0};
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  LOG_HEADER_S TestHeaders_S = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  memcpy(TestTmp_S.bBuffer, LOGS_BEGIN, 16);
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <main+0xe0>)
 80013d6:	f107 0420 	add.w	r4, r7, #32
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	6859      	ldr	r1, [r3, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(TestHmd_S.bBuffer, LOGS_BEGIN+16, 16);
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <main+0xe4>)
 80013e6:	f107 0410 	add.w	r4, r7, #16
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(TestHeaders_S.bBuffer, LOGGER_DATA, 16);
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <main+0xe8>)
 80013f6:	463c      	mov	r4, r7
 80013f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  flash_erase(FLASH_STORAGE);
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <main+0xe8>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff37 	bl	8001274 <flash_erase>
  flash_erase(MIRROR_PAGE);
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <main+0xec>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff33 	bl	8001274 <flash_erase>
  LoggerInit();
 800140e:	f7ff fdc9 	bl	8000fa4 <LoggerInit>
  set_time();
 8001412:	f7ff fbed 	bl	8000bf0 <set_time>

  //NVIC_SetPriorityGrouping( NVIC_PriorityGroup_4 );
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001416:	f005 fba5 	bl	8006b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readDHT11Data */
  readDHT11DataHandle = osThreadNew(StartDefaultTask, NULL, &readDHT11Data_attributes);
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <main+0xf0>)
 800141c:	2100      	movs	r1, #0
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <main+0xf4>)
 8001420:	f005 fc08 	bl	8006c34 <osThreadNew>
 8001424:	4602      	mov	r2, r0
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <main+0xf8>)
 8001428:	601a      	str	r2, [r3, #0]

  /* creation of PotentiometerDa */
  PotentiometerDaHandle = osThreadNew(readPotentiometerData, NULL, &PotentiometerDa_attributes);
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <main+0xfc>)
 800142c:	2100      	movs	r1, #0
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <main+0x100>)
 8001430:	f005 fc00 	bl	8006c34 <osThreadNew>
 8001434:	4602      	mov	r2, r0
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <main+0x104>)
 8001438:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800143a:	f005 fbc7 	bl	8006bcc <osKernelStart>
//	  flash_write(FLASH_STORAGE, 0x11111111);
//	  flash_write(FLASH_STORAGE+4, 0x11111111);
//	  flash_write(FLASH_STORAGE+8, 0x11111111);
//	  flash_write(FLASH_STORAGE+12, 0x11111111);
//	  HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();
	  readPotentiometerData(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 fbea 	bl	8001c18 <readPotentiometerData>
	  readPotentiometerData(0);
 8001444:	2000      	movs	r0, #0
 8001446:	f000 fbe7 	bl	8001c18 <readPotentiometerData>
	  readPotentiometerData(0);
 800144a:	2000      	movs	r0, #0
 800144c:	f000 fbe4 	bl	8001c18 <readPotentiometerData>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  StartDefaultTask(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f000 faab 	bl	80019ac <StartDefaultTask>
	  readPotentiometerData(0);
 8001456:	e7f2      	b.n	800143e <main+0xc2>
 8001458:	20001c9c 	.word	0x20001c9c
 800145c:	08070010 	.word	0x08070010
 8001460:	08070020 	.word	0x08070020
 8001464:	08070000 	.word	0x08070000
 8001468:	08071800 	.word	0x08071800
 800146c:	0800b78c 	.word	0x0800b78c
 8001470:	080019ad 	.word	0x080019ad
 8001474:	20001c98 	.word	0x20001c98
 8001478:	0800b7b0 	.word	0x0800b7b0
 800147c:	08001c19 	.word	0x08001c19
 8001480:	20001cdc 	.word	0x20001cdc

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0a6      	sub	sp, #152	; 0x98
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f008 f84b 	bl	800952e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2258      	movs	r2, #88	; 0x58
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f008 f83d 	bl	800952e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014b4:	2309      	movs	r3, #9
 80014b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014be:	2301      	movs	r3, #1
 80014c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fb4f 	bl	8003b8c <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014f4:	f000 fbe4 	bl	8001cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001508:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fa4f 	bl	80049b8 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001520:	f000 fbce 	bl	8001cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <SystemClock_Config+0xd0>)
 8001526:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001528:	2301      	movs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001534:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001536:	2300      	movs	r3, #0
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fca3 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001548:	f000 fbba 	bl	8001cc0 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	3798      	adds	r7, #152	; 0x98
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	00110003 	.word	0x00110003

08001558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <MX_ADC1_Init+0xdc>)
 800157c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <MX_ADC1_Init+0xdc>)
 8001584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <MX_ADC1_Init+0xdc>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <MX_ADC1_Init+0xdc>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_ADC1_Init+0xdc>)
 8001598:	2200      	movs	r2, #0
 800159a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <MX_ADC1_Init+0xdc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d6:	4817      	ldr	r0, [pc, #92]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015d8:	f000 fe16 	bl	8002208 <HAL_ADC_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015e2:	f000 fb6d 	bl	8001cc0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <MX_ADC1_Init+0xdc>)
 80015f2:	f001 fd0d 	bl	8003010 <HAL_ADCEx_MultiModeConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80015fc:	f000 fb60 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001600:	2306      	movs	r3, #6
 8001602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001604:	2301      	movs	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_ADC1_Init+0xdc>)
 800161e:	f001 fa0b 	bl	8002a38 <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001628:	f000 fb4a 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20001ba8 	.word	0x20001ba8

08001638 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <MX_ADC2_Init+0xb8>)
 8001652:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_ADC2_Init+0xb4>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_ADC2_Init+0xb4>)
 800166a:	2200      	movs	r2, #0
 800166c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_ADC2_Init+0xb4>)
 800167e:	2201      	movs	r2, #1
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_ADC2_Init+0xb4>)
 800168a:	2201      	movs	r2, #1
 800168c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_ADC2_Init+0xb4>)
 8001698:	2204      	movs	r2, #4
 800169a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_ADC2_Init+0xb4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_ADC2_Init+0xb4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_ADC2_Init+0xb4>)
 80016aa:	f000 fdad 	bl	8002208 <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80016b4:	f000 fb04 	bl	8001cc0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_ADC2_Init+0xb4>)
 80016d6:	f001 f9af 	bl	8002a38 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80016e0:	f000 faee 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20001b58 	.word	0x20001b58
 80016f0:	50000100 	.word	0x50000100

080016f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001708:	2300      	movs	r3, #0
 800170a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <MX_RTC_Init+0xc0>)
 800170e:	4a2a      	ldr	r2, [pc, #168]	; (80017b8 <MX_RTC_Init+0xc4>)
 8001710:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_RTC_Init+0xc0>)
 800171a:	227f      	movs	r2, #127	; 0x7f
 800171c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001720:	22ff      	movs	r2, #255	; 0xff
 8001722:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_RTC_Init+0xc0>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001736:	481f      	ldr	r0, [pc, #124]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001738:	f003 fdc4 	bl	80052c4 <HAL_RTC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 fabd 	bl	8001cc0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001746:	2300      	movs	r3, #0
 8001748:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800174a:	2300      	movs	r3, #0
 800174c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800174e:	2300      	movs	r3, #0
 8001750:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2201      	movs	r2, #1
 800175e:	4619      	mov	r1, r3
 8001760:	4814      	ldr	r0, [pc, #80]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001762:	f003 fe40 	bl	80053e6 <HAL_RTC_SetTime>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800176c:	f000 faa8 	bl	8001cc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001770:	2303      	movs	r3, #3
 8001772:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001774:	2301      	movs	r3, #1
 8001776:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x28;
 8001778:	2328      	movs	r3, #40	; 0x28
 800177a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800177c:	2320      	movs	r3, #32
 800177e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	480b      	ldr	r0, [pc, #44]	; (80017b4 <MX_RTC_Init+0xc0>)
 8001788:	f003 ff48 	bl	800561c <HAL_RTC_SetDate>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001792:	f000 fa95 	bl	8001cc0 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_RTC_Init+0xc0>)
 800179c:	f004 f8c4 	bl	8005928 <HAL_RTCEx_SetTimeStamp>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80017a6:	f000 fa8b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20001c78 	.word	0x20001c78
 80017b8:	40002800 	.word	0x40002800

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_TIM2_Init+0x98>)
 80017dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_TIM2_Init+0x98>)
 80017e4:	2247      	movs	r2, #71	; 0x47
 80017e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM2_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM2_Init+0x98>)
 80017f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_TIM2_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM2_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <MX_TIM2_Init+0x98>)
 8001804:	f004 f8ef 	bl	80059e6 <HAL_TIM_Base_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800180e:	f000 fa57 	bl	8001cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_TIM2_Init+0x98>)
 8001820:	f004 fa7f 	bl	8005d22 <HAL_TIM_ConfigClockSource>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800182a:	f000 fa49 	bl	8001cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_TIM2_Init+0x98>)
 800183c:	f004 fc8a 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001846:	f000 fa3b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20001c9c 	.word	0x20001c9c

08001858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800185e:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MX_USART1_UART_Init+0x5c>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_USART1_UART_Init+0x58>)
 800189c:	f004 fd04 	bl	80062a8 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018a6:	f000 fa0b 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001bf8 	.word	0x20001bf8
 80018b4:	40013800 	.word	0x40013800

080018b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_USART2_UART_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018c4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80018c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART2_UART_Init+0x58>)
 80018fc:	f004 fcd4 	bl	80062a8 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 f9db 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20001ce0 	.word	0x20001ce0
 8001914:	40004400 	.word	0x40004400

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_GPIO_Init+0x90>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <MX_GPIO_Init+0x90>)
 800194c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001950:	6153      	str	r3, [r2, #20]
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <MX_GPIO_Init+0x90>)
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	6153      	str	r3, [r2, #20]
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_GPIO_Init+0x90>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f002 f8ed 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001982:	2302      	movs	r3, #2
 8001984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f001 ff3c 	bl	8003818 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b099      	sub	sp, #100	; 0x64
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint32_t u32Offset = 0;
	char chMsg[30] = {0};
 80019b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b8:	221e      	movs	r2, #30
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 fdb6 	bl	800952e <memset>
    char chData[5] = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	711a      	strb	r2, [r3, #4]
	static DATA_LOG_S TemperatureData_S = {0},
			   HumidityData_S = {0},
			   Test_S = {0};
	memcpy(TemperatureData_S.DATA_S.sDataType,
 80019cc:	4b81      	ldr	r3, [pc, #516]	; (8001bd4 <StartDefaultTask+0x228>)
 80019ce:	4a82      	ldr	r2, [pc, #520]	; (8001bd8 <StartDefaultTask+0x22c>)
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4611      	mov	r1, r2
 80019d4:	8019      	strh	r1, [r3, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	0c12      	lsrs	r2, r2, #16
 80019da:	701a      	strb	r2, [r3, #0]
		   "TMP",
		   3);
	memcpy(HumidityData_S.DATA_S.sDataType,
 80019dc:	4b7f      	ldr	r3, [pc, #508]	; (8001bdc <StartDefaultTask+0x230>)
 80019de:	4a80      	ldr	r2, [pc, #512]	; (8001be0 <StartDefaultTask+0x234>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	8019      	strh	r1, [r3, #0]
 80019e6:	3302      	adds	r3, #2
 80019e8:	0c12      	lsrs	r2, r2, #16
 80019ea:	701a      	strb	r2, [r3, #0]
		   3);

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, "NEW_LOOP\n\r", 11, HAL_MAX_DELAY);
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	220b      	movs	r2, #11
 80019f2:	497c      	ldr	r1, [pc, #496]	; (8001be4 <StartDefaultTask+0x238>)
 80019f4:	487c      	ldr	r0, [pc, #496]	; (8001be8 <StartDefaultTask+0x23c>)
 80019f6:	f004 fca5 	bl	8006344 <HAL_UART_Transmit>
	  memset(chMsg, 0, 30);
 80019fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fe:	221e      	movs	r2, #30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f007 fd93 	bl	800952e <memset>
	  memset(chData, 0, 5);
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f007 fd8c 	bl	800952e <memset>
	  {
	  sprintf(chMsg, "Response: %d\n\r", u8Presence);
 8001a16:	4b75      	ldr	r3, [pc, #468]	; (8001bec <StartDefaultTask+0x240>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a20:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <StartDefaultTask+0x244>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f008 faa0 	bl	8009f68 <siprintf>
	  HAL_UART_Transmit(&huart2, chMsg, strlen(chMsg), HAL_MAX_DELAY);
 8001a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fbd7 	bl	80001e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	486a      	ldr	r0, [pc, #424]	; (8001be8 <StartDefaultTask+0x23c>)
 8001a40:	f004 fc80 	bl	8006344 <HAL_UART_Transmit>
	  OS_Tick_Disable();
 8001a44:	f7ff fa8c 	bl	8000f60 <OS_Tick_Disable>
	  DHT11_Start();
 8001a48:	f7ff f9a6 	bl	8000d98 <DHT11_Start>
	  u8Presence = DHT11_Check_Response();
 8001a4c:	f7ff f9c4 	bl	8000dd8 <DHT11_Check_Response>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <StartDefaultTask+0x240>)
 8001a56:	701a      	strb	r2, [r3, #0]
	  }

	  for(int i = 0; i<5; ++i)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8001a5c:	e00c      	b.n	8001a78 <StartDefaultTask+0xcc>
	  {
	   	chData[i] = DHT11_Read();
 8001a5e:	f7ff f9fd 	bl	8000e5c <DHT11_Read>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4619      	mov	r1, r3
 8001a66:	f107 0220 	add.w	r2, r7, #32
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<5; ++i)
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	3301      	adds	r3, #1
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	ddef      	ble.n	8001a5e <StartDefaultTask+0xb2>
	  }
	  OS_Tick_Enable();
 8001a7e:	f7ff fa4f 	bl	8000f20 <OS_Tick_Enable>
//	  	  	 __TIME__,
//	  	  	 8);
//	  memcpy(TemperatureData_S.DATA_S.sTimestamp,
//	  	     __TIME__,
//	  	  	 8);
	  get_time(HumidityData_S.DATA_S.sTimestamp);
 8001a82:	485c      	ldr	r0, [pc, #368]	; (8001bf4 <StartDefaultTask+0x248>)
 8001a84:	f7ff f920 	bl	8000cc8 <get_time>
	  get_time(TemperatureData_S.DATA_S.sTimestamp);
 8001a88:	485b      	ldr	r0, [pc, #364]	; (8001bf8 <StartDefaultTask+0x24c>)
 8001a8a:	f7ff f91d 	bl	8000cc8 <get_time>

	  memcpy(HumidityData_S.DATA_S.bDataBuffer,
 8001a8e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <StartDefaultTask+0x230>)
 8001a94:	70da      	strb	r2, [r3, #3]
	  	     (void*)&chData[0],
	   	  	 sizeof(uint8_t));
	  memcpy(TemperatureData_S.DATA_S.bDataBuffer,
 8001a96:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <StartDefaultTask+0x228>)
 8001a9c:	70da      	strb	r2, [r3, #3]
	  	     (void*)&chData[2],
	  	  	 sizeof(uint8_t));

	  OS_Tick_Disable();
 8001a9e:	f7ff fa5f 	bl	8000f60 <OS_Tick_Disable>
	  LogData(TemperatureData_S.bBuffer, sizeof(DATA_LOG_S));
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	484b      	ldr	r0, [pc, #300]	; (8001bd4 <StartDefaultTask+0x228>)
 8001aa6:	f7ff fafd 	bl	80010a4 <LogData>
	  LogData(HumidityData_S.bBuffer, sizeof(DATA_LOG_S));
 8001aaa:	2110      	movs	r1, #16
 8001aac:	484b      	ldr	r0, [pc, #300]	; (8001bdc <StartDefaultTask+0x230>)
 8001aae:	f7ff faf9 	bl	80010a4 <LogData>
//	  	  flash_write(LOGS_BEGIN+LogHeaderS.HEADER_S.u32LogSize+i*4, ((uint32_t*)HumidityData_S.bBuffer)[i]);
//	  }
//	  LogHeaderS.HEADER_S.u32LogSize += 16;
//	  HAL_FLASH_Lock(); HAL_FLASH_OB_Lock();

	  LoggerUpdate((uint8_t*)&LogHeaderS);
 8001ab2:	4852      	ldr	r0, [pc, #328]	; (8001bfc <StartDefaultTask+0x250>)
 8001ab4:	f7ff fab0 	bl	8001018 <LoggerUpdate>
	  LOG_HEADER_S TestHeaders_S = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
	  memcpy(TestHeaders_S.bBuffer, LOGGER_DATA, 16);
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <StartDefaultTask+0x254>)
 8001ac8:	f107 0410 	add.w	r4, r7, #16
 8001acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	  save_to_flash((uint8_t*)&HumidityData_S);//, sizeof(DATA_LOG_S));
//	  save_to_flash((uint8_t*)&TemperatureData_S);//, sizeof(DATA_LOG_S));
      OS_Tick_Enable();
 8001ad2:	f7ff fa25 	bl	8000f20 <OS_Tick_Enable>
	  memset(HumidityData_S.DATA_S.bDataBuffer, 0, sizeof(uint32_t)+8);
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	2100      	movs	r1, #0
 8001ada:	484a      	ldr	r0, [pc, #296]	; (8001c04 <StartDefaultTask+0x258>)
 8001adc:	f007 fd27 	bl	800952e <memset>
	  memset(TemperatureData_S.DATA_S.bDataBuffer, 0, sizeof(uint32_t)+8);
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4848      	ldr	r0, [pc, #288]	; (8001c08 <StartDefaultTask+0x25c>)
 8001ae6:	f007 fd22 	bl	800952e <memset>
	  //memcpy(Test_S.bBuffer, LOGS_BEGIN+LogHeaderS.HEADER_S.u32LogSize+u32Offset-32, 16);
      memcpy(Test_S.bBuffer, LOGS_BEGIN+LogHeaderS.HEADER_S.u32LogSize-16, 16);
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <StartDefaultTask+0x250>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <StartDefaultTask+0x254>)
 8001af0:	4413      	add	r3, r2
 8001af2:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <StartDefaultTask+0x260>)
 8001af4:	4614      	mov	r4, r2
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  u8Presence = 0;
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <StartDefaultTask+0x240>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	  memset(chMsg, 0, 20);
 8001b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0a:	2214      	movs	r2, #20
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 fd0d 	bl	800952e <memset>
	  uint64_t f = 0.0;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	f04f 0400 	mov.w	r4, #0
 8001b1c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	  uint16_t u16CheckSum = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	81fb      	strh	r3, [r7, #14]
	  for(int i = 0; i<5; ++i)
 8001b24:	2300      	movs	r3, #0
 8001b26:	653b      	str	r3, [r7, #80]	; 0x50
 8001b28:	e031      	b.n	8001b8e <StartDefaultTask+0x1e2>
	  {
	  	f = chData[i];
 8001b2a:	f107 0220 	add.w	r2, r7, #32
 8001b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	  	if(4 != i){
 8001b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d009      	beq.n	8001b58 <StartDefaultTask+0x1ac>
	  	    u16CheckSum += chData[i];
 8001b44:	f107 0220 	add.w	r2, r7, #32
 8001b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	81fb      	strh	r3, [r7, #14]
	  	}
	  	sprintf(chMsg, "Data%d: %d\n\r", i, f);
 8001b58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001b5c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001b60:	e9cd 3400 	strd	r3, r4, [sp]
 8001b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b66:	492a      	ldr	r1, [pc, #168]	; (8001c10 <StartDefaultTask+0x264>)
 8001b68:	f008 f9fe 	bl	8009f68 <siprintf>
	  	HAL_UART_Transmit(&huart2, chMsg, strlen(chMsg), HAL_MAX_DELAY);
 8001b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fb35 	bl	80001e0 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	4819      	ldr	r0, [pc, #100]	; (8001be8 <StartDefaultTask+0x23c>)
 8001b84:	f004 fbde 	bl	8006344 <HAL_UART_Transmit>
	  for(int i = 0; i<5; ++i)
 8001b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	ddca      	ble.n	8001b2a <StartDefaultTask+0x17e>
	  }
	  HAL_UART_Transmit(&huart2, TemperatureData_S.DATA_S.sTimestamp, 8, HAL_MAX_DELAY);
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	2208      	movs	r2, #8
 8001b9a:	4917      	ldr	r1, [pc, #92]	; (8001bf8 <StartDefaultTask+0x24c>)
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <StartDefaultTask+0x23c>)
 8001b9e:	f004 fbd1 	bl	8006344 <HAL_UART_Transmit>
	  sprintf(chMsg, "CHECK_SUM: %d\n\r", ((uint8_t*)&u16CheckSum)[0]);
 8001ba2:	f107 030e 	add.w	r3, r7, #14
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bae:	4919      	ldr	r1, [pc, #100]	; (8001c14 <StartDefaultTask+0x268>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 f9d9 	bl	8009f68 <siprintf>
	  HAL_UART_Transmit(&huart2, chMsg, strlen(chMsg), HAL_MAX_DELAY);
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb10 	bl	80001e0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <StartDefaultTask+0x23c>)
 8001bce:	f004 fbb9 	bl	8006344 <HAL_UART_Transmit>
  {
 8001bd2:	e70b      	b.n	80019ec <StartDefaultTask+0x40>
 8001bd4:	20000210 	.word	0x20000210
 8001bd8:	0800b728 	.word	0x0800b728
 8001bdc:	20000220 	.word	0x20000220
 8001be0:	0800b72c 	.word	0x0800b72c
 8001be4:	0800b730 	.word	0x0800b730
 8001be8:	20001ce0 	.word	0x20001ce0
 8001bec:	2000020c 	.word	0x2000020c
 8001bf0:	0800b73c 	.word	0x0800b73c
 8001bf4:	20000227 	.word	0x20000227
 8001bf8:	20000217 	.word	0x20000217
 8001bfc:	200001fc 	.word	0x200001fc
 8001c00:	08070000 	.word	0x08070000
 8001c04:	20000223 	.word	0x20000223
 8001c08:	20000213 	.word	0x20000213
 8001c0c:	20000230 	.word	0x20000230
 8001c10:	0800b74c 	.word	0x0800b74c
 8001c14:	0800b75c 	.word	0x0800b75c

08001c18 <readPotentiometerData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readPotentiometerData */
void readPotentiometerData(void *argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readPotentiometerData */
	char chMsg[10] = {0};
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	811a      	strh	r2, [r3, #8]
	//uint8_t u8Buffer[0x800] = {0};
	uint32_t uiValue = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
	DATA_LOG_S PotentiometerData_S = {0};
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	  memset(chMsg, 0, 10);
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	220a      	movs	r2, #10
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fc71 	bl	800952e <memset>
	  HAL_ADC_Start(&hadc1);
 8001c4c:	4810      	ldr	r0, [pc, #64]	; (8001c90 <readPotentiometerData+0x78>)
 8001c4e:	f000 fcd5 	bl	80025fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c52:	f04f 31ff 	mov.w	r1, #4294967295
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <readPotentiometerData+0x78>)
 8001c58:	f000 fde6 	bl	8002828 <HAL_ADC_PollForConversion>
	  uiValue = HAL_ADC_GetValue(&hadc1);
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <readPotentiometerData+0x78>)
 8001c5e:	f000 fedd 	bl	8002a1c <HAL_ADC_GetValue>
 8001c62:	6278      	str	r0, [r7, #36]	; 0x24
//			 sizeof(uint32_t));
//	  OS_Tick_Disable();
//	  save_to_flash((uint8_t*)&PotentiometerData_S, sizeof(DATA_LOG_S));
//	  OS_Tick_Enable();
	  //read_flash(u8Buffer);
	  sprintf(chMsg, "%u\n\r", uiValue);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	490a      	ldr	r1, [pc, #40]	; (8001c94 <readPotentiometerData+0x7c>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f008 f97b 	bl	8009f68 <siprintf>
	  HAL_UART_Transmit(&huart2, chMsg, strlen(chMsg), HAL_MAX_DELAY);
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fab2 	bl	80001e0 <strlen>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f107 0118 	add.w	r1, r7, #24
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <readPotentiometerData+0x80>)
 8001c8a:	f004 fb5b 	bl	8006344 <HAL_UART_Transmit>
  {
 8001c8e:	e7d6      	b.n	8001c3e <readPotentiometerData+0x26>
 8001c90:	20001ba8 	.word	0x20001ba8
 8001c94:	0800b76c 	.word	0x0800b76c
 8001c98:	20001ce0 	.word	0x20001ce0

08001c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cae:	f000 fa69 	bl	8002184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_MspInit+0x4c>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	210f      	movs	r1, #15
 8001d0a:	f06f 0001 	mvn.w	r0, #1
 8001d0e:	f001 fbe7 	bl	80034e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d40:	d12d      	bne.n	8001d9e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001d4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6153      	str	r3, [r2, #20]
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d76:	6153      	str	r3, [r2, #20]
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	481f      	ldr	r0, [pc, #124]	; (8001e14 <HAL_ADC_MspInit+0xf4>)
 8001d98:	f001 fd3e 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d9c:	e032      	b.n	8001e04 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_ADC_MspInit+0xf8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d12d      	bne.n	8001e04 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001db0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_ADC_MspInit+0xec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10b      	bne.n	8001dd2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_ADC_MspInit+0xf0>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dea:	2310      	movs	r3, #16
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f001 fd0a 	bl	8003818 <HAL_GPIO_Init>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000240 	.word	0x20000240
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000800 	.word	0x48000800
 8001e18:	50000100 	.word	0x50000100

08001e1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_RTC_MspInit+0x44>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <HAL_RTC_MspInit+0x36>
 8001e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e32:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <HAL_RTC_MspInit+0x48>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2301      	movs	r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40002800 	.word	0x40002800
 8001e64:	10908100 	.word	0x10908100

08001e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d10b      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_TIM_Base_MspInit+0x38>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_UART_MspInit+0xdc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12a      	bne.n	8001f1c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a2e      	ldr	r2, [pc, #184]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	6153      	str	r3, [r2, #20]
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ef6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f001 fc7f 	bl	8003818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f1a:	e02d      	b.n	8001f78 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_UART_MspInit+0xe4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d128      	bne.n	8001f78 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_MspInit+0xe0>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f56:	230c      	movs	r3, #12
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 fc50 	bl	8003818 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40004400 	.word	0x40004400

08001f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f001 fa9d 	bl	80034e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001fa6:	2019      	movs	r0, #25
 8001fa8:	f001 fab6 	bl	8003518 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_InitTick+0x9c>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_InitTick+0x9c>)
 8001fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_InitTick+0x9c>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 ff28 	bl	8004e24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fd4:	f002 ff04 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 8001fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_InitTick+0xa0>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_InitTick+0xa4>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_InitTick+0xa8>)
 8001fec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_InitTick+0xa4>)
 8001ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_InitTick+0xa4>)
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_InitTick+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_InitTick+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_InitTick+0xa4>)
 800200a:	f003 fcec 	bl	80059e6 <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_InitTick+0xa4>)
 8002016:	f003 fd3b 	bl	8005a90 <HAL_TIM_Base_Start_IT>
 800201a:	4603      	mov	r3, r0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	431bde83 	.word	0x431bde83
 8002030:	20001d60 	.word	0x20001d60
 8002034:	40012c00 	.word	0x40012c00

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002072:	f003 fd37 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20001d60 	.word	0x20001d60

08002080 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x50>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x16>
		heap_end = &end;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <_sbrk+0x50>)
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <_sbrk+0x54>)
 8002094:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <_sbrk+0x50>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <_sbrk+0x50>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	466a      	mov	r2, sp
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d907      	bls.n	80020ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020aa:	f007 fa03 	bl	80094b4 <__errno>
 80020ae:	4602      	mov	r2, r0
 80020b0:	230c      	movs	r3, #12
 80020b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	e006      	b.n	80020c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <_sbrk+0x50>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <_sbrk+0x50>)
 80020c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000244 	.word	0x20000244
 80020d4:	20001e10 	.word	0x20001e10

080020d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <SystemInit+0x28>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <SystemInit+0x28>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SystemInit+0x28>)
 80020ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020f2:	609a      	str	r2, [r3, #8]
#endif
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002108:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800210a:	e003      	b.n	8002114 <LoopCopyDataInit>

0800210c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800210e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002110:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002112:	3104      	adds	r1, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002118:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800211a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800211c:	d3f6      	bcc.n	800210c <CopyDataInit>
	ldr	r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002120:	e002      	b.n	8002128 <LoopFillZerobss>

08002122 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002122:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002124:	f842 3b04 	str.w	r3, [r2], #4

08002128 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <LoopForever+0x16>)
	cmp	r2, r3
 800212a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800212c:	d3f9      	bcc.n	8002122 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212e:	f7ff ffd3 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f007 f9c5 	bl	80094c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002136:	f7ff f921 	bl	800137c <main>

0800213a <LoopForever>:

LoopForever:
    b LoopForever
 800213a:	e7fe      	b.n	800213a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800213c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002140:	0800ba70 	.word	0x0800ba70
	ldr	r0, =_sdata
 8002144:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002148:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 800214c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002150:	20001e0c 	.word	0x20001e0c

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>
	...

08002158 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x28>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x28>)
 8002162:	f043 0310 	orr.w	r3, r3, #16
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f001 f9ae 	bl	80034ca <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff ff0c 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff fdac 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20001da0 	.word	0x20001da0

080021ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20001da0 	.word	0x20001da0

080021c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_Delay+0x40>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b09a      	sub	sp, #104	; 0x68
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e1e3      	b.n	80025f0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d176      	bne.n	8002328 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d152      	bne.n	80022e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fd5f 	bl	8001d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d13b      	bne.n	80022e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f001 f81d 	bl	80032b0 <ADC_Disable>
 8002276:	4603      	mov	r3, r0
 8002278:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12f      	bne.n	80022e8 <HAL_ADC_Init+0xe0>
 8002288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800228c:	2b00      	cmp	r3, #0
 800228e:	d12b      	bne.n	80022e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002298:	f023 0302 	bic.w	r3, r3, #2
 800229c:	f043 0202 	orr.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022c4:	4b92      	ldr	r3, [pc, #584]	; (8002510 <HAL_ADC_Init+0x308>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a92      	ldr	r2, [pc, #584]	; (8002514 <HAL_ADC_Init+0x30c>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0c9a      	lsrs	r2, r3, #18
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022da:	e002      	b.n	80022e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3b01      	subs	r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d110      	bne.n	8002328 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f023 0312 	bic.w	r3, r3, #18
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8150 	bne.w	80025d6 <HAL_ADC_Init+0x3ce>
 8002336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 814b 	bne.w	80025d6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8143 	bne.w	80025d6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002358:	f043 0202 	orr.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d004      	beq.n	8002374 <HAL_ADC_Init+0x16c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_ADC_Init+0x310>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_ADC_Init+0x170>
 8002374:	4b69      	ldr	r3, [pc, #420]	; (800251c <HAL_ADC_Init+0x314>)
 8002376:	e000      	b.n	800237a <HAL_ADC_Init+0x172>
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_ADC_Init+0x318>)
 800237a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002384:	d102      	bne.n	800238c <HAL_ADC_Init+0x184>
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_ADC_Init+0x310>)
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e01a      	b.n	80023c2 <HAL_ADC_Init+0x1ba>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a61      	ldr	r2, [pc, #388]	; (8002518 <HAL_ADC_Init+0x310>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <HAL_ADC_Init+0x196>
 8002396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e011      	b.n	80023c2 <HAL_ADC_Init+0x1ba>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_ADC_Init+0x31c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d102      	bne.n	80023ae <HAL_ADC_Init+0x1a6>
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_ADC_Init+0x320>)
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e009      	b.n	80023c2 <HAL_ADC_Init+0x1ba>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_ADC_Init+0x320>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_ADC_Init+0x1b6>
 80023b8:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_ADC_Init+0x31c>)
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e001      	b.n	80023c2 <HAL_ADC_Init+0x1ba>
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_ADC_Init+0x1da>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Init+0x1da>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_ADC_Init+0x1dc>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11c      	bne.n	8002422 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_ADC_Init+0x202>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_ADC_Init+0x202>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_ADC_Init+0x204>
 800240a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800240c:	2b00      	cmp	r3, #0
 800240e:	d108      	bne.n	8002422 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002420:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7e5b      	ldrb	r3, [r3, #25]
 8002426:	035b      	lsls	r3, r3, #13
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242c:	2a01      	cmp	r2, #1
 800242e:	d002      	beq.n	8002436 <HAL_ADC_Init+0x22e>
 8002430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002434:	e000      	b.n	8002438 <HAL_ADC_Init+0x230>
 8002436:	2200      	movs	r2, #0
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4313      	orrs	r3, r2
 8002446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002448:	4313      	orrs	r3, r2
 800244a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11b      	bne.n	800248e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7e5b      	ldrb	r3, [r3, #25]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	045a      	lsls	r2, r3, #17
 8002466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002468:	4313      	orrs	r3, r2
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	663b      	str	r3, [r7, #96]	; 0x60
 8002470:	e00d      	b.n	800248e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b01      	cmp	r3, #1
 8002494:	d054      	beq.n	8002540 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a22      	ldr	r2, [pc, #136]	; (8002524 <HAL_ADC_Init+0x31c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Init+0x2a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_ADC_Init+0x320>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d140      	bne.n	800252c <HAL_ADC_Init+0x324>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80024b2:	d02a      	beq.n	800250a <HAL_ADC_Init+0x302>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d022      	beq.n	8002504 <HAL_ADC_Init+0x2fc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80024c6:	d01a      	beq.n	80024fe <HAL_ADC_Init+0x2f6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80024d0:	d012      	beq.n	80024f8 <HAL_ADC_Init+0x2f0>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80024da:	d00a      	beq.n	80024f2 <HAL_ADC_Init+0x2ea>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80024e4:	d002      	beq.n	80024ec <HAL_ADC_Init+0x2e4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	e023      	b.n	8002534 <HAL_ADC_Init+0x32c>
 80024ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024f0:	e020      	b.n	8002534 <HAL_ADC_Init+0x32c>
 80024f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024f6:	e01d      	b.n	8002534 <HAL_ADC_Init+0x32c>
 80024f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024fc:	e01a      	b.n	8002534 <HAL_ADC_Init+0x32c>
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	e017      	b.n	8002534 <HAL_ADC_Init+0x32c>
 8002504:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002508:	e014      	b.n	8002534 <HAL_ADC_Init+0x32c>
 800250a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800250e:	e011      	b.n	8002534 <HAL_ADC_Init+0x32c>
 8002510:	20000000 	.word	0x20000000
 8002514:	431bde83 	.word	0x431bde83
 8002518:	50000100 	.word	0x50000100
 800251c:	50000300 	.word	0x50000300
 8002520:	50000700 	.word	0x50000700
 8002524:	50000400 	.word	0x50000400
 8002528:	50000500 	.word	0x50000500
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002538:	4313      	orrs	r3, r2
 800253a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253c:	4313      	orrs	r3, r2
 800253e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255c:	f023 0302 	bic.w	r3, r3, #2
 8002560:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7e1b      	ldrb	r3, [r3, #24]
 8002566:	039a      	lsls	r2, r3, #14
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4313      	orrs	r3, r2
 8002572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002574:	4313      	orrs	r3, r2
 8002576:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_ADC_Init+0x3f0>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002588:	430b      	orrs	r3, r1
 800258a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f023 010f 	bic.w	r1, r3, #15
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
 80025ac:	e007      	b.n	80025be <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 020f 	bic.w	r2, r2, #15
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f023 0303 	bic.w	r3, r3, #3
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
 80025d4:	e00a      	b.n	80025ec <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f023 0312 	bic.w	r3, r3, #18
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80025ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3768      	adds	r7, #104	; 0x68
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fff0c007 	.word	0xfff0c007

080025fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 80f9 	bne.w	800280a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Start+0x2a>
 8002622:	2302      	movs	r3, #2
 8002624:	e0f4      	b.n	8002810 <HAL_ADC_Start+0x214>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fde0 	bl	80031f4 <ADC_Enable>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80e0 	bne.w	8002800 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800265c:	d004      	beq.n	8002668 <HAL_ADC_Start+0x6c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6d      	ldr	r2, [pc, #436]	; (8002818 <HAL_ADC_Start+0x21c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d106      	bne.n	8002676 <HAL_ADC_Start+0x7a>
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_ADC_Start+0x220>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_ADC_Start+0x9a>
 8002674:	e005      	b.n	8002682 <HAL_ADC_Start+0x86>
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_ADC_Start+0x224>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_ADC_Start+0x9a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268a:	d004      	beq.n	8002696 <HAL_ADC_Start+0x9a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a64      	ldr	r2, [pc, #400]	; (8002824 <HAL_ADC_Start+0x228>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d115      	bne.n	80026c2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d036      	beq.n	800271e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026c0:	e02d      	b.n	800271e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Start+0xe6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <HAL_ADC_Start+0x21c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_Start+0xfc>
 80026e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e008      	b.n	800270a <HAL_ADC_Start+0x10e>
 80026f8:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_ADC_Start+0x228>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	d106      	bne.n	800273a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f023 0206 	bic.w	r2, r3, #6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
 8002738:	e002      	b.n	8002740 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	221c      	movs	r2, #28
 800274e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002758:	d004      	beq.n	8002764 <HAL_ADC_Start+0x168>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <HAL_ADC_Start+0x21c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d106      	bne.n	8002772 <HAL_ADC_Start+0x176>
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_ADC_Start+0x220>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03e      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 8002770:	e005      	b.n	800277e <HAL_ADC_Start+0x182>
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_ADC_Start+0x224>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2b00      	cmp	r3, #0
 800277c:	d037      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002786:	d004      	beq.n	8002792 <HAL_ADC_Start+0x196>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <HAL_ADC_Start+0x21c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_Start+0x1a4>
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_ADC_Start+0x220>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b05      	cmp	r3, #5
 800279c:	d027      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 800279e:	e005      	b.n	80027ac <HAL_ADC_Start+0x1b0>
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_ADC_Start+0x224>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d020      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_Start+0x1c4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_ADC_Start+0x21c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0x1d2>
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_ADC_Start+0x220>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d010      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 80027cc:	e005      	b.n	80027da <HAL_ADC_Start+0x1de>
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_ADC_Start+0x224>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	d009      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_Start+0x1f2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_ADC_Start+0x228>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10f      	bne.n	800280e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0204 	orr.w	r2, r2, #4
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	e006      	b.n	800280e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002808:	e001      	b.n	800280e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	50000100 	.word	0x50000100
 800281c:	50000300 	.word	0x50000300
 8002820:	50000700 	.word	0x50000700
 8002824:	50000400 	.word	0x50000400

08002828 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d102      	bne.n	8002844 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800283e:	2308      	movs	r3, #8
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e03a      	b.n	80028ba <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284c:	d004      	beq.n	8002858 <HAL_ADC_PollForConversion+0x30>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_ADC_PollForConversion+0x1e4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_ADC_PollForConversion+0x34>
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_ADC_PollForConversion+0x1e8>)
 800285a:	e000      	b.n	800285e <HAL_ADC_PollForConversion+0x36>
 800285c:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_ADC_PollForConversion+0x1ec>)
 800285e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b00      	cmp	r3, #0
 800286a:	d112      	bne.n	8002892 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d11d      	bne.n	80028b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0b8      	b.n	8002a04 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0a6      	b.n	8002a04 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80028b6:	230c      	movs	r3, #12
 80028b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_PollForConversion+0xa6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a50      	ldr	r2, [pc, #320]	; (8002a0c <HAL_ADC_PollForConversion+0x1e4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_PollForConversion+0xb4>
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_ADC_PollForConversion+0x1e8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_ADC_PollForConversion+0xd4>
 80028da:	e005      	b.n	80028e8 <HAL_ADC_PollForConversion+0xc0>
 80028dc:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_ADC_PollForConversion+0x1ec>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_ADC_PollForConversion+0xd4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f0:	d004      	beq.n	80028fc <HAL_ADC_PollForConversion+0xd4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a48      	ldr	r2, [pc, #288]	; (8002a18 <HAL_ADC_PollForConversion+0x1f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d104      	bne.n	8002906 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e00f      	b.n	8002926 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290e:	d004      	beq.n	800291a <HAL_ADC_PollForConversion+0xf2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <HAL_ADC_PollForConversion+0x1e4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <HAL_ADC_PollForConversion+0xf8>
 800291a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800291e:	e000      	b.n	8002922 <HAL_ADC_PollForConversion+0xfa>
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_ADC_PollForConversion+0x1f0>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002926:	f7ff fc41 	bl	80021ac <HAL_GetTick>
 800292a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800292c:	e01a      	b.n	8002964 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d016      	beq.n	8002964 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_ADC_PollForConversion+0x124>
 800293c:	f7ff fc36 	bl	80021ac <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d20b      	bcs.n	8002964 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e04f      	b.n	8002a04 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0dd      	beq.n	800292e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002988:	2b00      	cmp	r3, #0
 800298a:	d131      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002992:	2b00      	cmp	r3, #0
 8002994:	d12c      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d125      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d112      	bne.n	80029d8 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d112      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
 80029d6:	e00b      	b.n	80029f0 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	50000100 	.word	0x50000100
 8002a10:	50000300 	.word	0x50000300
 8002a14:	50000700 	.word	0x50000700
 8002a18:	50000400 	.word	0x50000400

08002a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b09b      	sub	sp, #108	; 0x6c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x22>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e2cb      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x5ba>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 82af 	bne.w	8002fd0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d81c      	bhi.n	8002ab4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	231f      	movs	r3, #31
 8002a90:	4093      	lsls	r3, r2
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4019      	ands	r1, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab2:	e063      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d81e      	bhi.n	8002afa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	3b1e      	subs	r3, #30
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	4019      	ands	r1, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
 8002af8:	e040      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b0e      	cmp	r3, #14
 8002b00:	d81e      	bhi.n	8002b40 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	3b3c      	subs	r3, #60	; 0x3c
 8002b16:	221f      	movs	r2, #31
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4019      	ands	r1, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	3b3c      	subs	r3, #60	; 0x3c
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b3e:	e01d      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	3b5a      	subs	r3, #90	; 0x5a
 8002b54:	221f      	movs	r2, #31
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	4019      	ands	r1, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	3b5a      	subs	r3, #90	; 0x5a
 8002b70:	fa00 f203 	lsl.w	r2, r0, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80e5 	bne.w	8002d56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d91c      	bls.n	8002bce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4019      	ands	r1, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6898      	ldr	r0, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b1e      	subs	r3, #30
 8002bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]
 8002bcc:	e019      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6959      	ldr	r1, [r3, #20]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4019      	ands	r1, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6898      	ldr	r0, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d84f      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0x28c>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_ADC_ConfigChannel+0x1f4>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c81 	.word	0x08002c81
 8002c38:	08002ca3 	.word	0x08002ca3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c42:	4b9f      	ldr	r3, [pc, #636]	; (8002ec0 <HAL_ADC_ConfigChannel+0x488>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	0691      	lsls	r1, r2, #26
 8002c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c5c:	e07e      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c64:	4b96      	ldr	r3, [pc, #600]	; (8002ec0 <HAL_ADC_ConfigChannel+0x488>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	0691      	lsls	r1, r2, #26
 8002c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c70:	430a      	orrs	r2, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c7e:	e06d      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c86:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_ADC_ConfigChannel+0x488>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	0691      	lsls	r1, r2, #26
 8002c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c92:	430a      	orrs	r2, r1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ca0:	e05c      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ca8:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_ADC_ConfigChannel+0x488>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	0691      	lsls	r1, r2, #26
 8002cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cc0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002cc2:	e04b      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ce6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	069b      	lsls	r3, r3, #26
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d10a      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002d54:	e001      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002d5a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x344>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x344>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x346>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 8131 	bne.w	8002fe6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d00f      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002daa:	e049      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d91c      	bls.n	8002e08 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6999      	ldr	r1, [r3, #24]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b1b      	subs	r3, #27
 8002de0:	2207      	movs	r2, #7
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4019      	ands	r1, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6898      	ldr	r0, [r3, #8]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	3b1b      	subs	r3, #27
 8002dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	619a      	str	r2, [r3, #24]
 8002e06:	e01b      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6959      	ldr	r1, [r3, #20]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4019      	ands	r1, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	fa00 f203 	lsl.w	r2, r0, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e48:	d004      	beq.n	8002e54 <HAL_ADC_ConfigChannel+0x41c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_ADC_ConfigChannel+0x48c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x420>
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_ADC_ConfigChannel+0x490>)
 8002e56:	e000      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x422>
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_ADC_ConfigChannel+0x494>)
 8002e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d105      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d105      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	f040 80ac 	bne.w	8002fe6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80a5 	bne.w	8002fe6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ea4:	d102      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x474>
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_ADC_ConfigChannel+0x48c>)
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e023      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4bc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_ADC_ConfigChannel+0x48c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x498>
 8002eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e01a      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4bc>
 8002ebe:	bf00      	nop
 8002ec0:	83fff000 	.word	0x83fff000
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	50000700 	.word	0x50000700
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4a      	ldr	r2, [pc, #296]	; (8003000 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d102      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x4a8>
 8002eda:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_ADC_ConfigChannel+0x5cc>)
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e009      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4bc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a47      	ldr	r2, [pc, #284]	; (8003004 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d102      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x4b8>
 8002eea:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_ADC_ConfigChannel+0x5c8>)
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e001      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4bc>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x4dc>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x4dc>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x4de>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d150      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x504>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x504>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x506>
 8002f3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d13c      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d11d      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x54e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f52:	d118      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_ADC_ConfigChannel+0x5d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_ADC_ConfigChannel+0x5d4>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9a      	lsrs	r2, r3, #18
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f76:	e002      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f9      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f84:	e02e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x56e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f96:	d106      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fa4:	e01e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d11a      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fba:	e013      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fce:	e00a      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fe4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	376c      	adds	r7, #108	; 0x6c
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	50000400 	.word	0x50000400
 8003004:	50000500 	.word	0x50000500
 8003008:	20000000 	.word	0x20000000
 800300c:	431bde83 	.word	0x431bde83

08003010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003010:	b480      	push	{r7}
 8003012:	b099      	sub	sp, #100	; 0x64
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003028:	d102      	bne.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800302a:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	e01a      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d103      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800303a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	e011      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d102      	bne.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e009      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a64      	ldr	r2, [pc, #400]	; (80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	e001      	b.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b0      	b.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800307a:	2302      	movs	r3, #2
 800307c:	e0a9      	b.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 808d 	bne.w	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 8086 	bne.w	80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ac:	d004      	beq.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030b8:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80030ba:	e000      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80030be:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d040      	beq.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030da:	035b      	lsls	r3, r3, #13
 80030dc:	430b      	orrs	r3, r1
 80030de:	431a      	orrs	r2, r3
 80030e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d108      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d15c      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003126:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d14b      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800312c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003134:	f023 030f 	bic.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6811      	ldr	r1, [r2, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	430a      	orrs	r2, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003146:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003148:	e03c      	b.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800314a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003154:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d108      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d123      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003198:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d112      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800319e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031a6:	f023 030f 	bic.w	r3, r3, #15
 80031aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ac:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ae:	e009      	b.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031c2:	e000      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031c4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80031d2:	4618      	mov	r0, r3
 80031d4:	3764      	adds	r7, #100	; 0x64
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	50000100 	.word	0x50000100
 80031e4:	50000400 	.word	0x50000400
 80031e8:	50000500 	.word	0x50000500
 80031ec:	50000300 	.word	0x50000300
 80031f0:	50000700 	.word	0x50000700

080031f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <ADC_Enable+0x2c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <ADC_Enable+0x2c>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <ADC_Enable+0x2e>
 8003220:	2300      	movs	r3, #0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d13c      	bne.n	80032a0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <ADC_Enable+0xb8>)
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f043 0210 	orr.w	r2, r3, #16
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	f043 0201 	orr.w	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e028      	b.n	80032a2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003260:	f7fe ffa4 	bl	80021ac <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003266:	e014      	b.n	8003292 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003268:	f7fe ffa0 	bl	80021ac <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d90d      	bls.n	8003292 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e007      	b.n	80032a2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d1e3      	bne.n	8003268 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	8000003f 	.word	0x8000003f

080032b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <ADC_Disable+0x2c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <ADC_Disable+0x2c>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <ADC_Disable+0x2e>
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d040      	beq.n	8003364 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030d 	and.w	r3, r3, #13
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10f      	bne.n	8003310 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0202 	orr.w	r2, r2, #2
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2203      	movs	r2, #3
 8003306:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003308:	f7fe ff50 	bl	80021ac <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800330e:	e022      	b.n	8003356 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01c      	b.n	8003366 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800332c:	f7fe ff3e 	bl	80021ac <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d90d      	bls.n	8003356 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d0e3      	beq.n	800332c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	; (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff4c 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f2:	f7ff ff61 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 80034f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	6978      	ldr	r0, [r7, #20]
 80034fe:	f7ff ffb1 	bl	8003464 <NVIC_EncodePriority>
 8003502:	4602      	mov	r2, r0
 8003504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff80 	bl	8003410 <__NVIC_SetPriority>
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff54 	bl	80033d4 <__NVIC_EnableIRQ>
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_FLASH_Unlock+0x40>)
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_FLASH_Unlock+0x40>)
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_FLASH_Unlock+0x44>)
 800354e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_FLASH_Unlock+0x40>)
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <HAL_FLASH_Unlock+0x48>)
 8003554:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_FLASH_Unlock+0x40>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003566:	79fb      	ldrb	r3, [r7, #7]
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40022000 	.word	0x40022000
 8003578:	45670123 	.word	0x45670123
 800357c:	cdef89ab 	.word	0xcdef89ab

08003580 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_FLASH_Lock+0x1c>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_FLASH_Lock+0x1c>)
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40022000 	.word	0x40022000

080035a0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_FLASH_OB_Unlock+0x2c>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_FLASH_OB_Unlock+0x2c>)
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_FLASH_OB_Unlock+0x30>)
 80035b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_FLASH_OB_Unlock+0x2c>)
 80035b8:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <HAL_FLASH_OB_Unlock+0x34>)
 80035ba:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40022000 	.word	0x40022000
 80035d0:	45670123 	.word	0x45670123
 80035d4:	cdef89ab 	.word	0xcdef89ab

080035d8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_FLASH_OB_Lock+0x1c>)
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_FLASH_OB_Lock+0x1c>)
 80035e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40022000 	.word	0x40022000

080035f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7fe fdd4 	bl	80021ac <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003606:	e010      	b.n	800362a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d00c      	beq.n	800362a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <FLASH_WaitForLastOperation+0x2e>
 8003616:	f7fe fdc9 	bl	80021ac <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d201      	bcs.n	800362a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e01f      	b.n	800366a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <FLASH_WaitForLastOperation+0x7c>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d0e8      	beq.n	8003608 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <FLASH_WaitForLastOperation+0x7c>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d102      	bne.n	8003648 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <FLASH_WaitForLastOperation+0x7c>)
 8003644:	2220      	movs	r2, #32
 8003646:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <FLASH_WaitForLastOperation+0x7c>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d005      	beq.n	8003660 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <FLASH_WaitForLastOperation+0x7c>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800365c:	2b04      	cmp	r3, #4
 800365e:	d103      	bne.n	8003668 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003660:	f000 f80a 	bl	8003678 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40022000 	.word	0x40022000

08003678 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <FLASH_SetErrorCode+0x5c>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d109      	bne.n	80036a2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <FLASH_SetErrorCode+0x60>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <FLASH_SetErrorCode+0x60>)
 8003698:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f043 0310 	orr.w	r3, r3, #16
 80036a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <FLASH_SetErrorCode+0x5c>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d109      	bne.n	80036c2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <FLASH_SetErrorCode+0x60>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <FLASH_SetErrorCode+0x60>)
 80036b8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <FLASH_SetErrorCode+0x5c>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60d3      	str	r3, [r2, #12]
}  
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40022000 	.word	0x40022000
 80036d8:	20001da8 	.word	0x20001da8

080036dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_FLASHEx_Erase+0xc0>)
 80036f0:	7e1b      	ldrb	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_FLASHEx_Erase+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e04b      	b.n	8003792 <HAL_FLASHEx_Erase+0xb6>
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_FLASHEx_Erase+0xc0>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d115      	bne.n	8003734 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003708:	f24c 3050 	movw	r0, #50000	; 0xc350
 800370c:	f7ff ff74 	bl	80035f8 <FLASH_WaitForLastOperation>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d139      	bne.n	800378a <HAL_FLASHEx_Erase+0xae>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003716:	f000 f845 	bl	80037a4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800371a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800371e:	f7ff ff6b 	bl	80035f8 <FLASH_WaitForLastOperation>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_FLASHEx_Erase+0xc4>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_FLASHEx_Erase+0xc4>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6113      	str	r3, [r2, #16]
 8003732:	e02a      	b.n	800378a <HAL_FLASHEx_Erase+0xae>
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      //if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	e019      	b.n	8003778 <HAL_FLASHEx_Erase+0x9c>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003744:	68b8      	ldr	r0, [r7, #8]
 8003746:	f000 f847 	bl	80037d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800374a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800374e:	f7ff ff53 	bl	80035f8 <FLASH_WaitForLastOperation>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_FLASHEx_Erase+0xc4>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <HAL_FLASHEx_Erase+0xc4>)
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_FLASHEx_Erase+0x94>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	601a      	str	r2, [r3, #0]
            break;
 800376e:	e00c      	b.n	800378a <HAL_FLASHEx_Erase+0xae>
            address += FLASH_PAGE_SIZE)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	02da      	lsls	r2, r3, #11
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d3dc      	bcc.n	8003744 <HAL_FLASHEx_Erase+0x68>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_FLASHEx_Erase+0xc0>)
 800378c:	2200      	movs	r2, #0
 800378e:	761a      	strb	r2, [r3, #24]

  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20001da8 	.word	0x20001da8
 80037a0:	40022000 	.word	0x40022000

080037a4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <FLASH_MassErase+0x2c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <FLASH_MassErase+0x30>)
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <FLASH_MassErase+0x30>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <FLASH_MassErase+0x30>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <FLASH_MassErase+0x30>)
 80037c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c4:	6113      	str	r3, [r2, #16]
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	20001da8 	.word	0x20001da8
 80037d4:	40022000 	.word	0x40022000

080037d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <FLASH_PageErase+0x38>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <FLASH_PageErase+0x3c>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <FLASH_PageErase+0x3c>)
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80037f2:	4a08      	ldr	r2, [pc, #32]	; (8003814 <FLASH_PageErase+0x3c>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <FLASH_PageErase+0x3c>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	4a05      	ldr	r2, [pc, #20]	; (8003814 <FLASH_PageErase+0x3c>)
 80037fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003802:	6113      	str	r3, [r2, #16]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	20001da8 	.word	0x20001da8
 8003814:	40022000 	.word	0x40022000

08003818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003826:	e160      	b.n	8003aea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2101      	movs	r1, #1
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8152 	beq.w	8003ae4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x38>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b12      	cmp	r3, #18
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d00b      	beq.n	80038ec <HAL_GPIO_Init+0xd4>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d007      	beq.n	80038ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e0:	2b11      	cmp	r3, #17
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d130      	bne.n	800394e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003922:	2201      	movs	r2, #1
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0201 	and.w	r2, r3, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80ac 	beq.w	8003ae4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6193      	str	r3, [r2, #24]
 8003998:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_GPIO_Init+0x2f0>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039a4:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <HAL_GPIO_Init+0x2f4>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ce:	d025      	beq.n	8003a1c <HAL_GPIO_Init+0x204>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4f      	ldr	r2, [pc, #316]	; (8003b10 <HAL_GPIO_Init+0x2f8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d01f      	beq.n	8003a18 <HAL_GPIO_Init+0x200>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_GPIO_Init+0x2fc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d019      	beq.n	8003a14 <HAL_GPIO_Init+0x1fc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a4d      	ldr	r2, [pc, #308]	; (8003b18 <HAL_GPIO_Init+0x300>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_GPIO_Init+0x1f8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_GPIO_Init+0x304>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00d      	beq.n	8003a0c <HAL_GPIO_Init+0x1f4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a4b      	ldr	r2, [pc, #300]	; (8003b20 <HAL_GPIO_Init+0x308>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <HAL_GPIO_Init+0x1f0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_GPIO_Init+0x30c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_GPIO_Init+0x1ec>
 8003a00:	2306      	movs	r3, #6
 8003a02:	e00c      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a04:	2307      	movs	r3, #7
 8003a06:	e00a      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a08:	2305      	movs	r3, #5
 8003a0a:	e008      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e006      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a10:	2303      	movs	r3, #3
 8003a12:	e004      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e002      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_GPIO_Init+0x206>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	f002 0203 	and.w	r2, r2, #3
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	4093      	lsls	r3, r2
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a2e:	4937      	ldr	r1, [pc, #220]	; (8003b0c <HAL_GPIO_Init+0x2f4>)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a8a:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <HAL_GPIO_Init+0x310>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f47f ae97 	bne.w	8003828 <HAL_GPIO_Init+0x10>
  }
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	48000400 	.word	0x48000400
 8003b14:	48000800 	.word	0x48000800
 8003b18:	48000c00 	.word	0x48000c00
 8003b1c:	48001000 	.word	0x48001000
 8003b20:	48001400 	.word	0x48001400
 8003b24:	48001800 	.word	0x48001800
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f000 bf01 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8160 	beq.w	8003e76 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bb6:	4bae      	ldr	r3, [pc, #696]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc2:	4bab      	ldr	r3, [pc, #684]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d159      	bne.n	8003c82 <HAL_RCC_OscConfig+0xf6>
 8003bce:	4ba8      	ldr	r3, [pc, #672]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d152      	bne.n	8003c82 <HAL_RCC_OscConfig+0xf6>
 8003bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8003bf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_OscConfig+0x82>
 8003c08:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	e015      	b.n	8003c3a <HAL_RCC_OscConfig+0xae>
 8003c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c2a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c36:	4b8e      	ldr	r3, [pc, #568]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c3e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003c42:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003c46:	fa92 f2a2 	rbit	r2, r2
 8003c4a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003c4e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c52:	fab2 f282 	clz	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f042 0220 	orr.w	r2, r2, #32
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f002 021f 	and.w	r2, r2, #31
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8102 	beq.w	8003e74 <HAL_RCC_OscConfig+0x2e8>
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 80fc 	bne.w	8003e74 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f000 be93 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x110>
 8003c8e:	4b78      	ldr	r3, [pc, #480]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a77      	ldr	r2, [pc, #476]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e030      	b.n	8003cfe <HAL_RCC_OscConfig+0x172>
 8003c9c:	1d3b      	adds	r3, r7, #4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x134>
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a71      	ldr	r2, [pc, #452]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01e      	b.n	8003cfe <HAL_RCC_OscConfig+0x172>
 8003cc0:	1d3b      	adds	r3, r7, #4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x15a>
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a64      	ldr	r2, [pc, #400]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e00b      	b.n	8003cfe <HAL_RCC_OscConfig+0x172>
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a61      	ldr	r2, [pc, #388]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5e      	ldr	r2, [pc, #376]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d059      	beq.n	8003dbc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fa50 	bl	80021ac <HAL_GetTick>
 8003d0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d12:	f7fe fa4b 	bl	80021ac <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d902      	bls.n	8003d28 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	f000 be40 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8003d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003d3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_RCC_OscConfig+0x1ce>
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e015      	b.n	8003d86 <HAL_RCC_OscConfig+0x1fa>
 8003d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d8a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003d8e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003d92:	fa92 f2a2 	rbit	r2, r2
 8003d96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003d9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d9e:	fab2 f282 	clz	r2, r2
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	f042 0220 	orr.w	r2, r2, #32
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	f002 021f 	and.w	r2, r2, #31
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f202 	lsl.w	r2, r1, r2
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0ab      	beq.n	8003d12 <HAL_RCC_OscConfig+0x186>
 8003dba:	e05c      	b.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f9f6 	bl	80021ac <HAL_GetTick>
 8003dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc6:	f7fe f9f1 	bl	80021ac <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d902      	bls.n	8003ddc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	f000 bde6 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8003ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003df0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_OscConfig+0x282>
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x2ae>
 8003e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_RCC_OscConfig+0x2e4>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e3e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003e42:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003e46:	fa92 f2a2 	rbit	r2, r2
 8003e4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003e4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003e52:	fab2 f282 	clz	r2, r2
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f042 0220 	orr.w	r2, r2, #32
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ab      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x23a>
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
 8003e70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8170 	beq.w	8004166 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e86:	4bd0      	ldr	r3, [pc, #832]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e92:	4bcd      	ldr	r3, [pc, #820]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d16d      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3ee>
 8003e9e:	4bca      	ldr	r3, [pc, #808]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eaa:	d166      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3ee>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003ebe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0x350>
 8003ed6:	4bbc      	ldr	r3, [pc, #752]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e013      	b.n	8003f04 <HAL_RCC_OscConfig+0x378>
 8003edc:	2302      	movs	r3, #2
 8003ede:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ef4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f00:	4bb1      	ldr	r3, [pc, #708]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2202      	movs	r2, #2
 8003f06:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003f0a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003f0e:	fa92 f2a2 	rbit	r2, r2
 8003f12:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003f16:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_RCC_OscConfig+0x3ba>
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f000 bd31 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4ba0      	ldr	r3, [pc, #640]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	21f8      	movs	r1, #248	; 0xf8
 8003f56:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003f5e:	fa91 f1a1 	rbit	r1, r1
 8003f62:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003f66:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003f6a:	fab1 f181 	clz	r1, r1
 8003f6e:	b2c9      	uxtb	r1, r1
 8003f70:	408b      	lsls	r3, r1
 8003f72:	4995      	ldr	r1, [pc, #596]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f78:	e0f5      	b.n	8004166 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8085 	beq.w	8004090 <HAL_RCC_OscConfig+0x504>
 8003f86:	2301      	movs	r3, #1
 8003f88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003f98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	461a      	mov	r2, r3
 8003fae:	2301      	movs	r3, #1
 8003fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe f8fb 	bl	80021ac <HAL_GetTick>
 8003fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fe f8f6 	bl	80021ac <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d902      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	f000 bceb 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003fe4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_RCC_OscConfig+0x476>
 8003ffc:	4b72      	ldr	r3, [pc, #456]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	e013      	b.n	800402a <HAL_RCC_OscConfig+0x49e>
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800401a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004026:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2202      	movs	r2, #2
 800402c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004030:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800403c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f042 0220 	orr.w	r2, r2, #32
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f002 021f 	and.w	r2, r2, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0af      	beq.n	8003fbc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	21f8      	movs	r1, #248	; 0xf8
 800406c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004074:	fa91 f1a1 	rbit	r1, r1
 8004078:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800407c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004080:	fab1 f181 	clz	r1, r1
 8004084:	b2c9      	uxtb	r1, r1
 8004086:	408b      	lsls	r3, r1
 8004088:	494f      	ldr	r1, [pc, #316]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
 800408e:	e06a      	b.n	8004166 <HAL_RCC_OscConfig+0x5da>
 8004090:	2301      	movs	r3, #1
 8004092:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80040a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe f876 	bl	80021ac <HAL_GetTick>
 80040c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fe f871 	bl	80021ac <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f000 bc66 	b.w	80049a8 <HAL_RCC_OscConfig+0xe1c>
 80040dc:	2302      	movs	r3, #2
 80040de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80040ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_RCC_OscConfig+0x580>
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e013      	b.n	8004134 <HAL_RCC_OscConfig+0x5a8>
 800410c:	2302      	movs	r3, #2
 800410e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800411e:	2302      	movs	r3, #2
 8004120:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004124:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_OscConfig+0x63c>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800413a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800413e:	fa92 f2a2 	rbit	r2, r2
 8004142:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004146:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800414a:	fab2 f282 	clz	r2, r2
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f042 0220 	orr.w	r2, r2, #32
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f002 021f 	and.w	r2, r2, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f202 	lsl.w	r2, r1, r2
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1af      	bne.n	80040c6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80da 	beq.w	800432a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d069      	beq.n	8004254 <HAL_RCC_OscConfig+0x6c8>
 8004180:	2301      	movs	r3, #1
 8004182:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004192:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x640>)
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	461a      	mov	r2, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fd ffff 	bl	80021ac <HAL_GetTick>
 80041ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e00d      	b.n	80041d0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fd fffa 	bl	80021ac <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d905      	bls.n	80041d0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e3ef      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 80041c8:	40021000 	.word	0x40021000
 80041cc:	10908120 	.word	0x10908120
 80041d0:	2302      	movs	r3, #2
 80041d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80041e8:	2202      	movs	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004200:	2202      	movs	r2, #2
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	fa93 f2a3 	rbit	r2, r3
 800420e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004212:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004214:	4ba4      	ldr	r3, [pc, #656]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004218:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800421c:	2102      	movs	r1, #2
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f1a3 	rbit	r1, r3
 800422a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800422e:	6019      	str	r1, [r3, #0]
  return result;
 8004230:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0b0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x628>
 8004252:	e06a      	b.n	800432a <HAL_RCC_OscConfig+0x79e>
 8004254:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fa93 f2a3 	rbit	r2, r3
 8004266:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800426a:	601a      	str	r2, [r3, #0]
  return result;
 800426c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004270:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x920>)
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fd ff91 	bl	80021ac <HAL_GetTick>
 800428a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428e:	e009      	b.n	80042a4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd ff8c 	bl	80021ac <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e381      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 80042a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80042a8:	2202      	movs	r2, #2
 80042aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042c0:	2202      	movs	r2, #2
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f2a3 	rbit	r2, r3
 80042ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fa93 f2a3 	rbit	r2, r3
 80042e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80042ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80042ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042f4:	2102      	movs	r1, #2
 80042f6:	6019      	str	r1, [r3, #0]
 80042f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f1a3 	rbit	r1, r3
 8004302:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004306:	6019      	str	r1, [r3, #0]
  return result;
 8004308:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1b2      	bne.n	8004290 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8157 	beq.w	80045e8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d112      	bne.n	8004372 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4a55      	ldr	r2, [pc, #340]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	61d3      	str	r3, [r2, #28]
 8004358:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004360:	f107 030c 	add.w	r3, r7, #12
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCC_OscConfig+0x924>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_RCC_OscConfig+0x924>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <HAL_RCC_OscConfig+0x924>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438a:	f7fd ff0f 	bl	80021ac <HAL_GetTick>
 800438e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	e009      	b.n	80043a8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fd ff0a 	bl	80021ac <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	; 0x64
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e2ff      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	4b41      	ldr	r3, [pc, #260]	; (80044b0 <HAL_RCC_OscConfig+0x924>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ef      	beq.n	8004394 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x840>
 80043be:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a39      	ldr	r2, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6213      	str	r3, [r2, #32]
 80043ca:	e02f      	b.n	800442c <HAL_RCC_OscConfig+0x8a0>
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x864>
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4a33      	ldr	r2, [pc, #204]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6213      	str	r3, [r2, #32]
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6213      	str	r3, [r2, #32]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0x8a0>
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x888>
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6213      	str	r3, [r2, #32]
 8004406:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6213      	str	r3, [r2, #32]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x8a0>
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6213      	str	r3, [r2, #32]
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d06a      	beq.n	800450c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fd feb9 	bl	80021ac <HAL_GetTick>
 800443a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fd feb4 	bl	80021ac <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e2a7      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8004458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800445c:	2202      	movs	r2, #2
 800445e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	fa93 f2a3 	rbit	r2, r3
 800446a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004474:	2202      	movs	r2, #2
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	fa93 f2a3 	rbit	r2, r3
 8004482:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004486:	601a      	str	r2, [r3, #0]
  return result;
 8004488:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800448c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d108      	bne.n	80044b4 <HAL_RCC_OscConfig+0x928>
 80044a2:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <HAL_RCC_OscConfig+0x91c>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	e013      	b.n	80044d0 <HAL_RCC_OscConfig+0x944>
 80044a8:	40021000 	.word	0x40021000
 80044ac:	10908120 	.word	0x10908120
 80044b0:	40007000 	.word	0x40007000
 80044b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80044b8:	2202      	movs	r2, #2
 80044ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fa93 f2a3 	rbit	r2, r3
 80044c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	4bc0      	ldr	r3, [pc, #768]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044d4:	2102      	movs	r1, #2
 80044d6:	6011      	str	r1, [r2, #0]
 80044d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	fa92 f1a2 	rbit	r1, r2
 80044e2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80044e6:	6011      	str	r1, [r2, #0]
  return result;
 80044e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	fab2 f282 	clz	r2, r2
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f002 021f 	and.w	r2, r2, #31
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d09a      	beq.n	8004440 <HAL_RCC_OscConfig+0x8b4>
 800450a:	e063      	b.n	80045d4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fd fe4e 	bl	80021ac <HAL_GetTick>
 8004510:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004514:	e00b      	b.n	800452e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fd fe49 	bl	80021ac <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e23c      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 800452e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004532:	2202      	movs	r2, #2
 8004534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fa93 f2a3 	rbit	r2, r3
 8004540:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800454a:	2202      	movs	r2, #2
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	fa93 f2a3 	rbit	r2, r3
 8004558:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800455c:	601a      	str	r2, [r3, #0]
  return result;
 800455e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004562:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f043 0302 	orr.w	r3, r3, #2
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d102      	bne.n	800457e <HAL_RCC_OscConfig+0x9f2>
 8004578:	4b95      	ldr	r3, [pc, #596]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	e00d      	b.n	800459a <HAL_RCC_OscConfig+0xa0e>
 800457e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004582:	2202      	movs	r2, #2
 8004584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	4b8e      	ldr	r3, [pc, #568]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800459e:	2102      	movs	r1, #2
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	fa92 f1a2 	rbit	r1, r2
 80045ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045b0:	6011      	str	r1, [r2, #0]
  return result;
 80045b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	f002 021f 	and.w	r2, r2, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f202 	lsl.w	r2, r1, r2
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1a0      	bne.n	8004516 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045d4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b7c      	ldr	r3, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4a7b      	ldr	r2, [pc, #492]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 81d9 	beq.w	80049a6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f4:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	f000 81a6 	beq.w	800494e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b02      	cmp	r3, #2
 800460a:	f040 811e 	bne.w	800484a <HAL_RCC_OscConfig+0xcbe>
 800460e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	fa93 f2a3 	rbit	r2, r3
 8004622:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004626:	601a      	str	r2, [r3, #0]
  return result;
 8004628:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800462c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	461a      	mov	r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd fdb2 	bl	80021ac <HAL_GetTick>
 8004648:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464c:	e009      	b.n	8004662 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fdad 	bl	80021ac <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1a2      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8004662:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	fa93 f2a3 	rbit	r2, r3
 8004676:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800467a:	601a      	str	r2, [r3, #0]
  return result;
 800467c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004680:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_RCC_OscConfig+0xb10>
 8004696:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e01b      	b.n	80046d4 <HAL_RCC_OscConfig+0xb48>
 800469c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	fa93 f2a3 	rbit	r2, r3
 80046b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	fa93 f2a3 	rbit	r2, r3
 80046ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	fa92 f1a2 	rbit	r1, r2
 80046e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046ec:	6011      	str	r1, [r2, #0]
  return result;
 80046ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d19e      	bne.n	800464e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004710:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f023 020f 	bic.w	r2, r3, #15
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	492c      	ldr	r1, [pc, #176]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 8004720:	4313      	orrs	r3, r2
 8004722:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004724:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a19      	ldr	r1, [r3, #32]
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	430b      	orrs	r3, r1
 800473a:	4925      	ldr	r1, [pc, #148]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
 8004740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	fa93 f2a3 	rbit	r2, r3
 8004754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004758:	601a      	str	r2, [r3, #0]
  return result;
 800475a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800475e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	461a      	mov	r2, r3
 8004772:	2301      	movs	r3, #1
 8004774:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fd fd19 	bl	80021ac <HAL_GetTick>
 800477a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800477e:	e009      	b.n	8004794 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fd14 	bl	80021ac <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e109      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 8004794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800479c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	fa93 f2a3 	rbit	r2, r3
 80047a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047ac:	601a      	str	r2, [r3, #0]
  return result;
 80047ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <HAL_RCC_OscConfig+0xc48>
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <HAL_RCC_OscConfig+0xc44>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	e01e      	b.n	800480c <HAL_RCC_OscConfig+0xc80>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	fa93 f2a3 	rbit	r2, r3
 80047e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	fa93 f2a3 	rbit	r2, r3
 8004802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCC_OscConfig+0xe28>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004810:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	fa92 f1a2 	rbit	r1, r2
 8004820:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004824:	6011      	str	r1, [r2, #0]
  return result;
 8004826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	fab2 f282 	clz	r2, r2
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f002 021f 	and.w	r2, r2, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d09b      	beq.n	8004780 <HAL_RCC_OscConfig+0xbf4>
 8004848:	e0ad      	b.n	80049a6 <HAL_RCC_OscConfig+0xe1a>
 800484a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800484e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	fa93 f2a3 	rbit	r2, r3
 800485e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004868:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004874:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	461a      	mov	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd fc94 	bl	80021ac <HAL_GetTick>
 8004884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	e009      	b.n	800489e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fd fc8f 	bl	80021ac <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e084      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
 800489e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	fa93 f2a3 	rbit	r2, r3
 80048b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048b6:	601a      	str	r2, [r3, #0]
  return result;
 80048b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d102      	bne.n	80048d8 <HAL_RCC_OscConfig+0xd4c>
 80048d2:	4b38      	ldr	r3, [pc, #224]	; (80049b4 <HAL_RCC_OscConfig+0xe28>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0xd84>
 80048d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f107 031c 	add.w	r3, r7, #28
 80048f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	fa93 f2a3 	rbit	r2, r3
 8004906:	f107 0318 	add.w	r3, r7, #24
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <HAL_RCC_OscConfig+0xe28>)
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f107 0214 	add.w	r2, r7, #20
 8004914:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	f107 0214 	add.w	r2, r7, #20
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	fa92 f1a2 	rbit	r1, r2
 8004924:	f107 0210 	add.w	r2, r7, #16
 8004928:	6011      	str	r1, [r2, #0]
  return result;
 800492a:	f107 0210 	add.w	r2, r7, #16
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	fab2 f282 	clz	r2, r2
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f042 0220 	orr.w	r2, r2, #32
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	f002 021f 	and.w	r2, r2, #31
 8004940:	2101      	movs	r1, #1
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d19e      	bne.n	800488a <HAL_RCC_OscConfig+0xcfe>
 800494c:	e02b      	b.n	80049a6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e025      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800495c:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_RCC_OscConfig+0xe28>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_RCC_OscConfig+0xe28>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800496c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004970:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	429a      	cmp	r2, r3
 800497c:	d111      	bne.n	80049a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800497e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800498c:	429a      	cmp	r2, r3
 800498e:	d108      	bne.n	80049a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800499e:	429a      	cmp	r2, r3
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000

080049b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b09e      	sub	sp, #120	; 0x78
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e162      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b90      	ldr	r3, [pc, #576]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d910      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b8d      	ldr	r3, [pc, #564]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 0207 	bic.w	r2, r3, #7
 80049e6:	498b      	ldr	r1, [pc, #556]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b89      	ldr	r3, [pc, #548]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e14a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b82      	ldr	r3, [pc, #520]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	497f      	ldr	r1, [pc, #508]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80dc 	beq.w	8004be4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d13c      	bne.n	8004aae <HAL_RCC_ClockConfig+0xf6>
 8004a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xa6>
 8004a58:	4b6f      	ldr	r3, [pc, #444]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	e00f      	b.n	8004a7e <HAL_RCC_ClockConfig+0xc6>
 8004a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a70:	663b      	str	r3, [r7, #96]	; 0x60
 8004a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a82:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a86:	fa92 f2a2 	rbit	r2, r2
 8004a8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a8e:	fab2 f282 	clz	r2, r2
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	f042 0220 	orr.w	r2, r2, #32
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f002 021f 	and.w	r2, r2, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d17b      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0f3      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d13c      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x178>
 8004ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abe:	fa93 f3a3 	rbit	r3, r3
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	fab3 f383 	clz	r3, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x128>
 8004ada:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	e00f      	b.n	8004b00 <HAL_RCC_ClockConfig+0x148>
 8004ae0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae8:	fa93 f3a3 	rbit	r3, r3
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af2:	643b      	str	r3, [r7, #64]	; 0x40
 8004af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b04:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b08:	fa92 f2a2 	rbit	r2, r2
 8004b0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f042 0220 	orr.w	r2, r2, #32
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	f002 021f 	and.w	r2, r2, #31
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d13a      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0b2      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
 8004b30:	2302      	movs	r3, #2
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	fab3 f383 	clz	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x1a0>
 8004b52:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	e00d      	b.n	8004b74 <HAL_RCC_ClockConfig+0x1bc>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	2302      	movs	r3, #2
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	fa93 f3a3 	rbit	r3, r3
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2202      	movs	r2, #2
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	fa92 f2a2 	rbit	r2, r2
 8004b7e:	617a      	str	r2, [r7, #20]
  return result;
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	f042 0220 	orr.w	r2, r2, #32
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	f002 021f 	and.w	r2, r2, #31
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f202 	lsl.w	r2, r1, r2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e079      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f023 0203 	bic.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	491a      	ldr	r1, [pc, #104]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fafa 	bl	80021ac <HAL_GetTick>
 8004bb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbc:	f7fd faf6 	bl	80021ac <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e061      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 020c 	and.w	r2, r3, #12
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1eb      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d214      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0207 	bic.w	r2, r3, #7
 8004bfa:	4906      	ldr	r1, [pc, #24]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e040      	b.n	8004c96 <HAL_RCC_ClockConfig+0x2de>
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	491a      	ldr	r1, [pc, #104]	; (8004ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c46:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4912      	ldr	r1, [pc, #72]	; (8004ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c5a:	f000 f829 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_RCC_ClockConfig+0x2e8>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c68:	22f0      	movs	r2, #240	; 0xf0
 8004c6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	fa92 f2a2 	rbit	r2, r2
 8004c72:	60fa      	str	r2, [r7, #12]
  return result;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	fab2 f282 	clz	r2, r2
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	40d3      	lsrs	r3, r2
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x2ec>)
 8004c80:	5cd3      	ldrb	r3, [r2, r3]
 8004c82:	fa21 f303 	lsr.w	r3, r1, r3
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <HAL_RCC_ClockConfig+0x2f0>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCC_ClockConfig+0x2f4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f97c 	bl	8001f8c <HAL_InitTick>
  
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3778      	adds	r7, #120	; 0x78
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	0800b7d4 	.word	0x0800b7d4
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	20000004 	.word	0x20000004

08004cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b08b      	sub	sp, #44	; 0x2c
 8004cb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x30>
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x36>
 8004cde:	e03f      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ce2:	623b      	str	r3, [r7, #32]
      break;
 8004ce4:	e03f      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004cec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004cf0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	fa92 f2a2 	rbit	r2, r2
 8004cf8:	607a      	str	r2, [r7, #4]
  return result;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	fab2 f282 	clz	r2, r2
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	40d3      	lsrs	r3, r2
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d06:	5cd3      	ldrb	r3, [r2, r3]
 8004d08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	220f      	movs	r2, #15
 8004d14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	fa92 f2a2 	rbit	r2, r2
 8004d1c:	60fa      	str	r2, [r7, #12]
  return result;
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	40d3      	lsrs	r3, r2
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d38:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e007      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d4a:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	623b      	str	r3, [r7, #32]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d62:	623b      	str	r3, [r7, #32]
      break;
 8004d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d66:	6a3b      	ldr	r3, [r7, #32]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	372c      	adds	r7, #44	; 0x2c
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40021000 	.word	0x40021000
 8004d78:	007a1200 	.word	0x007a1200
 8004d7c:	0800b7ec 	.word	0x0800b7ec
 8004d80:	0800b7fc 	.word	0x0800b7fc

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000000 	.word	0x20000000

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004da2:	f7ff ffef 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004da6:	4601      	mov	r1, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004db0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004db4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	fa92 f2a2 	rbit	r2, r2
 8004dbc:	603a      	str	r2, [r7, #0]
  return result;
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	fab2 f282 	clz	r2, r2
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	40d3      	lsrs	r3, r2
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x40>)
 8004dca:	5cd3      	ldrb	r3, [r2, r3]
 8004dcc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	0800b7e4 	.word	0x0800b7e4

08004de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004de6:	f7ff ffcd 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004dea:	4601      	mov	r1, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004df4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004df8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	fa92 f2a2 	rbit	r2, r2
 8004e00:	603a      	str	r2, [r7, #0]
  return result;
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	fab2 f282 	clz	r2, r2
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	40d3      	lsrs	r3, r2
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e0e:	5cd3      	ldrb	r3, [r2, r3]
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	0800b7e4 	.word	0x0800b7e4

08004e24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	220f      	movs	r2, #15
 8004e32:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <HAL_RCC_GetClockConfig+0x5c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0203 	and.w	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_RCC_GetClockConfig+0x5c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <HAL_RCC_GetClockConfig+0x60>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0207 	and.w	r2, r3, #7
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40022000 	.word	0x40022000

08004e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b092      	sub	sp, #72	; 0x48
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80d7 	beq.w	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eac:	4b4e      	ldr	r3, [pc, #312]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10e      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	61d3      	str	r3, [r2, #28]
 8004ec4:	4b48      	ldr	r3, [pc, #288]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed6:	4b45      	ldr	r3, [pc, #276]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee2:	4b42      	ldr	r3, [pc, #264]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a41      	ldr	r2, [pc, #260]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fd f95d 	bl	80021ac <HAL_GetTick>
 8004ef2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fd f959 	bl	80021ac <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b64      	cmp	r3, #100	; 0x64
 8004f02:	d901      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e1d6      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f08:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f14:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8084 	beq.w	800502e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d07c      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f34:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2301      	movs	r3, #1
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	fa93 f3a3 	rbit	r3, r3
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	461a      	mov	r2, r3
 8004f82:	2300      	movs	r3, #0
 8004f84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04b      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fd f909 	bl	80021ac <HAL_GetTick>
 8004f9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fd f905 	bl	80021ac <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e180      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	61fb      	str	r3, [r7, #28]
  return result;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004fe2:	4b01      	ldr	r3, [pc, #4]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	e00d      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	10908100 	.word	0x10908100
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	4ba0      	ldr	r3, [pc, #640]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	613a      	str	r2, [r7, #16]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	60fa      	str	r2, [r7, #12]
  return result;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	f002 021f 	and.w	r2, r2, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0b7      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800502e:	4b95      	ldr	r3, [pc, #596]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4992      	ldr	r1, [pc, #584]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005040:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005048:	4b8e      	ldr	r3, [pc, #568]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4a8d      	ldr	r2, [pc, #564]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005052:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005060:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	f023 0203 	bic.w	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4985      	ldr	r1, [pc, #532]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800507e:	4b81      	ldr	r3, [pc, #516]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	497e      	ldr	r1, [pc, #504]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800509c:	4b79      	ldr	r3, [pc, #484]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	4976      	ldr	r1, [pc, #472]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ba:	4b72      	ldr	r3, [pc, #456]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	496f      	ldr	r1, [pc, #444]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80050d8:	4b6a      	ldr	r3, [pc, #424]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	4967      	ldr	r1, [pc, #412]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f6:	4b63      	ldr	r3, [pc, #396]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	f023 0220 	bic.w	r2, r3, #32
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4960      	ldr	r1, [pc, #384]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005114:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	4958      	ldr	r1, [pc, #352]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005132:	4b54      	ldr	r3, [pc, #336]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4951      	ldr	r1, [pc, #324]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005150:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4949      	ldr	r1, [pc, #292]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800516e:	4b45      	ldr	r3, [pc, #276]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4942      	ldr	r1, [pc, #264]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800518c:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	493a      	ldr	r1, [pc, #232]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80051aa:	4b36      	ldr	r3, [pc, #216]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	4933      	ldr	r1, [pc, #204]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051c8:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	492b      	ldr	r1, [pc, #172]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4924      	ldr	r1, [pc, #144]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005204:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	491c      	ldr	r1, [pc, #112]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	4915      	ldr	r1, [pc, #84]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524c:	490d      	ldr	r1, [pc, #52]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	4906      	ldr	r1, [pc, #24]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00c      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	490b      	ldr	r1, [pc, #44]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005292:	4313      	orrs	r3, r2
 8005294:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ae:	4904      	ldr	r1, [pc, #16]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3748      	adds	r7, #72	; 0x48
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000

080052c4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e083      	b.n	80053de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7f5b      	ldrb	r3, [r3, #29]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fd98 	bl	8001e1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	22ca      	movs	r2, #202	; 0xca
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2253      	movs	r2, #83	; 0x53
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 faa8 	bl	8005858 <RTC_EnterInitMode>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e05e      	b.n	80053de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800532e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005332:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6899      	ldr	r1, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6919      	ldr	r1, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	041a      	lsls	r2, r3, #16
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800537e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10e      	bne.n	80053ac <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa3a 	bl	8005808 <HAL_RTC_WaitForSynchro>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	22ff      	movs	r2, #255	; 0xff
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e018      	b.n	80053de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053e6:	b590      	push	{r4, r7, lr}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	7f1b      	ldrb	r3, [r3, #28]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_RTC_SetTime+0x1c>
 80053fe:	2302      	movs	r3, #2
 8005400:	e0aa      	b.n	8005558 <HAL_RTC_SetTime+0x172>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d126      	bne.n	8005462 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2200      	movs	r2, #0
 8005426:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa3f 	bl	80058b0 <RTC_ByteToBcd2>
 8005432:	4603      	mov	r3, r0
 8005434:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fa38 	bl	80058b0 <RTC_ByteToBcd2>
 8005440:	4603      	mov	r3, r0
 8005442:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005444:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	789b      	ldrb	r3, [r3, #2]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa30 	bl	80058b0 <RTC_ByteToBcd2>
 8005450:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005452:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e018      	b.n	8005494 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005482:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005488:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	78db      	ldrb	r3, [r3, #3]
 800548e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	22ca      	movs	r2, #202	; 0xca
 800549a:	625a      	str	r2, [r3, #36]	; 0x24
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2253      	movs	r2, #83	; 0x53
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9d7 	bl	8005858 <RTC_EnterInitMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2204      	movs	r2, #4
 80054bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e047      	b.n	8005558 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d111      	bne.n	8005542 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f972 	bl	8005808 <HAL_RTC_WaitForSynchro>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	22ff      	movs	r2, #255	; 0xff
 8005530:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2204      	movs	r2, #4
 8005536:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e00a      	b.n	8005558 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	22ff      	movs	r2, #255	; 0xff
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005556:	2300      	movs	r3, #0
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd90      	pop	{r4, r7, pc}

08005560 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005592:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005596:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	0a1b      	lsrs	r3, r3, #8
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11a      	bne.n	8005612 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f983 	bl	80058ec <RTC_Bcd2ToByte>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f97a 	bl	80058ec <RTC_Bcd2ToByte>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	789b      	ldrb	r3, [r3, #2]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f971 	bl	80058ec <RTC_Bcd2ToByte>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	7f1b      	ldrb	r3, [r3, #28]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_RTC_SetDate+0x1c>
 8005634:	2302      	movs	r3, #2
 8005636:	e094      	b.n	8005762 <HAL_RTC_SetDate+0x146>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2202      	movs	r2, #2
 8005642:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10e      	bne.n	8005668 <HAL_RTC_SetDate+0x4c>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	f023 0310 	bic.w	r3, r3, #16
 800565e:	b2db      	uxtb	r3, r3
 8005660:	330a      	adds	r3, #10
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d11c      	bne.n	80056a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f91c 	bl	80058b0 <RTC_ByteToBcd2>
 8005678:	4603      	mov	r3, r0
 800567a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f915 	bl	80058b0 <RTC_ByteToBcd2>
 8005686:	4603      	mov	r3, r0
 8005688:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800568a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	789b      	ldrb	r3, [r3, #2]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f90d 	bl	80058b0 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005698:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e00e      	b.n	80056c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	78db      	ldrb	r3, [r3, #3]
 80056ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80056ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	22ca      	movs	r2, #202	; 0xca
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2253      	movs	r2, #83	; 0x53
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8be 	bl	8005858 <RTC_EnterInitMode>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2204      	movs	r2, #4
 80056ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e033      	b.n	8005762 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005708:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005718:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f86d 	bl	8005808 <HAL_RTC_WaitForSynchro>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2204      	movs	r2, #4
 8005740:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e00a      	b.n	8005762 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd90      	pop	{r4, r7, pc}

0800576a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005788:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0b5b      	lsrs	r3, r3, #13
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11a      	bne.n	80057fe <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	78db      	ldrb	r3, [r3, #3]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f88d 	bl	80058ec <RTC_Bcd2ToByte>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f884 	bl	80058ec <RTC_Bcd2ToByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	789b      	ldrb	r3, [r3, #2]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f87b 	bl	80058ec <RTC_Bcd2ToByte>
 80057f6:	4603      	mov	r3, r0
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005822:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005824:	f7fc fcc2 	bl	80021ac <HAL_GetTick>
 8005828:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800582a:	e009      	b.n	8005840 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800582c:	f7fc fcbe 	bl	80021ac <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800583a:	d901      	bls.n	8005840 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e007      	b.n	8005850 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ee      	beq.n	800582c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d119      	bne.n	80058a6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800587c:	f7fc fc96 	bl	80021ac <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005882:	e009      	b.n	8005898 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005884:	f7fc fc92 	bl	80021ac <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005892:	d901      	bls.n	8005898 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e007      	b.n	80058a8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0ee      	beq.n	8005884 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80058be:	e005      	b.n	80058cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	3b0a      	subs	r3, #10
 80058ca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d8f6      	bhi.n	80058c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4313      	orrs	r3, r2
 80058de:	b2db      	uxtb	r3, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	4413      	add	r3, r2
 800591a:	b2db      	uxtb	r3, r3
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_RTCEx_SetTimeStamp>:
  *          This parameter can be one of the following values:
  *             @arg RTC_TIMESTAMPPIN_DEFAULT: PC13 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	7f1b      	ldrb	r3, [r3, #28]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005940:	2302      	movs	r3, #2
 8005942:	e030      	b.n	80059a6 <HAL_RTCEx_SetTimeStamp+0x7e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2202      	movs	r2, #2
 800594e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800595a:	f023 0308 	bic.w	r3, r3, #8
 800595e:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	22ca      	movs	r2, #202	; 0xca
 800596e:	625a      	str	r2, [r3, #36]	; 0x24
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2253      	movs	r2, #83	; 0x53
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b087      	sub	sp, #28
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3350      	adds	r3, #80	; 0x50
 80059c8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e01d      	b.n	8005a34 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fc fa2b 	bl	8001e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f000 fa5d 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <HAL_TIM_Base_Start+0x50>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d00b      	beq.n	8005a76 <HAL_TIM_Base_Start+0x3a>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_TIM_Base_Start_IT+0x50>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_TIM_Base_Start_IT+0x42>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac0:	d007      	beq.n	8005ad2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0202 	mvn.w	r2, #2
 8005b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9be 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9b0 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9c1 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f994 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f986 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f997 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0208 	mvn.w	r2, #8
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f96a 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f95c 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f96d 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f940 	bl	8005ea8 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f932 	bl	8005e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f943 	bl	8005ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10e      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0201 	mvn.w	r2, #1
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fc f81a 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d10e      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c80:	2b80      	cmp	r3, #128	; 0x80
 8005c82:	d107      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 faf6 	bl	8006280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d10e      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d107      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fae9 	bl	8006294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d10e      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f8f1 	bl	8005ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d10e      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d107      	bne.n	8005d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0220 	mvn.w	r2, #32
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 faa9 	bl	800626c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_ConfigClockSource+0x18>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0a8      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x16a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d64:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d067      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x124>
 8005d76:	2b40      	cmp	r3, #64	; 0x40
 8005d78:	d80b      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x70>
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d073      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x144>
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d802      	bhi.n	8005d88 <HAL_TIM_ConfigClockSource+0x66>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06f      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d86:	e078      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d06c      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x144>
 8005d8c:	2b30      	cmp	r3, #48	; 0x30
 8005d8e:	d06a      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005d90:	e073      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d92:	2b70      	cmp	r3, #112	; 0x70
 8005d94:	d00d      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x90>
 8005d96:	2b70      	cmp	r3, #112	; 0x70
 8005d98:	d804      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x82>
 8005d9a:	2b50      	cmp	r3, #80	; 0x50
 8005d9c:	d033      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0xe4>
 8005d9e:	2b60      	cmp	r3, #96	; 0x60
 8005da0:	d041      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005da2:	e06a      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da8:	d066      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x156>
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	d017      	beq.n	8005de0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005db0:	e063      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6899      	ldr	r1, [r3, #8]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f000 f9a7 	bl	8006114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	609a      	str	r2, [r3, #8]
      break;
 8005dde:	e04c      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6899      	ldr	r1, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f000 f990 	bl	8006114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e02:	609a      	str	r2, [r3, #8]
      break;
 8005e04:	e039      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 f904 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2150      	movs	r1, #80	; 0x50
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f95d 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e24:	e029      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 f923 	bl	800607e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2160      	movs	r1, #96	; 0x60
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f94d 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e44:	e019      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 f8e4 	bl	8006020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2140      	movs	r1, #64	; 0x40
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f93d 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e64:	e009      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4610      	mov	r0, r2
 8005e72:	f000 f934 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e76:	e000      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005e78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a42      	ldr	r2, [pc, #264]	; (8006000 <TIM_Base_SetConfig+0x11c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d00f      	beq.n	8005f24 <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3f      	ldr	r2, [pc, #252]	; (8006004 <TIM_Base_SetConfig+0x120>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	; (8006008 <TIM_Base_SetConfig+0x124>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3d      	ldr	r2, [pc, #244]	; (800600c <TIM_Base_SetConfig+0x128>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a3c      	ldr	r2, [pc, #240]	; (8006010 <TIM_Base_SetConfig+0x12c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d108      	bne.n	8005f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a31      	ldr	r2, [pc, #196]	; (8006000 <TIM_Base_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d01b      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2e      	ldr	r2, [pc, #184]	; (8006004 <TIM_Base_SetConfig+0x120>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d017      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2d      	ldr	r2, [pc, #180]	; (8006008 <TIM_Base_SetConfig+0x124>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2c      	ldr	r2, [pc, #176]	; (800600c <TIM_Base_SetConfig+0x128>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2c      	ldr	r2, [pc, #176]	; (8006014 <TIM_Base_SetConfig+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2b      	ldr	r2, [pc, #172]	; (8006018 <TIM_Base_SetConfig+0x134>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2a      	ldr	r2, [pc, #168]	; (800601c <TIM_Base_SetConfig+0x138>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0x9a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a25      	ldr	r2, [pc, #148]	; (8006010 <TIM_Base_SetConfig+0x12c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <TIM_Base_SetConfig+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <TIM_Base_SetConfig+0x100>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	; (800600c <TIM_Base_SetConfig+0x128>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x100>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a13      	ldr	r2, [pc, #76]	; (8006014 <TIM_Base_SetConfig+0x130>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x100>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <TIM_Base_SetConfig+0x134>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x100>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a11      	ldr	r2, [pc, #68]	; (800601c <TIM_Base_SetConfig+0x138>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x100>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <TIM_Base_SetConfig+0x12c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d103      	bne.n	8005fec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40013400 	.word	0x40013400
 8006010:	40015000 	.word	0x40015000
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e06d      	b.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a30      	ldr	r2, [pc, #192]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2d      	ldr	r2, [pc, #180]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d108      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d01d      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e8:	d018      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a16      	ldr	r2, [pc, #88]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a11      	ldr	r2, [pc, #68]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006222:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	4313      	orrs	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40015000 	.word	0x40015000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40014000 	.word	0x40014000

0800626c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e040      	b.n	800633c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb fdea 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2224      	movs	r2, #36	; 0x24
 80062d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8c0 	bl	800646c <UART_SetConfig>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e022      	b.n	800633c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 face 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb55 	bl	80069e4 <UART_CheckIdleState>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006358:	2b20      	cmp	r3, #32
 800635a:	f040 8081 	bne.w	8006460 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_UART_Transmit+0x26>
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e079      	b.n	8006462 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_UART_Transmit+0x38>
 8006378:	2302      	movs	r3, #2
 800637a:	e072      	b.n	8006462 <HAL_UART_Transmit+0x11e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2221      	movs	r2, #33	; 0x21
 800638e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006390:	f7fb ff0c 	bl	80021ac <HAL_GetTick>
 8006394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ae:	d108      	bne.n	80063c2 <HAL_UART_Transmit+0x7e>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e003      	b.n	80063ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063ca:	e02d      	b.n	8006428 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2200      	movs	r2, #0
 80063d4:	2180      	movs	r1, #128	; 0x80
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fb49 	bl	8006a6e <UART_WaitOnFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e03d      	b.n	8006462 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f8:	b292      	uxth	r2, r2
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	3302      	adds	r3, #2
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e008      	b.n	8006416 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b292      	uxth	r2, r2
 800640e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1cb      	bne.n	80063cc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2200      	movs	r2, #0
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fb15 	bl	8006a6e <UART_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e009      	b.n	8006462 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4bac      	ldr	r3, [pc, #688]	; (800674c <UART_SetConfig+0x2e0>)
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	6939      	ldr	r1, [r7, #16]
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a9a      	ldr	r2, [pc, #616]	; (8006750 <UART_SetConfig+0x2e4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d121      	bne.n	8006530 <UART_SetConfig+0xc4>
 80064ec:	4b99      	ldr	r3, [pc, #612]	; (8006754 <UART_SetConfig+0x2e8>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d817      	bhi.n	8006528 <UART_SetConfig+0xbc>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x94>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006511 	.word	0x08006511
 8006504:	0800651d 	.word	0x0800651d
 8006508:	08006523 	.word	0x08006523
 800650c:	08006517 	.word	0x08006517
 8006510:	2301      	movs	r3, #1
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e0b2      	b.n	800667c <UART_SetConfig+0x210>
 8006516:	2302      	movs	r3, #2
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e0af      	b.n	800667c <UART_SetConfig+0x210>
 800651c:	2304      	movs	r3, #4
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e0ac      	b.n	800667c <UART_SetConfig+0x210>
 8006522:	2308      	movs	r3, #8
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e0a9      	b.n	800667c <UART_SetConfig+0x210>
 8006528:	2310      	movs	r3, #16
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	bf00      	nop
 800652e:	e0a5      	b.n	800667c <UART_SetConfig+0x210>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a88      	ldr	r2, [pc, #544]	; (8006758 <UART_SetConfig+0x2ec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d123      	bne.n	8006582 <UART_SetConfig+0x116>
 800653a:	4b86      	ldr	r3, [pc, #536]	; (8006754 <UART_SetConfig+0x2e8>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006546:	d012      	beq.n	800656e <UART_SetConfig+0x102>
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d802      	bhi.n	8006554 <UART_SetConfig+0xe8>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <UART_SetConfig+0xf6>
 8006552:	e012      	b.n	800657a <UART_SetConfig+0x10e>
 8006554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006558:	d00c      	beq.n	8006574 <UART_SetConfig+0x108>
 800655a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800655e:	d003      	beq.n	8006568 <UART_SetConfig+0xfc>
 8006560:	e00b      	b.n	800657a <UART_SetConfig+0x10e>
 8006562:	2300      	movs	r3, #0
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e089      	b.n	800667c <UART_SetConfig+0x210>
 8006568:	2302      	movs	r3, #2
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e086      	b.n	800667c <UART_SetConfig+0x210>
 800656e:	2304      	movs	r3, #4
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e083      	b.n	800667c <UART_SetConfig+0x210>
 8006574:	2308      	movs	r3, #8
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e080      	b.n	800667c <UART_SetConfig+0x210>
 800657a:	2310      	movs	r3, #16
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	bf00      	nop
 8006580:	e07c      	b.n	800667c <UART_SetConfig+0x210>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a75      	ldr	r2, [pc, #468]	; (800675c <UART_SetConfig+0x2f0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d123      	bne.n	80065d4 <UART_SetConfig+0x168>
 800658c:	4b71      	ldr	r3, [pc, #452]	; (8006754 <UART_SetConfig+0x2e8>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006598:	d012      	beq.n	80065c0 <UART_SetConfig+0x154>
 800659a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659e:	d802      	bhi.n	80065a6 <UART_SetConfig+0x13a>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <UART_SetConfig+0x148>
 80065a4:	e012      	b.n	80065cc <UART_SetConfig+0x160>
 80065a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065aa:	d00c      	beq.n	80065c6 <UART_SetConfig+0x15a>
 80065ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065b0:	d003      	beq.n	80065ba <UART_SetConfig+0x14e>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x160>
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e060      	b.n	800667c <UART_SetConfig+0x210>
 80065ba:	2302      	movs	r3, #2
 80065bc:	77fb      	strb	r3, [r7, #31]
 80065be:	e05d      	b.n	800667c <UART_SetConfig+0x210>
 80065c0:	2304      	movs	r3, #4
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e05a      	b.n	800667c <UART_SetConfig+0x210>
 80065c6:	2308      	movs	r3, #8
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e057      	b.n	800667c <UART_SetConfig+0x210>
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	bf00      	nop
 80065d2:	e053      	b.n	800667c <UART_SetConfig+0x210>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a61      	ldr	r2, [pc, #388]	; (8006760 <UART_SetConfig+0x2f4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d123      	bne.n	8006626 <UART_SetConfig+0x1ba>
 80065de:	4b5d      	ldr	r3, [pc, #372]	; (8006754 <UART_SetConfig+0x2e8>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ea:	d012      	beq.n	8006612 <UART_SetConfig+0x1a6>
 80065ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f0:	d802      	bhi.n	80065f8 <UART_SetConfig+0x18c>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <UART_SetConfig+0x19a>
 80065f6:	e012      	b.n	800661e <UART_SetConfig+0x1b2>
 80065f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065fc:	d00c      	beq.n	8006618 <UART_SetConfig+0x1ac>
 80065fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x1a0>
 8006604:	e00b      	b.n	800661e <UART_SetConfig+0x1b2>
 8006606:	2300      	movs	r3, #0
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e037      	b.n	800667c <UART_SetConfig+0x210>
 800660c:	2302      	movs	r3, #2
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e034      	b.n	800667c <UART_SetConfig+0x210>
 8006612:	2304      	movs	r3, #4
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e031      	b.n	800667c <UART_SetConfig+0x210>
 8006618:	2308      	movs	r3, #8
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e02e      	b.n	800667c <UART_SetConfig+0x210>
 800661e:	2310      	movs	r3, #16
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	bf00      	nop
 8006624:	e02a      	b.n	800667c <UART_SetConfig+0x210>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4e      	ldr	r2, [pc, #312]	; (8006764 <UART_SetConfig+0x2f8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d123      	bne.n	8006678 <UART_SetConfig+0x20c>
 8006630:	4b48      	ldr	r3, [pc, #288]	; (8006754 <UART_SetConfig+0x2e8>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800663c:	d012      	beq.n	8006664 <UART_SetConfig+0x1f8>
 800663e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006642:	d802      	bhi.n	800664a <UART_SetConfig+0x1de>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <UART_SetConfig+0x1ec>
 8006648:	e012      	b.n	8006670 <UART_SetConfig+0x204>
 800664a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800664e:	d00c      	beq.n	800666a <UART_SetConfig+0x1fe>
 8006650:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006654:	d003      	beq.n	800665e <UART_SetConfig+0x1f2>
 8006656:	e00b      	b.n	8006670 <UART_SetConfig+0x204>
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e00e      	b.n	800667c <UART_SetConfig+0x210>
 800665e:	2302      	movs	r3, #2
 8006660:	77fb      	strb	r3, [r7, #31]
 8006662:	e00b      	b.n	800667c <UART_SetConfig+0x210>
 8006664:	2304      	movs	r3, #4
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e008      	b.n	800667c <UART_SetConfig+0x210>
 800666a:	2308      	movs	r3, #8
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e005      	b.n	800667c <UART_SetConfig+0x210>
 8006670:	2310      	movs	r3, #16
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	bf00      	nop
 8006676:	e001      	b.n	800667c <UART_SetConfig+0x210>
 8006678:	2310      	movs	r3, #16
 800667a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006684:	f040 8090 	bne.w	80067a8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8006688:	7ffb      	ldrb	r3, [r7, #31]
 800668a:	2b08      	cmp	r3, #8
 800668c:	d86c      	bhi.n	8006768 <UART_SetConfig+0x2fc>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x228>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066f9 	.word	0x080066f9
 80066a0:	08006769 	.word	0x08006769
 80066a4:	08006715 	.word	0x08006715
 80066a8:	08006769 	.word	0x08006769
 80066ac:	08006769 	.word	0x08006769
 80066b0:	08006769 	.word	0x08006769
 80066b4:	08006735 	.word	0x08006735
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fb70 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80066bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	005a      	lsls	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	61bb      	str	r3, [r7, #24]
        break;
 80066d6:	e04a      	b.n	800676e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d8:	f7fe fb82 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 80066dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	005a      	lsls	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	441a      	add	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	61bb      	str	r3, [r7, #24]
        break;
 80066f6:	e03a      	b.n	800676e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006702:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6852      	ldr	r2, [r2, #4]
 800670a:	fbb3 f3f2 	udiv	r3, r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	61bb      	str	r3, [r7, #24]
        break;
 8006712:	e02c      	b.n	800676e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006714:	f7fe facc 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8006718:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	005a      	lsls	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	61bb      	str	r3, [r7, #24]
        break;
 8006732:	e01c      	b.n	800676e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	61bb      	str	r3, [r7, #24]
        break;
 800674a:	e010      	b.n	800676e <UART_SetConfig+0x302>
 800674c:	efff69f3 	.word	0xefff69f3
 8006750:	40013800 	.word	0x40013800
 8006754:	40021000 	.word	0x40021000
 8006758:	40004400 	.word	0x40004400
 800675c:	40004800 	.word	0x40004800
 8006760:	40004c00 	.word	0x40004c00
 8006764:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
        break;
 800676c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b0f      	cmp	r3, #15
 8006772:	d916      	bls.n	80067a2 <UART_SetConfig+0x336>
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677a:	d212      	bcs.n	80067a2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f023 030f 	bic.w	r3, r3, #15
 8006784:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	b29a      	uxth	r2, r3
 8006792:	897b      	ldrh	r3, [r7, #10]
 8006794:	4313      	orrs	r3, r2
 8006796:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	897a      	ldrh	r2, [r7, #10]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	e072      	b.n	8006888 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
 80067a6:	e06f      	b.n	8006888 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d85b      	bhi.n	8006866 <UART_SetConfig+0x3fa>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <UART_SetConfig+0x348>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067f7 	.word	0x080067f7
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006867 	.word	0x08006867
 80067c4:	08006831 	.word	0x08006831
 80067c8:	08006867 	.word	0x08006867
 80067cc:	08006867 	.word	0x08006867
 80067d0:	08006867 	.word	0x08006867
 80067d4:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d8:	f7fe fae0 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80067dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085a      	lsrs	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	441a      	add	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	61bb      	str	r3, [r7, #24]
        break;
 80067f4:	e03a      	b.n	800686c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f6:	f7fe faf3 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 80067fa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	085a      	lsrs	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	b29b      	uxth	r3, r3
 8006810:	61bb      	str	r3, [r7, #24]
        break;
 8006812:	e02b      	b.n	800686c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800681e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6852      	ldr	r2, [r2, #4]
 8006826:	fbb3 f3f2 	udiv	r3, r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	61bb      	str	r3, [r7, #24]
        break;
 800682e:	e01d      	b.n	800686c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006830:	f7fe fa3e 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8006834:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	085a      	lsrs	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	441a      	add	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	b29b      	uxth	r3, r3
 800684a:	61bb      	str	r3, [r7, #24]
        break;
 800684c:	e00e      	b.n	800686c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	b29b      	uxth	r3, r3
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e002      	b.n	800686c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]
        break;
 800686a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d908      	bls.n	8006884 <UART_SetConfig+0x418>
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006878:	d204      	bcs.n	8006884 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e001      	b.n	8006888 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069f2:	f7fb fbdb 	bl	80021ac <HAL_GetTick>
 80069f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d10e      	bne.n	8006a24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f82a 	bl	8006a6e <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e020      	b.n	8006a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d10e      	bne.n	8006a50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f814 	bl	8006a6e <UART_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e00a      	b.n	8006a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	e05d      	b.n	8006b3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d059      	beq.n	8006b3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a88:	f7fb fb90 	bl	80021ac <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d302      	bcc.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d11b      	bne.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e042      	b.n	8006b5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d02b      	beq.n	8006b3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af2:	d123      	bne.n	8006b3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006afc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2220      	movs	r2, #32
 8006b28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e00f      	b.n	8006b5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4013      	ands	r3, r2
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	bf0c      	ite	eq
 8006b4c:	2301      	moveq	r3, #1
 8006b4e:	2300      	movne	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d092      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6a:	f3ef 8305 	mrs	r3, IPSR
 8006b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10f      	bne.n	8006b96 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b76:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <osKernelInitialize+0x32>
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <osKernelInitialize+0x64>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d109      	bne.n	8006b9e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006b96:	f06f 0305 	mvn.w	r3, #5
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e00c      	b.n	8006bb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <osKernelInitialize+0x64>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d105      	bne.n	8006bb2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <osKernelInitialize+0x64>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e002      	b.n	8006bb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000248 	.word	0x20000248

08006bcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd2:	f3ef 8305 	mrs	r3, IPSR
 8006bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bde:	f3ef 8310 	mrs	r3, PRIMASK
 8006be2:	607b      	str	r3, [r7, #4]
  return(result);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <osKernelStart+0x32>
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <osKernelStart+0x64>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d109      	bne.n	8006c06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006bfe:	f06f 0305 	mvn.w	r3, #5
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e00e      	b.n	8006c24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <osKernelStart+0x64>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006c0e:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <osKernelStart+0x64>)
 8006c10:	2202      	movs	r2, #2
 8006c12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006c14:	f001 f808 	bl	8007c28 <vTaskStartScheduler>
      stat = osOK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e002      	b.n	8006c24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000248 	.word	0x20000248

08006c34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b092      	sub	sp, #72	; 0x48
 8006c38:	af04      	add	r7, sp, #16
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c44:	f3ef 8305 	mrs	r3, IPSR
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8094 	bne.w	8006d7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c52:	f3ef 8310 	mrs	r3, PRIMASK
 8006c56:	623b      	str	r3, [r7, #32]
  return(result);
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 808d 	bne.w	8006d7a <osThreadNew+0x146>
 8006c60:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <osThreadNew+0x150>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d106      	bne.n	8006c76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c68:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 8082 	bne.w	8006d7a <osThreadNew+0x146>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d07e      	beq.n	8006d7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006c80:	2318      	movs	r3, #24
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006c84:	2300      	movs	r3, #0
 8006c86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006c88:	f107 031b 	add.w	r3, r7, #27
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d045      	beq.n	8006d26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <osThreadNew+0x74>
        name = attr->name;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <osThreadNew+0x9a>
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	2b38      	cmp	r3, #56	; 0x38
 8006cc0:	d805      	bhi.n	8006cce <osThreadNew+0x9a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <osThreadNew+0x9e>
        return (NULL);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e054      	b.n	8006d7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <osThreadNew+0xd4>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b5b      	cmp	r3, #91	; 0x5b
 8006cf0:	d90a      	bls.n	8006d08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <osThreadNew+0xd4>
        mem = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d06:	e010      	b.n	8006d2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10c      	bne.n	8006d2a <osThreadNew+0xf6>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <osThreadNew+0xf6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <osThreadNew+0xf6>
          mem = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d24:	e001      	b.n	8006d2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d110      	bne.n	8006d52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d38:	9202      	str	r2, [sp, #8]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fdda 	bl	8007900 <xTaskCreateStatic>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e013      	b.n	8006d7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d110      	bne.n	8006d7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fe21 	bl	80079b2 <xTaskCreate>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d001      	beq.n	8006d7a <osThreadNew+0x146>
          hTask = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d7a:	697b      	ldr	r3, [r7, #20]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3738      	adds	r7, #56	; 0x38
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000248 	.word	0x20000248

08006d88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <vApplicationGetIdleTaskMemory+0x30>)
 8006d9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	601a      	str	r2, [r3, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000024c 	.word	0x2000024c
 8006db8:	200002a8 	.word	0x200002a8

08006dbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a07      	ldr	r2, [pc, #28]	; (8006de8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006dcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4a06      	ldr	r2, [pc, #24]	; (8006dec <vApplicationGetTimerTaskMemory+0x30>)
 8006dd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dda:	601a      	str	r2, [r3, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200004a8 	.word	0x200004a8
 8006dec:	20000504 	.word	0x20000504

08006df0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f103 0208 	add.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f103 0208 	add.w	r2, r3, #8
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0208 	add.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d103      	bne.n	8006eb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e00c      	b.n	8006ecc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e002      	b.n	8006ec0 <vListInsert+0x2e>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d2f6      	bcs.n	8006eba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6852      	ldr	r2, [r2, #4]
 8006f24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d103      	bne.n	8006f38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	e7fe      	b.n	8006f7e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006f80:	f001 ffa4 	bl	8008ecc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	441a      	add	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	22ff      	movs	r2, #255	; 0xff
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d114      	bne.n	8007000 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01a      	beq.n	8007014 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3310      	adds	r3, #16
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f8a6 	bl	8008134 <xTaskRemoveFromEventList>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d012      	beq.n	8007014 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <xQueueGenericReset+0xcc>)
 8006ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	e009      	b.n	8007014 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3310      	adds	r3, #16
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fef3 	bl	8006df0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3324      	adds	r3, #36	; 0x24
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff feee 	bl	8006df0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007014:	f001 ff88 	bl	8008f28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007018:	2301      	movs	r3, #1
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08e      	sub	sp, #56	; 0x38
 800702c:	af02      	add	r7, sp, #8
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <xQueueGenericCreateStatic+0x28>
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	e7fe      	b.n	800704e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <xQueueGenericCreateStatic+0x42>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
 8007068:	e7fe      	b.n	8007068 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <xQueueGenericCreateStatic+0x4e>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <xQueueGenericCreateStatic+0x52>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueGenericCreateStatic+0x54>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <xQueueGenericCreateStatic+0x6c>
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	e7fe      	b.n	8007092 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <xQueueGenericCreateStatic+0x78>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueGenericCreateStatic+0x7c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueGenericCreateStatic+0x7e>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <xQueueGenericCreateStatic+0x96>
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070be:	2350      	movs	r3, #80	; 0x50
 80070c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b50      	cmp	r3, #80	; 0x50
 80070c6:	d009      	beq.n	80070dc <xQueueGenericCreateStatic+0xb4>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e7fe      	b.n	80070da <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f805 	bl	800710c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007104:	4618      	mov	r0, r3
 8007106:	3730      	adds	r7, #48	; 0x30
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e002      	b.n	800712e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800713a:	2101      	movs	r1, #1
 800713c:	69b8      	ldr	r0, [r7, #24]
 800713e:	f7ff ff0b 	bl	8006f58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800714a:	bf00      	nop
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <xQueueGenericSend+0x30>
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28
 8007182:	e7fe      	b.n	8007182 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <xQueueGenericSend+0x3e>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <xQueueGenericSend+0x42>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <xQueueGenericSend+0x44>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <xQueueGenericSend+0x5c>
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
 80071ae:	e7fe      	b.n	80071ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0x6a>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <xQueueGenericSend+0x6e>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueGenericSend+0x70>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <xQueueGenericSend+0x88>
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	e7fe      	b.n	80071da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071dc:	f001 f966 	bl	80084ac <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xQueueGenericSend+0x98>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <xQueueGenericSend+0x9c>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <xQueueGenericSend+0x9e>
 80071f0:	2300      	movs	r3, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <xQueueGenericSend+0xb6>
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720a:	f001 fe5f 	bl	8008ecc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	429a      	cmp	r2, r3
 8007218:	d302      	bcc.n	8007220 <xQueueGenericSend+0xcc>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d129      	bne.n	8007274 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007226:	f000 f9ff 	bl	8007628 <prvCopyDataToQueue>
 800722a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ff7b 	bl	8008134 <xTaskRemoveFromEventList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <xQueueGenericSend+0x1f0>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	e00a      	b.n	800726c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800725c:	4b39      	ldr	r3, [pc, #228]	; (8007344 <xQueueGenericSend+0x1f0>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800726c:	f001 fe5c 	bl	8008f28 <vPortExitCritical>
				return pdPASS;
 8007270:	2301      	movs	r3, #1
 8007272:	e063      	b.n	800733c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800727a:	f001 fe55 	bl	8008f28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
 8007280:	e05c      	b.n	800733c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007288:	f107 0314 	add.w	r3, r7, #20
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ffb3 	bl	80081f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007292:	2301      	movs	r3, #1
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007296:	f001 fe47 	bl	8008f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800729a:	f000 fd29 	bl	8007cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800729e:	f001 fe15 	bl	8008ecc <vPortEnterCritical>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a8:	b25b      	sxtb	r3, r3
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d103      	bne.n	80072b8 <xQueueGenericSend+0x164>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d103      	bne.n	80072ce <xQueueGenericSend+0x17a>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ce:	f001 fe2b 	bl	8008f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d2:	1d3a      	adds	r2, r7, #4
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 ffa2 	bl	8008224 <xTaskCheckForTimeOut>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d124      	bne.n	8007330 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e8:	f000 fa96 	bl	8007818 <prvIsQueueFull>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	3310      	adds	r3, #16
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fecc 	bl	8008098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007302:	f000 fa21 	bl	8007748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007306:	f000 fd01 	bl	8007d0c <xTaskResumeAll>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f af7c 	bne.w	800720a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xQueueGenericSend+0x1f0>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	e772      	b.n	800720a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007326:	f000 fa0f 	bl	8007748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732a:	f000 fcef 	bl	8007d0c <xTaskResumeAll>
 800732e:	e76c      	b.n	800720a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fa09 	bl	8007748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007336:	f000 fce9 	bl	8007d0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800733a:	2300      	movs	r3, #0
		}
	}
}
 800733c:	4618      	mov	r0, r3
 800733e:	3738      	adds	r7, #56	; 0x38
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08e      	sub	sp, #56	; 0x38
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <xQueueGenericSendFromISR+0x2c>
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
 8007372:	e7fe      	b.n	8007372 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d103      	bne.n	8007382 <xQueueGenericSendFromISR+0x3a>
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <xQueueGenericSendFromISR+0x3e>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <xQueueGenericSendFromISR+0x40>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <xQueueGenericSendFromISR+0x58>
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	623b      	str	r3, [r7, #32]
 800739e:	e7fe      	b.n	800739e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d103      	bne.n	80073ae <xQueueGenericSendFromISR+0x66>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <xQueueGenericSendFromISR+0x6a>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <xQueueGenericSendFromISR+0x6c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <xQueueGenericSendFromISR+0x84>
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	e7fe      	b.n	80073ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073cc:	f001 fe5a 	bl	8009084 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073d0:	f3ef 8211 	mrs	r2, BASEPRI
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	61ba      	str	r2, [r7, #24]
 80073e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <xQueueGenericSendFromISR+0xb6>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d12c      	bne.n	8007458 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740e:	f000 f90b 	bl	8007628 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007412:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d112      	bne.n	8007442 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b00      	cmp	r3, #0
 8007422:	d016      	beq.n	8007452 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	3324      	adds	r3, #36	; 0x24
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fe83 	bl	8008134 <xTaskRemoveFromEventList>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e007      	b.n	8007452 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007446:	3301      	adds	r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	b25a      	sxtb	r2, r3
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007452:	2301      	movs	r3, #1
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007456:	e001      	b.n	800745c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007468:	4618      	mov	r0, r3
 800746a:	3738      	adds	r7, #56	; 0x38
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	; 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800747c:	2300      	movs	r3, #0
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <xQueueReceive+0x2e>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	e7fe      	b.n	800749c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <xQueueReceive+0x3c>
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <xQueueReceive+0x40>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <xQueueReceive+0x42>
 80074b0:	2300      	movs	r3, #0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <xQueueReceive+0x5a>
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	e7fe      	b.n	80074c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ca:	f000 ffef 	bl	80084ac <xTaskGetSchedulerState>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <xQueueReceive+0x6a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <xQueueReceive+0x6e>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <xQueueReceive+0x70>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <xQueueReceive+0x88>
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e7fe      	b.n	80074f6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f8:	f001 fce8 	bl	8008ecc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01f      	beq.n	8007548 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750c:	f000 f8f6 	bl	80076fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00f      	beq.n	8007540 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	3310      	adds	r3, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fe05 	bl	8008134 <xTaskRemoveFromEventList>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007530:	4b3c      	ldr	r3, [pc, #240]	; (8007624 <xQueueReceive+0x1b4>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007540:	f001 fcf2 	bl	8008f28 <vPortExitCritical>
				return pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	e069      	b.n	800761c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800754e:	f001 fceb 	bl	8008f28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007552:	2300      	movs	r3, #0
 8007554:	e062      	b.n	800761c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800755c:	f107 0310 	add.w	r3, r7, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fe49 	bl	80081f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007566:	2301      	movs	r3, #1
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800756a:	f001 fcdd 	bl	8008f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800756e:	f000 fbbf 	bl	8007cf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007572:	f001 fcab 	bl	8008ecc <vPortEnterCritical>
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800757c:	b25b      	sxtb	r3, r3
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d103      	bne.n	800758c <xQueueReceive+0x11c>
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007592:	b25b      	sxtb	r3, r3
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d103      	bne.n	80075a2 <xQueueReceive+0x132>
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a2:	f001 fcc1 	bl	8008f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a6:	1d3a      	adds	r2, r7, #4
 80075a8:	f107 0310 	add.w	r3, r7, #16
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fe38 	bl	8008224 <xTaskCheckForTimeOut>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d123      	bne.n	8007602 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075bc:	f000 f916 	bl	80077ec <prvIsQueueEmpty>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d017      	beq.n	80075f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	3324      	adds	r3, #36	; 0x24
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fd62 	bl	8008098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d6:	f000 f8b7 	bl	8007748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075da:	f000 fb97 	bl	8007d0c <xTaskResumeAll>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d189      	bne.n	80074f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80075e4:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <xQueueReceive+0x1b4>)
 80075e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	e780      	b.n	80074f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f8:	f000 f8a6 	bl	8007748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075fc:	f000 fb86 	bl	8007d0c <xTaskResumeAll>
 8007600:	e77a      	b.n	80074f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007604:	f000 f8a0 	bl	8007748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007608:	f000 fb80 	bl	8007d0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800760c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760e:	f000 f8ed 	bl	80077ec <prvIsQueueEmpty>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	f43f af6f 	beq.w	80074f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800761a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800761c:	4618      	mov	r0, r3
 800761e:	3730      	adds	r7, #48	; 0x30
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10d      	bne.n	8007662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d14d      	bne.n	80076ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 ff48 	bl	80084e8 <xTaskPriorityDisinherit>
 8007658:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
 8007660:	e043      	b.n	80076ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d119      	bne.n	800769c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6898      	ldr	r0, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	461a      	mov	r2, r3
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	f001 ff50 	bl	8009518 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	429a      	cmp	r2, r3
 8007690:	d32b      	bcc.n	80076ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	609a      	str	r2, [r3, #8]
 800769a:	e026      	b.n	80076ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	68d8      	ldr	r0, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	461a      	mov	r2, r3
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	f001 ff36 	bl	8009518 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	425b      	negs	r3, r3
 80076b6:	441a      	add	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d207      	bcs.n	80076d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	425b      	negs	r3, r3
 80076d2:	441a      	add	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d105      	bne.n	80076ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076f2:	697b      	ldr	r3, [r7, #20]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d303      	bcc.n	8007730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68d9      	ldr	r1, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	461a      	mov	r2, r3
 800773a:	6838      	ldr	r0, [r7, #0]
 800773c:	f001 feec 	bl	8009518 <memcpy>
	}
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007750:	f001 fbbc 	bl	8008ecc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800775a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800775c:	e011      	b.n	8007782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d012      	beq.n	800778c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3324      	adds	r3, #36	; 0x24
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fce2 	bl	8008134 <xTaskRemoveFromEventList>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007776:	f000 fdb5 	bl	80082e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	3b01      	subs	r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007786:	2b00      	cmp	r3, #0
 8007788:	dce9      	bgt.n	800775e <prvUnlockQueue+0x16>
 800778a:	e000      	b.n	800778e <prvUnlockQueue+0x46>
					break;
 800778c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	22ff      	movs	r2, #255	; 0xff
 8007792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007796:	f001 fbc7 	bl	8008f28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800779a:	f001 fb97 	bl	8008ecc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077a6:	e011      	b.n	80077cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d012      	beq.n	80077d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3310      	adds	r3, #16
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fcbd 	bl	8008134 <xTaskRemoveFromEventList>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077c0:	f000 fd90 	bl	80082e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dce9      	bgt.n	80077a8 <prvUnlockQueue+0x60>
 80077d4:	e000      	b.n	80077d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	22ff      	movs	r2, #255	; 0xff
 80077dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077e0:	f001 fba2 	bl	8008f28 <vPortExitCritical>
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077f4:	f001 fb6a 	bl	8008ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007800:	2301      	movs	r3, #1
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e001      	b.n	800780a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800780a:	f001 fb8d 	bl	8008f28 <vPortExitCritical>

	return xReturn;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007820:	f001 fb54 	bl	8008ecc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782c:	429a      	cmp	r2, r3
 800782e:	d102      	bne.n	8007836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007830:	2301      	movs	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e001      	b.n	800783a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800783a:	f001 fb75 	bl	8008f28 <vPortExitCritical>

	return xReturn;
 800783e:	68fb      	ldr	r3, [r7, #12]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e014      	b.n	8007882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007858:	4a0e      	ldr	r2, [pc, #56]	; (8007894 <vQueueAddToRegistry+0x4c>)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10b      	bne.n	800787c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007864:	490b      	ldr	r1, [pc, #44]	; (8007894 <vQueueAddToRegistry+0x4c>)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800786e:	4a09      	ldr	r2, [pc, #36]	; (8007894 <vQueueAddToRegistry+0x4c>)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4413      	add	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800787a:	e005      	b.n	8007888 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b07      	cmp	r3, #7
 8007886:	d9e7      	bls.n	8007858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	20001dc8 	.word	0x20001dc8

08007898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078a8:	f001 fb10 	bl	8008ecc <vPortEnterCritical>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b2:	b25b      	sxtb	r3, r3
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d103      	bne.n	80078c2 <vQueueWaitForMessageRestricted+0x2a>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d103      	bne.n	80078d8 <vQueueWaitForMessageRestricted+0x40>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d8:	f001 fb26 	bl	8008f28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	3324      	adds	r3, #36	; 0x24
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fbf7 	bl	80080e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078f2:	6978      	ldr	r0, [r7, #20]
 80078f4:	f7ff ff28 	bl	8007748 <prvUnlockQueue>
	}
 80078f8:	bf00      	nop
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af04      	add	r7, sp, #16
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800790e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <xTaskCreateStatic+0x28>
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e7fe      	b.n	8007926 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <xTaskCreateStatic+0x42>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e7fe      	b.n	8007940 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007942:	235c      	movs	r3, #92	; 0x5c
 8007944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b5c      	cmp	r3, #92	; 0x5c
 800794a:	d009      	beq.n	8007960 <xTaskCreateStatic+0x60>
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e7fe      	b.n	800795e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01e      	beq.n	80079a4 <xTaskCreateStatic+0xa4>
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01b      	beq.n	80079a4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007974:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	2202      	movs	r2, #2
 800797a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800797e:	2300      	movs	r3, #0
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	9302      	str	r3, [sp, #8]
 8007986:	f107 0314 	add.w	r3, r7, #20
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f850 	bl	8007a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800799c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800799e:	f000 f8d3 	bl	8007b48 <prvAddNewTaskToReadyList>
 80079a2:	e001      	b.n	80079a8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079a8:	697b      	ldr	r3, [r7, #20]
	}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3728      	adds	r7, #40	; 0x28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08c      	sub	sp, #48	; 0x30
 80079b6:	af04      	add	r7, sp, #16
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	603b      	str	r3, [r7, #0]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 fb9a 	bl	8009100 <pvPortMalloc>
 80079cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00e      	beq.n	80079f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079d4:	205c      	movs	r0, #92	; 0x5c
 80079d6:	f001 fb93 	bl	8009100 <pvPortMalloc>
 80079da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
 80079e8:	e005      	b.n	80079f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ea:	6978      	ldr	r0, [r7, #20]
 80079ec:	f001 fc4a 	bl	8009284 <vPortFree>
 80079f0:	e001      	b.n	80079f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d017      	beq.n	8007a2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	2300      	movs	r3, #0
 8007a08:	9303      	str	r3, [sp, #12]
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	9302      	str	r3, [sp, #8]
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f80e 	bl	8007a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a20:	69f8      	ldr	r0, [r7, #28]
 8007a22:	f000 f891 	bl	8007b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a26:	2301      	movs	r3, #1
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	e002      	b.n	8007a32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a32:	69bb      	ldr	r3, [r7, #24]
	}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	461a      	mov	r2, r3
 8007a54:	21a5      	movs	r1, #165	; 0xa5
 8007a56:	f001 fd6a 	bl	800952e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a64:	3b01      	subs	r3, #1
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f023 0307 	bic.w	r3, r3, #7
 8007a72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <prvInitialiseNewTask+0x56>
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e7fe      	b.n	8007a90 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a92:	2300      	movs	r3, #0
 8007a94:	61fb      	str	r3, [r7, #28]
 8007a96:	e012      	b.n	8007abe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	7819      	ldrb	r1, [r3, #0]
 8007aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3334      	adds	r3, #52	; 0x34
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	3301      	adds	r3, #1
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2b0f      	cmp	r3, #15
 8007ac2:	d9e9      	bls.n	8007a98 <prvInitialiseNewTask+0x5c>
 8007ac4:	e000      	b.n	8007ac8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007ac6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	2b37      	cmp	r3, #55	; 0x37
 8007ad4:	d901      	bls.n	8007ada <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ad6:	2337      	movs	r3, #55	; 0x37
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ade:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	2200      	movs	r2, #0
 8007aea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff f99d 	bl	8006e30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	3318      	adds	r3, #24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f998 	bl	8006e30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	2200      	movs	r2, #0
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	69b8      	ldr	r0, [r7, #24]
 8007b2a:	f001 f8a7 	bl	8008c7c <pxPortInitialiseStack>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b40:	bf00      	nop
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b50:	f001 f9bc 	bl	8008ecc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b54:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b66:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d110      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b74:	f000 fbda 	bl	800832c <prvInitialiseTaskLists>
 8007b78:	e00d      	b.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7a:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d802      	bhi.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <prvAddNewTaskToReadyList+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <prvAddNewTaskToReadyList+0xd8>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7ff f939 	bl	8006e4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bd8:	f001 f9a6 	bl	8008f28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d207      	bcs.n	8007c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <prvAddNewTaskToReadyList+0xdc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000dd8 	.word	0x20000dd8
 8007c10:	20000904 	.word	0x20000904
 8007c14:	20000de4 	.word	0x20000de4
 8007c18:	20000df4 	.word	0x20000df4
 8007c1c:	20000de0 	.word	0x20000de0
 8007c20:	20000908 	.word	0x20000908
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c36:	463a      	mov	r2, r7
 8007c38:	1d39      	adds	r1, r7, #4
 8007c3a:	f107 0308 	add.w	r3, r7, #8
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff f8a2 	bl	8006d88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	9202      	str	r2, [sp, #8]
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	2300      	movs	r3, #0
 8007c54:	460a      	mov	r2, r1
 8007c56:	4920      	ldr	r1, [pc, #128]	; (8007cd8 <vTaskStartScheduler+0xb0>)
 8007c58:	4820      	ldr	r0, [pc, #128]	; (8007cdc <vTaskStartScheduler+0xb4>)
 8007c5a:	f7ff fe51 	bl	8007900 <xTaskCreateStatic>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <vTaskStartScheduler+0xb8>)
 8007c62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c64:	4b1e      	ldr	r3, [pc, #120]	; (8007ce0 <vTaskStartScheduler+0xb8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e001      	b.n	8007c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d102      	bne.n	8007c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c7c:	f000 fcf4 	bl	8008668 <xTimerCreateTimerTask>
 8007c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d115      	bne.n	8007cb4 <vTaskStartScheduler+0x8c>
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c9a:	4b12      	ldr	r3, [pc, #72]	; (8007ce4 <vTaskStartScheduler+0xbc>)
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ca2:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <vTaskStartScheduler+0xc0>)
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ca8:	4b10      	ldr	r3, [pc, #64]	; (8007cec <vTaskStartScheduler+0xc4>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cae:	f001 f86f 	bl	8008d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cb2:	e00d      	b.n	8007cd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d109      	bne.n	8007cd0 <vTaskStartScheduler+0xa8>
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e7fe      	b.n	8007cce <vTaskStartScheduler+0xa6>
}
 8007cd0:	bf00      	nop
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	0800b774 	.word	0x0800b774
 8007cdc:	080082fd 	.word	0x080082fd
 8007ce0:	20000dfc 	.word	0x20000dfc
 8007ce4:	20000df8 	.word	0x20000df8
 8007ce8:	20000de4 	.word	0x20000de4
 8007cec:	20000ddc 	.word	0x20000ddc

08007cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <vTaskSuspendAll+0x18>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	4a03      	ldr	r2, [pc, #12]	; (8007d08 <vTaskSuspendAll+0x18>)
 8007cfc:	6013      	str	r3, [r2, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	20000e00 	.word	0x20000e00

08007d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d1a:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <xTaskResumeAll+0x114>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <xTaskResumeAll+0x2a>
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	e7fe      	b.n	8007d34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d36:	f001 f8c9 	bl	8008ecc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d3a:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <xTaskResumeAll+0x114>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4a37      	ldr	r2, [pc, #220]	; (8007e20 <xTaskResumeAll+0x114>)
 8007d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d44:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <xTaskResumeAll+0x114>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d162      	bne.n	8007e12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d4c:	4b35      	ldr	r3, [pc, #212]	; (8007e24 <xTaskResumeAll+0x118>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05e      	beq.n	8007e12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d54:	e02f      	b.n	8007db6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d56:	4b34      	ldr	r3, [pc, #208]	; (8007e28 <xTaskResumeAll+0x11c>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff f8ce 	bl	8006f04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff f8c9 	bl	8006f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	4b2d      	ldr	r3, [pc, #180]	; (8007e2c <xTaskResumeAll+0x120>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d903      	bls.n	8007d86 <xTaskResumeAll+0x7a>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	4a2a      	ldr	r2, [pc, #168]	; (8007e2c <xTaskResumeAll+0x120>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4a27      	ldr	r2, [pc, #156]	; (8007e30 <xTaskResumeAll+0x124>)
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7ff f854 	bl	8006e4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <xTaskResumeAll+0x128>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d302      	bcc.n	8007db6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <xTaskResumeAll+0x12c>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007db6:	4b1c      	ldr	r3, [pc, #112]	; (8007e28 <xTaskResumeAll+0x11c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1cb      	bne.n	8007d56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dc4:	f000 fb4c 	bl	8008460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007dc8:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <xTaskResumeAll+0x130>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d010      	beq.n	8007df6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dd4:	f000 f846 	bl	8007e64 <xTaskIncrementTick>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007dde:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <xTaskResumeAll+0x12c>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f1      	bne.n	8007dd4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <xTaskResumeAll+0x130>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007df6:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <xTaskResumeAll+0x12c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <xTaskResumeAll+0x134>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e12:	f001 f889 	bl	8008f28 <vPortExitCritical>

	return xAlreadyYielded;
 8007e16:	68bb      	ldr	r3, [r7, #8]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000e00 	.word	0x20000e00
 8007e24:	20000dd8 	.word	0x20000dd8
 8007e28:	20000d98 	.word	0x20000d98
 8007e2c:	20000de0 	.word	0x20000de0
 8007e30:	20000908 	.word	0x20000908
 8007e34:	20000904 	.word	0x20000904
 8007e38:	20000dec 	.word	0x20000dec
 8007e3c:	20000de8 	.word	0x20000de8
 8007e40:	e000ed04 	.word	0xe000ed04

08007e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <xTaskGetTickCount+0x1c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	20000ddc 	.word	0x20000ddc

08007e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e6e:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <xTaskIncrementTick+0x150>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 808d 	bne.w	8007f92 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e78:	4b4f      	ldr	r3, [pc, #316]	; (8007fb8 <xTaskIncrementTick+0x154>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e80:	4a4d      	ldr	r2, [pc, #308]	; (8007fb8 <xTaskIncrementTick+0x154>)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11f      	bne.n	8007ecc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <xTaskIncrementTick+0x158>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <xTaskIncrementTick+0x46>
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	e7fe      	b.n	8007ea8 <xTaskIncrementTick+0x44>
 8007eaa:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <xTaskIncrementTick+0x158>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	4b43      	ldr	r3, [pc, #268]	; (8007fc0 <xTaskIncrementTick+0x15c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a41      	ldr	r2, [pc, #260]	; (8007fbc <xTaskIncrementTick+0x158>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	4a41      	ldr	r2, [pc, #260]	; (8007fc0 <xTaskIncrementTick+0x15c>)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <xTaskIncrementTick+0x160>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	4a3f      	ldr	r2, [pc, #252]	; (8007fc4 <xTaskIncrementTick+0x160>)
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	f000 faca 	bl	8008460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ecc:	4b3e      	ldr	r3, [pc, #248]	; (8007fc8 <xTaskIncrementTick+0x164>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d34e      	bcc.n	8007f74 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ed6:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <xTaskIncrementTick+0x158>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <xTaskIncrementTick+0x80>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <xTaskIncrementTick+0x82>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eea:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <xTaskIncrementTick+0x164>)
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	601a      	str	r2, [r3, #0]
					break;
 8007ef2:	e03f      	b.n	8007f74 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ef4:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <xTaskIncrementTick+0x158>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d203      	bcs.n	8007f14 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f0c:	4a2e      	ldr	r2, [pc, #184]	; (8007fc8 <xTaskIncrementTick+0x164>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6013      	str	r3, [r2, #0]
						break;
 8007f12:	e02f      	b.n	8007f74 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fff3 	bl	8006f04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3318      	adds	r3, #24
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe ffea 	bl	8006f04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <xTaskIncrementTick+0x168>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d903      	bls.n	8007f44 <xTaskIncrementTick+0xe0>
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	4a22      	ldr	r2, [pc, #136]	; (8007fcc <xTaskIncrementTick+0x168>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <xTaskIncrementTick+0x16c>)
 8007f52:	441a      	add	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe ff75 	bl	8006e4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <xTaskIncrementTick+0x170>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d3b3      	bcc.n	8007ed6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f72:	e7b0      	b.n	8007ed6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f74:	4b17      	ldr	r3, [pc, #92]	; (8007fd4 <xTaskIncrementTick+0x170>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	4915      	ldr	r1, [pc, #84]	; (8007fd0 <xTaskIncrementTick+0x16c>)
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d907      	bls.n	8007f9c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e004      	b.n	8007f9c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <xTaskIncrementTick+0x174>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	4a0f      	ldr	r2, [pc, #60]	; (8007fd8 <xTaskIncrementTick+0x174>)
 8007f9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f9c:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <xTaskIncrementTick+0x178>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fa8:	697b      	ldr	r3, [r7, #20]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000e00 	.word	0x20000e00
 8007fb8:	20000ddc 	.word	0x20000ddc
 8007fbc:	20000d90 	.word	0x20000d90
 8007fc0:	20000d94 	.word	0x20000d94
 8007fc4:	20000df0 	.word	0x20000df0
 8007fc8:	20000df8 	.word	0x20000df8
 8007fcc:	20000de0 	.word	0x20000de0
 8007fd0:	20000908 	.word	0x20000908
 8007fd4:	20000904 	.word	0x20000904
 8007fd8:	20000de8 	.word	0x20000de8
 8007fdc:	20000dec 	.word	0x20000dec

08007fe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fe6:	4b27      	ldr	r3, [pc, #156]	; (8008084 <vTaskSwitchContext+0xa4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fee:	4b26      	ldr	r3, [pc, #152]	; (8008088 <vTaskSwitchContext+0xa8>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ff4:	e040      	b.n	8008078 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <vTaskSwitchContext+0xa8>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ffc:	4b23      	ldr	r3, [pc, #140]	; (800808c <vTaskSwitchContext+0xac>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e00f      	b.n	8008024 <vTaskSwitchContext+0x44>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d109      	bne.n	800801e <vTaskSwitchContext+0x3e>
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	e7fe      	b.n	800801c <vTaskSwitchContext+0x3c>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3b01      	subs	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	491a      	ldr	r1, [pc, #104]	; (8008090 <vTaskSwitchContext+0xb0>)
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0e5      	beq.n	8008004 <vTaskSwitchContext+0x24>
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a13      	ldr	r2, [pc, #76]	; (8008090 <vTaskSwitchContext+0xb0>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3308      	adds	r3, #8
 800805a:	429a      	cmp	r2, r3
 800805c:	d104      	bne.n	8008068 <vTaskSwitchContext+0x88>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	605a      	str	r2, [r3, #4]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	4a09      	ldr	r2, [pc, #36]	; (8008094 <vTaskSwitchContext+0xb4>)
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	4a06      	ldr	r2, [pc, #24]	; (800808c <vTaskSwitchContext+0xac>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6013      	str	r3, [r2, #0]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	20000e00 	.word	0x20000e00
 8008088:	20000dec 	.word	0x20000dec
 800808c:	20000de0 	.word	0x20000de0
 8008090:	20000908 	.word	0x20000908
 8008094:	20000904 	.word	0x20000904

08008098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <vTaskPlaceOnEventList+0x24>
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e7fe      	b.n	80080ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <vTaskPlaceOnEventList+0x44>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fe fee4 	bl	8006e92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080ca:	2101      	movs	r1, #1
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	f000 fa77 	bl	80085c0 <prvAddCurrentTaskToDelayedList>
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000904 	.word	0x20000904

080080e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <vTaskPlaceOnEventListRestricted+0x26>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e7fe      	b.n	8008104 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008106:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <vTaskPlaceOnEventListRestricted+0x50>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3318      	adds	r3, #24
 800810c:	4619      	mov	r1, r3
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7fe fe9b 	bl	8006e4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	68b8      	ldr	r0, [r7, #8]
 8008124:	f000 fa4c 	bl	80085c0 <prvAddCurrentTaskToDelayedList>
	}
 8008128:	bf00      	nop
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000904 	.word	0x20000904

08008134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <xTaskRemoveFromEventList+0x2a>
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e7fe      	b.n	800815c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3318      	adds	r3, #24
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fece 	bl	8006f04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <xTaskRemoveFromEventList+0xac>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11d      	bne.n	80081ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3304      	adds	r3, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe fec5 	bl	8006f04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <xTaskRemoveFromEventList+0xb0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d903      	bls.n	800818e <xTaskRemoveFromEventList+0x5a>
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <xTaskRemoveFromEventList+0xb0>)
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4a13      	ldr	r2, [pc, #76]	; (80081e8 <xTaskRemoveFromEventList+0xb4>)
 800819c:	441a      	add	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f7fe fe50 	bl	8006e4a <vListInsertEnd>
 80081aa:	e005      	b.n	80081b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3318      	adds	r3, #24
 80081b0:	4619      	mov	r1, r3
 80081b2:	480e      	ldr	r0, [pc, #56]	; (80081ec <xTaskRemoveFromEventList+0xb8>)
 80081b4:	f7fe fe49 	bl	8006e4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <xTaskRemoveFromEventList+0xbc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d905      	bls.n	80081d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081c6:	2301      	movs	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <xTaskRemoveFromEventList+0xc0>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e001      	b.n	80081d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80081d6:	697b      	ldr	r3, [r7, #20]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000e00 	.word	0x20000e00
 80081e4:	20000de0 	.word	0x20000de0
 80081e8:	20000908 	.word	0x20000908
 80081ec:	20000d98 	.word	0x20000d98
 80081f0:	20000904 	.word	0x20000904
 80081f4:	20000dec 	.word	0x20000dec

080081f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <vTaskInternalSetTimeOutState+0x24>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <vTaskInternalSetTimeOutState+0x28>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	605a      	str	r2, [r3, #4]
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	20000df0 	.word	0x20000df0
 8008220:	20000ddc 	.word	0x20000ddc

08008224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <xTaskCheckForTimeOut+0x24>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	e7fe      	b.n	8008246 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <xTaskCheckForTimeOut+0x3e>
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e7fe      	b.n	8008260 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008262:	f000 fe33 	bl	8008ecc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <xTaskCheckForTimeOut+0xb8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d102      	bne.n	8008286 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	e023      	b.n	80082ce <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <xTaskCheckForTimeOut+0xbc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d007      	beq.n	80082a2 <xTaskCheckForTimeOut+0x7e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800829c:	2301      	movs	r3, #1
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e015      	b.n	80082ce <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d20b      	bcs.n	80082c4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ff9d 	bl	80081f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	e004      	b.n	80082ce <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082ca:	2301      	movs	r3, #1
 80082cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082ce:	f000 fe2b 	bl	8008f28 <vPortExitCritical>

	return xReturn;
 80082d2:	69fb      	ldr	r3, [r7, #28]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000ddc 	.word	0x20000ddc
 80082e0:	20000df0 	.word	0x20000df0

080082e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <vTaskMissedYield+0x14>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20000dec 	.word	0x20000dec

080082fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008304:	f000 f852 	bl	80083ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <prvIdleTask+0x28>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d9f9      	bls.n	8008304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <prvIdleTask+0x2c>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008320:	e7f0      	b.n	8008304 <prvIdleTask+0x8>
 8008322:	bf00      	nop
 8008324:	20000908 	.word	0x20000908
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	e00c      	b.n	8008352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <prvInitialiseTaskLists+0x60>)
 8008344:	4413      	add	r3, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fd52 	bl	8006df0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3301      	adds	r3, #1
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b37      	cmp	r3, #55	; 0x37
 8008356:	d9ef      	bls.n	8008338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008358:	480d      	ldr	r0, [pc, #52]	; (8008390 <prvInitialiseTaskLists+0x64>)
 800835a:	f7fe fd49 	bl	8006df0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800835e:	480d      	ldr	r0, [pc, #52]	; (8008394 <prvInitialiseTaskLists+0x68>)
 8008360:	f7fe fd46 	bl	8006df0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008364:	480c      	ldr	r0, [pc, #48]	; (8008398 <prvInitialiseTaskLists+0x6c>)
 8008366:	f7fe fd43 	bl	8006df0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800836a:	480c      	ldr	r0, [pc, #48]	; (800839c <prvInitialiseTaskLists+0x70>)
 800836c:	f7fe fd40 	bl	8006df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008370:	480b      	ldr	r0, [pc, #44]	; (80083a0 <prvInitialiseTaskLists+0x74>)
 8008372:	f7fe fd3d 	bl	8006df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <prvInitialiseTaskLists+0x78>)
 8008378:	4a05      	ldr	r2, [pc, #20]	; (8008390 <prvInitialiseTaskLists+0x64>)
 800837a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <prvInitialiseTaskLists+0x7c>)
 800837e:	4a05      	ldr	r2, [pc, #20]	; (8008394 <prvInitialiseTaskLists+0x68>)
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000908 	.word	0x20000908
 8008390:	20000d68 	.word	0x20000d68
 8008394:	20000d7c 	.word	0x20000d7c
 8008398:	20000d98 	.word	0x20000d98
 800839c:	20000dac 	.word	0x20000dac
 80083a0:	20000dc4 	.word	0x20000dc4
 80083a4:	20000d90 	.word	0x20000d90
 80083a8:	20000d94 	.word	0x20000d94

080083ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083b2:	e019      	b.n	80083e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083b4:	f000 fd8a 	bl	8008ecc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <prvCheckTasksWaitingTermination+0x4c>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fd9d 	bl	8006f04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <prvCheckTasksWaitingTermination+0x50>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <prvCheckTasksWaitingTermination+0x50>)
 80083d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <prvCheckTasksWaitingTermination+0x54>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3b01      	subs	r3, #1
 80083da:	4a09      	ldr	r2, [pc, #36]	; (8008400 <prvCheckTasksWaitingTermination+0x54>)
 80083dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083de:	f000 fda3 	bl	8008f28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f80e 	bl	8008404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <prvCheckTasksWaitingTermination+0x54>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e1      	bne.n	80083b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000dac 	.word	0x20000dac
 80083fc:	20000dd8 	.word	0x20000dd8
 8008400:	20000dc0 	.word	0x20000dc0

08008404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008412:	2b00      	cmp	r3, #0
 8008414:	d108      	bne.n	8008428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	4618      	mov	r0, r3
 800841c:	f000 ff32 	bl	8009284 <vPortFree>
				vPortFree( pxTCB );
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 ff2f 	bl	8009284 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008426:	e017      	b.n	8008458 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800842e:	2b01      	cmp	r3, #1
 8008430:	d103      	bne.n	800843a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 ff26 	bl	8009284 <vPortFree>
	}
 8008438:	e00e      	b.n	8008458 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008440:	2b02      	cmp	r3, #2
 8008442:	d009      	beq.n	8008458 <prvDeleteTCB+0x54>
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	e7fe      	b.n	8008456 <prvDeleteTCB+0x52>
	}
 8008458:	bf00      	nop
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <prvResetNextTaskUnblockTime+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <prvResetNextTaskUnblockTime+0x14>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <prvResetNextTaskUnblockTime+0x16>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800847a:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <prvResetNextTaskUnblockTime+0x48>)
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008482:	e008      	b.n	8008496 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008484:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <prvResetNextTaskUnblockTime+0x44>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <prvResetNextTaskUnblockTime+0x48>)
 8008494:	6013      	str	r3, [r2, #0]
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20000d90 	.word	0x20000d90
 80084a8:	20000df8 	.word	0x20000df8

080084ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <xTaskGetSchedulerState+0x34>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ba:	2301      	movs	r3, #1
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	e008      	b.n	80084d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <xTaskGetSchedulerState+0x38>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084c8:	2302      	movs	r3, #2
 80084ca:	607b      	str	r3, [r7, #4]
 80084cc:	e001      	b.n	80084d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084ce:	2300      	movs	r3, #0
 80084d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084d2:	687b      	ldr	r3, [r7, #4]
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20000de4 	.word	0x20000de4
 80084e4:	20000e00 	.word	0x20000e00

080084e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d054      	beq.n	80085a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <xTaskPriorityDisinherit+0xcc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d009      	beq.n	800851c <xTaskPriorityDisinherit+0x34>
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e7fe      	b.n	800851a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <xTaskPriorityDisinherit+0x50>
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	e7fe      	b.n	8008536 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853c:	1e5a      	subs	r2, r3, #1
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	429a      	cmp	r2, r3
 800854c:	d02c      	beq.n	80085a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008552:	2b00      	cmp	r3, #0
 8008554:	d128      	bne.n	80085a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fcd2 	bl	8006f04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <xTaskPriorityDisinherit+0xd0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d903      	bls.n	8008588 <xTaskPriorityDisinherit+0xa0>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <xTaskPriorityDisinherit+0xd0>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4a09      	ldr	r2, [pc, #36]	; (80085bc <xTaskPriorityDisinherit+0xd4>)
 8008596:	441a      	add	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fe fc53 	bl	8006e4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
	}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000904 	.word	0x20000904
 80085b8:	20000de0 	.word	0x20000de0
 80085bc:	20000908 	.word	0x20000908

080085c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085ca:	4b21      	ldr	r3, [pc, #132]	; (8008650 <prvAddCurrentTaskToDelayedList+0x90>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d0:	4b20      	ldr	r3, [pc, #128]	; (8008654 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fc94 	bl	8006f04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d10a      	bne.n	80085fa <prvAddCurrentTaskToDelayedList+0x3a>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ea:	4b1a      	ldr	r3, [pc, #104]	; (8008654 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4819      	ldr	r0, [pc, #100]	; (8008658 <prvAddCurrentTaskToDelayedList+0x98>)
 80085f4:	f7fe fc29 	bl	8006e4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085f8:	e026      	b.n	8008648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4413      	add	r3, r2
 8008600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008602:	4b14      	ldr	r3, [pc, #80]	; (8008654 <prvAddCurrentTaskToDelayedList+0x94>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	429a      	cmp	r2, r3
 8008610:	d209      	bcs.n	8008626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <prvAddCurrentTaskToDelayedList+0x94>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fc37 	bl	8006e92 <vListInsert>
}
 8008624:	e010      	b.n	8008648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008626:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <prvAddCurrentTaskToDelayedList+0x94>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3304      	adds	r3, #4
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f7fe fc2d 	bl	8006e92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008638:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	d202      	bcs.n	8008648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008642:	4a08      	ldr	r2, [pc, #32]	; (8008664 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6013      	str	r3, [r2, #0]
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000ddc 	.word	0x20000ddc
 8008654:	20000904 	.word	0x20000904
 8008658:	20000dc4 	.word	0x20000dc4
 800865c:	20000d94 	.word	0x20000d94
 8008660:	20000d90 	.word	0x20000d90
 8008664:	20000df8 	.word	0x20000df8

08008668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008672:	f000 fac3 	bl	8008bfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008676:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <xTimerCreateTimerTask+0x80>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d021      	beq.n	80086c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008686:	1d3a      	adds	r2, r7, #4
 8008688:	f107 0108 	add.w	r1, r7, #8
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fb93 	bl	8006dbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	9202      	str	r2, [sp, #8]
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	2302      	movs	r3, #2
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	460a      	mov	r2, r1
 80086a8:	4910      	ldr	r1, [pc, #64]	; (80086ec <xTimerCreateTimerTask+0x84>)
 80086aa:	4811      	ldr	r0, [pc, #68]	; (80086f0 <xTimerCreateTimerTask+0x88>)
 80086ac:	f7ff f928 	bl	8007900 <xTaskCreateStatic>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <xTimerCreateTimerTask+0x8c>)
 80086b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <xTimerCreateTimerTask+0x8c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086be:	2301      	movs	r3, #1
 80086c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d109      	bne.n	80086dc <xTimerCreateTimerTask+0x74>
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	e7fe      	b.n	80086da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000e34 	.word	0x20000e34
 80086ec:	0800b77c 	.word	0x0800b77c
 80086f0:	08008811 	.word	0x08008811
 80086f4:	20000e38 	.word	0x20000e38

080086f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008706:	2300      	movs	r3, #0
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d109      	bne.n	8008724 <xTimerGenericCommand+0x2c>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	623b      	str	r3, [r7, #32]
 8008722:	e7fe      	b.n	8008722 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008724:	4b19      	ldr	r3, [pc, #100]	; (800878c <xTimerGenericCommand+0x94>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d02a      	beq.n	8008782 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b05      	cmp	r3, #5
 800873c:	dc18      	bgt.n	8008770 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800873e:	f7ff feb5 	bl	80084ac <xTaskGetSchedulerState>
 8008742:	4603      	mov	r3, r0
 8008744:	2b02      	cmp	r3, #2
 8008746:	d109      	bne.n	800875c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008748:	4b10      	ldr	r3, [pc, #64]	; (800878c <xTimerGenericCommand+0x94>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	f107 0110 	add.w	r1, r7, #16
 8008750:	2300      	movs	r3, #0
 8008752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008754:	f7fe fcfe 	bl	8007154 <xQueueGenericSend>
 8008758:	6278      	str	r0, [r7, #36]	; 0x24
 800875a:	e012      	b.n	8008782 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <xTimerGenericCommand+0x94>)
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	f107 0110 	add.w	r1, r7, #16
 8008764:	2300      	movs	r3, #0
 8008766:	2200      	movs	r2, #0
 8008768:	f7fe fcf4 	bl	8007154 <xQueueGenericSend>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24
 800876e:	e008      	b.n	8008782 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <xTimerGenericCommand+0x94>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	f107 0110 	add.w	r1, r7, #16
 8008778:	2300      	movs	r3, #0
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	f7fe fde4 	bl	8007348 <xQueueGenericSendFromISR>
 8008780:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008784:	4618      	mov	r0, r3
 8008786:	3728      	adds	r7, #40	; 0x28
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000e34 	.word	0x20000e34

08008790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af02      	add	r7, sp, #8
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800879a:	4b1c      	ldr	r3, [pc, #112]	; (800880c <prvProcessExpiredTimer+0x7c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fbab 	bl	8006f04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d121      	bne.n	80087fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	18d1      	adds	r1, r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f000 f8c8 	bl	8008958 <prvInsertTimerInActiveList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d015      	beq.n	80087fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ce:	2300      	movs	r3, #0
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	2300      	movs	r3, #0
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	2100      	movs	r1, #0
 80087d8:	6978      	ldr	r0, [r7, #20]
 80087da:	f7ff ff8d 	bl	80086f8 <xTimerGenericCommand>
 80087de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvProcessExpiredTimer+0x6a>
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e7fe      	b.n	80087f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	6978      	ldr	r0, [r7, #20]
 8008800:	4798      	blx	r3
}
 8008802:	bf00      	nop
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000e2c 	.word	0x20000e2c

08008810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008818:	f107 0308 	add.w	r3, r7, #8
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f857 	bl	80088d0 <prvGetNextExpireTime>
 8008822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4619      	mov	r1, r3
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f803 	bl	8008834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800882e:	f000 f8d5 	bl	80089dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008832:	e7f1      	b.n	8008818 <prvTimerTask+0x8>

08008834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800883e:	f7ff fa57 	bl	8007cf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f866 	bl	8008918 <prvSampleTimeNow>
 800884c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d130      	bne.n	80088b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <prvProcessTimerOrBlockTask+0x3c>
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	429a      	cmp	r2, r3
 8008860:	d806      	bhi.n	8008870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008862:	f7ff fa53 	bl	8007d0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff ff91 	bl	8008790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800886e:	e024      	b.n	80088ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d008      	beq.n	8008888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <prvProcessTimerOrBlockTask+0x90>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008888:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <prvProcessTimerOrBlockTask+0x94>)
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fe ffff 	bl	8007898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800889a:	f7ff fa37 	bl	8007d0c <xTaskResumeAll>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088a4:	4b09      	ldr	r3, [pc, #36]	; (80088cc <prvProcessTimerOrBlockTask+0x98>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
}
 80088b4:	e001      	b.n	80088ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088b6:	f7ff fa29 	bl	8007d0c <xTaskResumeAll>
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000e30 	.word	0x20000e30
 80088c8:	20000e34 	.word	0x20000e34
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088d8:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <prvGetNextExpireTime+0x44>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf0c      	ite	eq
 80088e2:	2301      	moveq	r3, #1
 80088e4:	2300      	movne	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088f6:	4b07      	ldr	r3, [pc, #28]	; (8008914 <prvGetNextExpireTime+0x44>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e001      	b.n	8008906 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008906:	68fb      	ldr	r3, [r7, #12]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	20000e2c 	.word	0x20000e2c

08008918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008920:	f7ff fa90 	bl	8007e44 <xTaskGetTickCount>
 8008924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <prvSampleTimeNow+0x3c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	429a      	cmp	r2, r3
 800892e:	d205      	bcs.n	800893c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008930:	f000 f904 	bl	8008b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e002      	b.n	8008942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008942:	4a04      	ldr	r2, [pc, #16]	; (8008954 <prvSampleTimeNow+0x3c>)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008948:	68fb      	ldr	r3, [r7, #12]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000e3c 	.word	0x20000e3c

08008958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d812      	bhi.n	80089a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	429a      	cmp	r2, r3
 800898a:	d302      	bcc.n	8008992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	e01b      	b.n	80089ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008992:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <prvInsertTimerInActiveList+0x7c>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe fa78 	bl	8006e92 <vListInsert>
 80089a2:	e012      	b.n	80089ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d206      	bcs.n	80089ba <prvInsertTimerInActiveList+0x62>
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e007      	b.n	80089ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <prvInsertTimerInActiveList+0x80>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7fe fa64 	bl	8006e92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089ca:	697b      	ldr	r3, [r7, #20]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000e30 	.word	0x20000e30
 80089d8:	20000e2c 	.word	0x20000e2c

080089dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08e      	sub	sp, #56	; 0x38
 80089e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089e2:	e099      	b.n	8008b18 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da17      	bge.n	8008a1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	3304      	adds	r3, #4
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d109      	bne.n	8008a0a <prvProcessReceivedCommands+0x2e>
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	e7fe      	b.n	8008a08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a10:	6850      	ldr	r0, [r2, #4]
 8008a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a14:	6892      	ldr	r2, [r2, #8]
 8008a16:	4611      	mov	r1, r2
 8008a18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	db7a      	blt.n	8008b16 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fa67 	bl	8006f04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a36:	463b      	mov	r3, r7
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff ff6d 	bl	8008918 <prvSampleTimeNow>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b09      	cmp	r3, #9
 8008a44:	d868      	bhi.n	8008b18 <prvProcessReceivedCommands+0x13c>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <prvProcessReceivedCommands+0x70>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a75 	.word	0x08008a75
 8008a58:	08008b19 	.word	0x08008b19
 8008a5c:	08008acf 	.word	0x08008acf
 8008a60:	08008b05 	.word	0x08008b05
 8008a64:	08008a75 	.word	0x08008a75
 8008a68:	08008a75 	.word	0x08008a75
 8008a6c:	08008b19 	.word	0x08008b19
 8008a70:	08008acf 	.word	0x08008acf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	18d1      	adds	r1, r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a82:	f7ff ff69 	bl	8008958 <prvInsertTimerInActiveList>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d045      	beq.n	8008b18 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d13d      	bne.n	8008b18 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aae:	f7ff fe23 	bl	80086f8 <xTimerGenericCommand>
 8008ab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d12e      	bne.n	8008b18 <prvProcessReceivedCommands+0x13c>
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e7fe      	b.n	8008acc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <prvProcessReceivedCommands+0x114>
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e7fe      	b.n	8008aee <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	18d1      	adds	r1, r2, r3
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afe:	f7ff ff2b 	bl	8008958 <prvInsertTimerInActiveList>
					break;
 8008b02:	e009      	b.n	8008b18 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b10:	f000 fbb8 	bl	8009284 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b14:	e000      	b.n	8008b18 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b18:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <prvProcessReceivedCommands+0x15c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	1d39      	adds	r1, r7, #4
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fca5 	bl	8007470 <xQueueReceive>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f47f af5b 	bne.w	80089e4 <prvProcessReceivedCommands+0x8>
	}
}
 8008b2e:	bf00      	nop
 8008b30:	3730      	adds	r7, #48	; 0x30
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000e34 	.word	0x20000e34

08008b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b42:	e044      	b.n	8008bce <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b44:	4b2b      	ldr	r3, [pc, #172]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b4e:	4b29      	ldr	r3, [pc, #164]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fe f9d1 	bl	8006f04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d12d      	bne.n	8008bce <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d90e      	bls.n	8008ba2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b90:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe f979 	bl	8006e92 <vListInsert>
 8008ba0:	e015      	b.n	8008bce <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff fda3 	bl	80086f8 <xTimerGenericCommand>
 8008bb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d109      	bne.n	8008bce <prvSwitchTimerLists+0x92>
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	e7fe      	b.n	8008bcc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1b5      	bne.n	8008b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a04      	ldr	r2, [pc, #16]	; (8008bf4 <prvSwitchTimerLists+0xb8>)
 8008be4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008be6:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <prvSwitchTimerLists+0xbc>)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	6013      	str	r3, [r2, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000e2c 	.word	0x20000e2c
 8008bf8:	20000e30 	.word	0x20000e30

08008bfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c02:	f000 f963 	bl	8008ecc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c06:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <prvCheckForValidListAndQueue+0x60>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d120      	bne.n	8008c50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c0e:	4814      	ldr	r0, [pc, #80]	; (8008c60 <prvCheckForValidListAndQueue+0x64>)
 8008c10:	f7fe f8ee 	bl	8006df0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c14:	4813      	ldr	r0, [pc, #76]	; (8008c64 <prvCheckForValidListAndQueue+0x68>)
 8008c16:	f7fe f8eb 	bl	8006df0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c1a:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <prvCheckForValidListAndQueue+0x6c>)
 8008c1c:	4a10      	ldr	r2, [pc, #64]	; (8008c60 <prvCheckForValidListAndQueue+0x64>)
 8008c1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <prvCheckForValidListAndQueue+0x70>)
 8008c22:	4a10      	ldr	r2, [pc, #64]	; (8008c64 <prvCheckForValidListAndQueue+0x68>)
 8008c24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c26:	2300      	movs	r3, #0
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <prvCheckForValidListAndQueue+0x74>)
 8008c2c:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <prvCheckForValidListAndQueue+0x78>)
 8008c2e:	2110      	movs	r1, #16
 8008c30:	200a      	movs	r0, #10
 8008c32:	f7fe f9f9 	bl	8007028 <xQueueGenericCreateStatic>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <prvCheckForValidListAndQueue+0x60>)
 8008c3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c3c:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <prvCheckForValidListAndQueue+0x60>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <prvCheckForValidListAndQueue+0x60>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	490b      	ldr	r1, [pc, #44]	; (8008c78 <prvCheckForValidListAndQueue+0x7c>)
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fdfc 	bl	8007848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c50:	f000 f96a 	bl	8008f28 <vPortExitCritical>
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000e34 	.word	0x20000e34
 8008c60:	20000e04 	.word	0x20000e04
 8008c64:	20000e18 	.word	0x20000e18
 8008c68:	20000e2c 	.word	0x20000e2c
 8008c6c:	20000e30 	.word	0x20000e30
 8008c70:	20000ee0 	.word	0x20000ee0
 8008c74:	20000e40 	.word	0x20000e40
 8008c78:	0800b784 	.word	0x0800b784

08008c7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3b04      	subs	r3, #4
 8008c8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f023 0201 	bic.w	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cac:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <pxPortInitialiseStack+0x64>)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3b14      	subs	r3, #20
 8008cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f06f 0202 	mvn.w	r2, #2
 8008cca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3b20      	subs	r3, #32
 8008cd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	08008ce5 	.word	0x08008ce5

08008ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cee:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <prvTaskExitError+0x50>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d009      	beq.n	8008d0c <prvTaskExitError+0x28>
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e7fe      	b.n	8008d0a <prvTaskExitError+0x26>
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d1e:	bf00      	nop
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0fc      	beq.n	8008d20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	2000000c 	.word	0x2000000c
	...

08008d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <pxCurrentTCBConst2>)
 8008d42:	6819      	ldr	r1, [r3, #0]
 8008d44:	6808      	ldr	r0, [r1, #0]
 8008d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	f380 8809 	msr	PSP, r0
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f380 8811 	msr	BASEPRI, r0
 8008d5a:	4770      	bx	lr
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst2>:
 8008d60:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop

08008d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d68:	4808      	ldr	r0, [pc, #32]	; (8008d8c <prvPortStartFirstTask+0x24>)
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	6800      	ldr	r0, [r0, #0]
 8008d6e:	f380 8808 	msr	MSP, r0
 8008d72:	f04f 0000 	mov.w	r0, #0
 8008d76:	f380 8814 	msr	CONTROL, r0
 8008d7a:	b662      	cpsie	i
 8008d7c:	b661      	cpsie	f
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	df00      	svc	0
 8008d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d8a:	bf00      	nop
 8008d8c:	e000ed08 	.word	0xe000ed08

08008d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d96:	4b44      	ldr	r3, [pc, #272]	; (8008ea8 <xPortStartScheduler+0x118>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a44      	ldr	r2, [pc, #272]	; (8008eac <xPortStartScheduler+0x11c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d109      	bne.n	8008db4 <xPortStartScheduler+0x24>
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
 8008db2:	e7fe      	b.n	8008db2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008db4:	4b3c      	ldr	r3, [pc, #240]	; (8008ea8 <xPortStartScheduler+0x118>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a3d      	ldr	r2, [pc, #244]	; (8008eb0 <xPortStartScheduler+0x120>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d109      	bne.n	8008dd2 <xPortStartScheduler+0x42>
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	e7fe      	b.n	8008dd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dd2:	4b38      	ldr	r3, [pc, #224]	; (8008eb4 <xPortStartScheduler+0x124>)
 8008dd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	22ff      	movs	r2, #255	; 0xff
 8008de2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	4b30      	ldr	r3, [pc, #192]	; (8008eb8 <xPortStartScheduler+0x128>)
 8008df8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dfa:	4b30      	ldr	r3, [pc, #192]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008dfc:	2207      	movs	r2, #7
 8008dfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e00:	e009      	b.n	8008e16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e02:	4b2e      	ldr	r3, [pc, #184]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	4a2c      	ldr	r2, [pc, #176]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1e:	2b80      	cmp	r3, #128	; 0x80
 8008e20:	d0ef      	beq.n	8008e02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e22:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1c3 0307 	rsb	r3, r3, #7
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d009      	beq.n	8008e42 <xPortStartScheduler+0xb2>
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60bb      	str	r3, [r7, #8]
 8008e40:	e7fe      	b.n	8008e40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e42:	4b1e      	ldr	r3, [pc, #120]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	4a1c      	ldr	r2, [pc, #112]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e4c:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e54:	4a19      	ldr	r2, [pc, #100]	; (8008ebc <xPortStartScheduler+0x12c>)
 8008e56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e60:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <xPortStartScheduler+0x130>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <xPortStartScheduler+0x130>)
 8008e66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e6c:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <xPortStartScheduler+0x130>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <xPortStartScheduler+0x130>)
 8008e72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e78:	f000 f8d6 	bl	8009028 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <xPortStartScheduler+0x134>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e82:	f000 f8f5 	bl	8009070 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e86:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <xPortStartScheduler+0x138>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a0f      	ldr	r2, [pc, #60]	; (8008ec8 <xPortStartScheduler+0x138>)
 8008e8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e92:	f7ff ff69 	bl	8008d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e96:	f7ff f8a3 	bl	8007fe0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e9a:	f7ff ff23 	bl	8008ce4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed00 	.word	0xe000ed00
 8008eac:	410fc271 	.word	0x410fc271
 8008eb0:	410fc270 	.word	0x410fc270
 8008eb4:	e000e400 	.word	0xe000e400
 8008eb8:	20000f30 	.word	0x20000f30
 8008ebc:	20000f34 	.word	0x20000f34
 8008ec0:	e000ed20 	.word	0xe000ed20
 8008ec4:	2000000c 	.word	0x2000000c
 8008ec8:	e000ef34 	.word	0xe000ef34

08008ecc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <vPortEnterCritical+0x54>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	4a0d      	ldr	r2, [pc, #52]	; (8008f20 <vPortEnterCritical+0x54>)
 8008eec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <vPortEnterCritical+0x54>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d10e      	bne.n	8008f14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <vPortEnterCritical+0x58>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <vPortEnterCritical+0x48>
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	603b      	str	r3, [r7, #0]
 8008f12:	e7fe      	b.n	8008f12 <vPortEnterCritical+0x46>
	}
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	2000000c 	.word	0x2000000c
 8008f24:	e000ed04 	.word	0xe000ed04

08008f28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f2e:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <vPortExitCritical+0x4c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <vPortExitCritical+0x22>
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	607b      	str	r3, [r7, #4]
 8008f48:	e7fe      	b.n	8008f48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <vPortExitCritical+0x4c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <vPortExitCritical+0x4c>)
 8008f52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <vPortExitCritical+0x4c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <vPortExitCritical+0x3e>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2000000c 	.word	0x2000000c
	...

08008f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f80:	f3ef 8009 	mrs	r0, PSP
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <pxCurrentTCBConst>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f01e 0f10 	tst.w	lr, #16
 8008f90:	bf08      	it	eq
 8008f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fa4:	f380 8811 	msr	BASEPRI, r0
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f7ff f816 	bl	8007fe0 <vTaskSwitchContext>
 8008fb4:	f04f 0000 	mov.w	r0, #0
 8008fb8:	f380 8811 	msr	BASEPRI, r0
 8008fbc:	bc09      	pop	{r0, r3}
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc6:	f01e 0f10 	tst.w	lr, #16
 8008fca:	bf08      	it	eq
 8008fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fd0:	f380 8809 	msr	PSP, r0
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w

08008fe0 <pxCurrentTCBConst>:
 8008fe0:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009000:	f7fe ff30 	bl	8007e64 <xTaskIncrementTick>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800900a:	4b06      	ldr	r3, [pc, #24]	; (8009024 <SysTick_Handler+0x3c>)
 800900c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000ed04 	.word	0xe000ed04

08009028 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800902c:	4b0b      	ldr	r3, [pc, #44]	; (800905c <vPortSetupTimerInterrupt+0x34>)
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009032:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <vPortSetupTimerInterrupt+0x38>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <vPortSetupTimerInterrupt+0x3c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0a      	ldr	r2, [pc, #40]	; (8009068 <vPortSetupTimerInterrupt+0x40>)
 800903e:	fba2 2303 	umull	r2, r3, r2, r3
 8009042:	099b      	lsrs	r3, r3, #6
 8009044:	4a09      	ldr	r2, [pc, #36]	; (800906c <vPortSetupTimerInterrupt+0x44>)
 8009046:	3b01      	subs	r3, #1
 8009048:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800904a:	4b04      	ldr	r3, [pc, #16]	; (800905c <vPortSetupTimerInterrupt+0x34>)
 800904c:	2207      	movs	r2, #7
 800904e:	601a      	str	r2, [r3, #0]
}
 8009050:	bf00      	nop
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	e000e010 	.word	0xe000e010
 8009060:	e000e018 	.word	0xe000e018
 8009064:	20000000 	.word	0x20000000
 8009068:	10624dd3 	.word	0x10624dd3
 800906c:	e000e014 	.word	0xe000e014

08009070 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009070:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009080 <vPortEnableVFP+0x10>
 8009074:	6801      	ldr	r1, [r0, #0]
 8009076:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800907a:	6001      	str	r1, [r0, #0]
 800907c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800907e:	bf00      	nop
 8009080:	e000ed88 	.word	0xe000ed88

08009084 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800908a:	f3ef 8305 	mrs	r3, IPSR
 800908e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b0f      	cmp	r3, #15
 8009094:	d913      	bls.n	80090be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009096:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <vPortValidateInterruptPriority+0x6c>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4413      	add	r3, r2
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090a0:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <vPortValidateInterruptPriority+0x70>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	7afa      	ldrb	r2, [r7, #11]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d209      	bcs.n	80090be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	607b      	str	r3, [r7, #4]
 80090bc:	e7fe      	b.n	80090bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <vPortValidateInterruptPriority+0x74>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <vPortValidateInterruptPriority+0x78>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d909      	bls.n	80090e2 <vPortValidateInterruptPriority+0x5e>
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	e7fe      	b.n	80090e0 <vPortValidateInterruptPriority+0x5c>
	}
 80090e2:	bf00      	nop
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	e000e3f0 	.word	0xe000e3f0
 80090f4:	20000f30 	.word	0x20000f30
 80090f8:	e000ed0c 	.word	0xe000ed0c
 80090fc:	20000f34 	.word	0x20000f34

08009100 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009108:	2300      	movs	r3, #0
 800910a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800910c:	f7fe fdf0 	bl	8007cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009110:	4b57      	ldr	r3, [pc, #348]	; (8009270 <pvPortMalloc+0x170>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009118:	f000 f90c 	bl	8009334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800911c:	4b55      	ldr	r3, [pc, #340]	; (8009274 <pvPortMalloc+0x174>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 808c 	bne.w	8009242 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01c      	beq.n	800916a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009130:	2208      	movs	r2, #8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4413      	add	r3, r2
 8009136:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b00      	cmp	r3, #0
 8009140:	d013      	beq.n	800916a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f023 0307 	bic.w	r3, r3, #7
 8009148:	3308      	adds	r3, #8
 800914a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <pvPortMalloc+0x6a>
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e7fe      	b.n	8009168 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d068      	beq.n	8009242 <pvPortMalloc+0x142>
 8009170:	4b41      	ldr	r3, [pc, #260]	; (8009278 <pvPortMalloc+0x178>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d863      	bhi.n	8009242 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800917a:	4b40      	ldr	r3, [pc, #256]	; (800927c <pvPortMalloc+0x17c>)
 800917c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800917e:	4b3f      	ldr	r3, [pc, #252]	; (800927c <pvPortMalloc+0x17c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009184:	e004      	b.n	8009190 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d903      	bls.n	80091a2 <pvPortMalloc+0xa2>
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f1      	bne.n	8009186 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091a2:	4b33      	ldr	r3, [pc, #204]	; (8009270 <pvPortMalloc+0x170>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d04a      	beq.n	8009242 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2208      	movs	r2, #8
 80091b2:	4413      	add	r3, r2
 80091b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	1ad2      	subs	r2, r2, r3
 80091c6:	2308      	movs	r3, #8
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d91e      	bls.n	800920c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <pvPortMalloc+0xf4>
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	e7fe      	b.n	80091f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	1ad2      	subs	r2, r2, r3
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009206:	69b8      	ldr	r0, [r7, #24]
 8009208:	f000 f8f6 	bl	80093f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800920c:	4b1a      	ldr	r3, [pc, #104]	; (8009278 <pvPortMalloc+0x178>)
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <pvPortMalloc+0x178>)
 8009218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800921a:	4b17      	ldr	r3, [pc, #92]	; (8009278 <pvPortMalloc+0x178>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <pvPortMalloc+0x180>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d203      	bcs.n	800922e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <pvPortMalloc+0x178>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <pvPortMalloc+0x180>)
 800922c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <pvPortMalloc+0x174>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	431a      	orrs	r2, r3
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009242:	f7fe fd63 	bl	8007d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <pvPortMalloc+0x164>
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	e7fe      	b.n	8009262 <pvPortMalloc+0x162>
	return pvReturn;
 8009264:	69fb      	ldr	r3, [r7, #28]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3728      	adds	r7, #40	; 0x28
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20001b40 	.word	0x20001b40
 8009274:	20001b4c 	.word	0x20001b4c
 8009278:	20001b44 	.word	0x20001b44
 800927c:	20001b38 	.word	0x20001b38
 8009280:	20001b48 	.word	0x20001b48

08009284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d046      	beq.n	8009324 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009296:	2308      	movs	r3, #8
 8009298:	425b      	negs	r3, r3
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4413      	add	r3, r2
 800929e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	4b20      	ldr	r3, [pc, #128]	; (800932c <vPortFree+0xa8>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4013      	ands	r3, r2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <vPortFree+0x42>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e7fe      	b.n	80092c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <vPortFree+0x5e>
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60bb      	str	r3, [r7, #8]
 80092e0:	e7fe      	b.n	80092e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <vPortFree+0xa8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d019      	beq.n	8009324 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d115      	bne.n	8009324 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	4b0b      	ldr	r3, [pc, #44]	; (800932c <vPortFree+0xa8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009308:	f7fe fcf2 	bl	8007cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <vPortFree+0xac>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4413      	add	r3, r2
 8009316:	4a06      	ldr	r2, [pc, #24]	; (8009330 <vPortFree+0xac>)
 8009318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f000 f86c 	bl	80093f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009320:	f7fe fcf4 	bl	8007d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20001b4c 	.word	0x20001b4c
 8009330:	20001b44 	.word	0x20001b44

08009334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800933a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800933e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009340:	4b27      	ldr	r3, [pc, #156]	; (80093e0 <prvHeapInit+0xac>)
 8009342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3307      	adds	r3, #7
 8009352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f023 0307 	bic.w	r3, r3, #7
 800935a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <prvHeapInit+0xac>)
 8009364:	4413      	add	r3, r2
 8009366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800936c:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <prvHeapInit+0xb0>)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <prvHeapInit+0xb0>)
 8009374:	2200      	movs	r2, #0
 8009376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009380:	2208      	movs	r2, #8
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <prvHeapInit+0xb4>)
 8009394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <prvHeapInit+0xb4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <prvHeapInit+0xb4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvHeapInit+0xb4>)
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <prvHeapInit+0xb8>)
 80093c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <prvHeapInit+0xbc>)
 80093ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <prvHeapInit+0xc0>)
 80093ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20000f38 	.word	0x20000f38
 80093e4:	20001b38 	.word	0x20001b38
 80093e8:	20001b40 	.word	0x20001b40
 80093ec:	20001b48 	.word	0x20001b48
 80093f0:	20001b44 	.word	0x20001b44
 80093f4:	20001b4c 	.word	0x20001b4c

080093f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009400:	4b28      	ldr	r3, [pc, #160]	; (80094a4 <prvInsertBlockIntoFreeList+0xac>)
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e002      	b.n	800940c <prvInsertBlockIntoFreeList+0x14>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d8f7      	bhi.n	8009406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d108      	bne.n	800943a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	441a      	add	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d118      	bne.n	8009480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d00d      	beq.n	8009476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e008      	b.n	8009488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009476:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e003      	b.n	8009488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	d002      	beq.n	8009496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20001b38 	.word	0x20001b38
 80094a8:	20001b40 	.word	0x20001b40

080094ac <atoi>:
 80094ac:	220a      	movs	r2, #10
 80094ae:	2100      	movs	r1, #0
 80094b0:	f000 bdf6 	b.w	800a0a0 <strtol>

080094b4 <__errno>:
 80094b4:	4b01      	ldr	r3, [pc, #4]	; (80094bc <__errno+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20000010 	.word	0x20000010

080094c0 <__libc_init_array>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4e0d      	ldr	r6, [pc, #52]	; (80094f8 <__libc_init_array+0x38>)
 80094c4:	4c0d      	ldr	r4, [pc, #52]	; (80094fc <__libc_init_array+0x3c>)
 80094c6:	1ba4      	subs	r4, r4, r6
 80094c8:	10a4      	asrs	r4, r4, #2
 80094ca:	2500      	movs	r5, #0
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d109      	bne.n	80094e4 <__libc_init_array+0x24>
 80094d0:	4e0b      	ldr	r6, [pc, #44]	; (8009500 <__libc_init_array+0x40>)
 80094d2:	4c0c      	ldr	r4, [pc, #48]	; (8009504 <__libc_init_array+0x44>)
 80094d4:	f002 f8f6 	bl	800b6c4 <_init>
 80094d8:	1ba4      	subs	r4, r4, r6
 80094da:	10a4      	asrs	r4, r4, #2
 80094dc:	2500      	movs	r5, #0
 80094de:	42a5      	cmp	r5, r4
 80094e0:	d105      	bne.n	80094ee <__libc_init_array+0x2e>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094e8:	4798      	blx	r3
 80094ea:	3501      	adds	r5, #1
 80094ec:	e7ee      	b.n	80094cc <__libc_init_array+0xc>
 80094ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094f2:	4798      	blx	r3
 80094f4:	3501      	adds	r5, #1
 80094f6:	e7f2      	b.n	80094de <__libc_init_array+0x1e>
 80094f8:	0800ba68 	.word	0x0800ba68
 80094fc:	0800ba68 	.word	0x0800ba68
 8009500:	0800ba68 	.word	0x0800ba68
 8009504:	0800ba6c 	.word	0x0800ba6c

08009508 <malloc>:
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <malloc+0xc>)
 800950a:	4601      	mov	r1, r0
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f000 b865 	b.w	80095dc <_malloc_r>
 8009512:	bf00      	nop
 8009514:	20000010 	.word	0x20000010

08009518 <memcpy>:
 8009518:	b510      	push	{r4, lr}
 800951a:	1e43      	subs	r3, r0, #1
 800951c:	440a      	add	r2, r1
 800951e:	4291      	cmp	r1, r2
 8009520:	d100      	bne.n	8009524 <memcpy+0xc>
 8009522:	bd10      	pop	{r4, pc}
 8009524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800952c:	e7f7      	b.n	800951e <memcpy+0x6>

0800952e <memset>:
 800952e:	4402      	add	r2, r0
 8009530:	4603      	mov	r3, r0
 8009532:	4293      	cmp	r3, r2
 8009534:	d100      	bne.n	8009538 <memset+0xa>
 8009536:	4770      	bx	lr
 8009538:	f803 1b01 	strb.w	r1, [r3], #1
 800953c:	e7f9      	b.n	8009532 <memset+0x4>
	...

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d045      	beq.n	80095d4 <_free_r+0x94>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f001 fc24 	bl	800ada0 <__malloc_lock>
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <_free_r+0x98>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	4610      	mov	r0, r2
 800955e:	b933      	cbnz	r3, 800956e <_free_r+0x2e>
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6014      	str	r4, [r2, #0]
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956a:	f001 bc1a 	b.w	800ada2 <__malloc_unlock>
 800956e:	42a3      	cmp	r3, r4
 8009570:	d90c      	bls.n	800958c <_free_r+0x4c>
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	1862      	adds	r2, r4, r1
 8009576:	4293      	cmp	r3, r2
 8009578:	bf04      	itt	eq
 800957a:	681a      	ldreq	r2, [r3, #0]
 800957c:	685b      	ldreq	r3, [r3, #4]
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	bf04      	itt	eq
 8009582:	1852      	addeq	r2, r2, r1
 8009584:	6022      	streq	r2, [r4, #0]
 8009586:	6004      	str	r4, [r0, #0]
 8009588:	e7ec      	b.n	8009564 <_free_r+0x24>
 800958a:	4613      	mov	r3, r2
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	b10a      	cbz	r2, 8009594 <_free_r+0x54>
 8009590:	42a2      	cmp	r2, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x4a>
 8009594:	6819      	ldr	r1, [r3, #0]
 8009596:	1858      	adds	r0, r3, r1
 8009598:	42a0      	cmp	r0, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x74>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4401      	add	r1, r0
 80095a0:	1858      	adds	r0, r3, r1
 80095a2:	4282      	cmp	r2, r0
 80095a4:	6019      	str	r1, [r3, #0]
 80095a6:	d1dd      	bne.n	8009564 <_free_r+0x24>
 80095a8:	6810      	ldr	r0, [r2, #0]
 80095aa:	6852      	ldr	r2, [r2, #4]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	4401      	add	r1, r0
 80095b0:	6019      	str	r1, [r3, #0]
 80095b2:	e7d7      	b.n	8009564 <_free_r+0x24>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x7c>
 80095b6:	230c      	movs	r3, #12
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	e7d3      	b.n	8009564 <_free_r+0x24>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	1821      	adds	r1, r4, r0
 80095c0:	428a      	cmp	r2, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6811      	ldreq	r1, [r2, #0]
 80095c6:	6852      	ldreq	r2, [r2, #4]
 80095c8:	6062      	str	r2, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	605c      	str	r4, [r3, #4]
 80095d2:	e7c7      	b.n	8009564 <_free_r+0x24>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20001b50 	.word	0x20001b50

080095dc <_malloc_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	1ccd      	adds	r5, r1, #3
 80095e0:	f025 0503 	bic.w	r5, r5, #3
 80095e4:	3508      	adds	r5, #8
 80095e6:	2d0c      	cmp	r5, #12
 80095e8:	bf38      	it	cc
 80095ea:	250c      	movcc	r5, #12
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	4606      	mov	r6, r0
 80095f0:	db01      	blt.n	80095f6 <_malloc_r+0x1a>
 80095f2:	42a9      	cmp	r1, r5
 80095f4:	d903      	bls.n	80095fe <_malloc_r+0x22>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	f001 fbcf 	bl	800ada0 <__malloc_lock>
 8009602:	4a21      	ldr	r2, [pc, #132]	; (8009688 <_malloc_r+0xac>)
 8009604:	6814      	ldr	r4, [r2, #0]
 8009606:	4621      	mov	r1, r4
 8009608:	b991      	cbnz	r1, 8009630 <_malloc_r+0x54>
 800960a:	4c20      	ldr	r4, [pc, #128]	; (800968c <_malloc_r+0xb0>)
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	b91b      	cbnz	r3, 8009618 <_malloc_r+0x3c>
 8009610:	4630      	mov	r0, r6
 8009612:	f000 fc99 	bl	8009f48 <_sbrk_r>
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	4629      	mov	r1, r5
 800961a:	4630      	mov	r0, r6
 800961c:	f000 fc94 	bl	8009f48 <_sbrk_r>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d124      	bne.n	800966e <_malloc_r+0x92>
 8009624:	230c      	movs	r3, #12
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	4630      	mov	r0, r6
 800962a:	f001 fbba 	bl	800ada2 <__malloc_unlock>
 800962e:	e7e4      	b.n	80095fa <_malloc_r+0x1e>
 8009630:	680b      	ldr	r3, [r1, #0]
 8009632:	1b5b      	subs	r3, r3, r5
 8009634:	d418      	bmi.n	8009668 <_malloc_r+0x8c>
 8009636:	2b0b      	cmp	r3, #11
 8009638:	d90f      	bls.n	800965a <_malloc_r+0x7e>
 800963a:	600b      	str	r3, [r1, #0]
 800963c:	50cd      	str	r5, [r1, r3]
 800963e:	18cc      	adds	r4, r1, r3
 8009640:	4630      	mov	r0, r6
 8009642:	f001 fbae 	bl	800ada2 <__malloc_unlock>
 8009646:	f104 000b 	add.w	r0, r4, #11
 800964a:	1d23      	adds	r3, r4, #4
 800964c:	f020 0007 	bic.w	r0, r0, #7
 8009650:	1ac3      	subs	r3, r0, r3
 8009652:	d0d3      	beq.n	80095fc <_malloc_r+0x20>
 8009654:	425a      	negs	r2, r3
 8009656:	50e2      	str	r2, [r4, r3]
 8009658:	e7d0      	b.n	80095fc <_malloc_r+0x20>
 800965a:	428c      	cmp	r4, r1
 800965c:	684b      	ldr	r3, [r1, #4]
 800965e:	bf16      	itet	ne
 8009660:	6063      	strne	r3, [r4, #4]
 8009662:	6013      	streq	r3, [r2, #0]
 8009664:	460c      	movne	r4, r1
 8009666:	e7eb      	b.n	8009640 <_malloc_r+0x64>
 8009668:	460c      	mov	r4, r1
 800966a:	6849      	ldr	r1, [r1, #4]
 800966c:	e7cc      	b.n	8009608 <_malloc_r+0x2c>
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d005      	beq.n	8009684 <_malloc_r+0xa8>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4630      	mov	r0, r6
 800967c:	f000 fc64 	bl	8009f48 <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d0cf      	beq.n	8009624 <_malloc_r+0x48>
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	e7db      	b.n	8009640 <_malloc_r+0x64>
 8009688:	20001b50 	.word	0x20001b50
 800968c:	20001b54 	.word	0x20001b54

08009690 <__cvt>:
 8009690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	ec55 4b10 	vmov	r4, r5, d0
 8009698:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800969a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800969e:	2d00      	cmp	r5, #0
 80096a0:	460e      	mov	r6, r1
 80096a2:	4691      	mov	r9, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	bfb8      	it	lt
 80096a8:	4622      	movlt	r2, r4
 80096aa:	462b      	mov	r3, r5
 80096ac:	f027 0720 	bic.w	r7, r7, #32
 80096b0:	bfbb      	ittet	lt
 80096b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096b6:	461d      	movlt	r5, r3
 80096b8:	2300      	movge	r3, #0
 80096ba:	232d      	movlt	r3, #45	; 0x2d
 80096bc:	bfb8      	it	lt
 80096be:	4614      	movlt	r4, r2
 80096c0:	2f46      	cmp	r7, #70	; 0x46
 80096c2:	700b      	strb	r3, [r1, #0]
 80096c4:	d004      	beq.n	80096d0 <__cvt+0x40>
 80096c6:	2f45      	cmp	r7, #69	; 0x45
 80096c8:	d100      	bne.n	80096cc <__cvt+0x3c>
 80096ca:	3601      	adds	r6, #1
 80096cc:	2102      	movs	r1, #2
 80096ce:	e000      	b.n	80096d2 <__cvt+0x42>
 80096d0:	2103      	movs	r1, #3
 80096d2:	ab03      	add	r3, sp, #12
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	ab02      	add	r3, sp, #8
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4632      	mov	r2, r6
 80096dc:	4653      	mov	r3, sl
 80096de:	ec45 4b10 	vmov	d0, r4, r5
 80096e2:	f000 fd81 	bl	800a1e8 <_dtoa_r>
 80096e6:	2f47      	cmp	r7, #71	; 0x47
 80096e8:	4680      	mov	r8, r0
 80096ea:	d102      	bne.n	80096f2 <__cvt+0x62>
 80096ec:	f019 0f01 	tst.w	r9, #1
 80096f0:	d026      	beq.n	8009740 <__cvt+0xb0>
 80096f2:	2f46      	cmp	r7, #70	; 0x46
 80096f4:	eb08 0906 	add.w	r9, r8, r6
 80096f8:	d111      	bne.n	800971e <__cvt+0x8e>
 80096fa:	f898 3000 	ldrb.w	r3, [r8]
 80096fe:	2b30      	cmp	r3, #48	; 0x30
 8009700:	d10a      	bne.n	8009718 <__cvt+0x88>
 8009702:	2200      	movs	r2, #0
 8009704:	2300      	movs	r3, #0
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f7 f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800970e:	b918      	cbnz	r0, 8009718 <__cvt+0x88>
 8009710:	f1c6 0601 	rsb	r6, r6, #1
 8009714:	f8ca 6000 	str.w	r6, [sl]
 8009718:	f8da 3000 	ldr.w	r3, [sl]
 800971c:	4499      	add	r9, r3
 800971e:	2200      	movs	r2, #0
 8009720:	2300      	movs	r3, #0
 8009722:	4620      	mov	r0, r4
 8009724:	4629      	mov	r1, r5
 8009726:	f7f7 f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800972a:	b938      	cbnz	r0, 800973c <__cvt+0xac>
 800972c:	2230      	movs	r2, #48	; 0x30
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	454b      	cmp	r3, r9
 8009732:	d205      	bcs.n	8009740 <__cvt+0xb0>
 8009734:	1c59      	adds	r1, r3, #1
 8009736:	9103      	str	r1, [sp, #12]
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e7f8      	b.n	800972e <__cvt+0x9e>
 800973c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009744:	eba3 0308 	sub.w	r3, r3, r8
 8009748:	4640      	mov	r0, r8
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009752 <__exponent>:
 8009752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009754:	2900      	cmp	r1, #0
 8009756:	4604      	mov	r4, r0
 8009758:	bfba      	itte	lt
 800975a:	4249      	neglt	r1, r1
 800975c:	232d      	movlt	r3, #45	; 0x2d
 800975e:	232b      	movge	r3, #43	; 0x2b
 8009760:	2909      	cmp	r1, #9
 8009762:	f804 2b02 	strb.w	r2, [r4], #2
 8009766:	7043      	strb	r3, [r0, #1]
 8009768:	dd20      	ble.n	80097ac <__exponent+0x5a>
 800976a:	f10d 0307 	add.w	r3, sp, #7
 800976e:	461f      	mov	r7, r3
 8009770:	260a      	movs	r6, #10
 8009772:	fb91 f5f6 	sdiv	r5, r1, r6
 8009776:	fb06 1115 	mls	r1, r6, r5, r1
 800977a:	3130      	adds	r1, #48	; 0x30
 800977c:	2d09      	cmp	r5, #9
 800977e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009782:	f103 32ff 	add.w	r2, r3, #4294967295
 8009786:	4629      	mov	r1, r5
 8009788:	dc09      	bgt.n	800979e <__exponent+0x4c>
 800978a:	3130      	adds	r1, #48	; 0x30
 800978c:	3b02      	subs	r3, #2
 800978e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009792:	42bb      	cmp	r3, r7
 8009794:	4622      	mov	r2, r4
 8009796:	d304      	bcc.n	80097a2 <__exponent+0x50>
 8009798:	1a10      	subs	r0, r2, r0
 800979a:	b003      	add	sp, #12
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	4613      	mov	r3, r2
 80097a0:	e7e7      	b.n	8009772 <__exponent+0x20>
 80097a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a6:	f804 2b01 	strb.w	r2, [r4], #1
 80097aa:	e7f2      	b.n	8009792 <__exponent+0x40>
 80097ac:	2330      	movs	r3, #48	; 0x30
 80097ae:	4419      	add	r1, r3
 80097b0:	7083      	strb	r3, [r0, #2]
 80097b2:	1d02      	adds	r2, r0, #4
 80097b4:	70c1      	strb	r1, [r0, #3]
 80097b6:	e7ef      	b.n	8009798 <__exponent+0x46>

080097b8 <_printf_float>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	b08d      	sub	sp, #52	; 0x34
 80097be:	460c      	mov	r4, r1
 80097c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80097c4:	4616      	mov	r6, r2
 80097c6:	461f      	mov	r7, r3
 80097c8:	4605      	mov	r5, r0
 80097ca:	f001 fac9 	bl	800ad60 <_localeconv_r>
 80097ce:	6803      	ldr	r3, [r0, #0]
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7f6 fd04 	bl	80001e0 <strlen>
 80097d8:	2300      	movs	r3, #0
 80097da:	930a      	str	r3, [sp, #40]	; 0x28
 80097dc:	f8d8 3000 	ldr.w	r3, [r8]
 80097e0:	9005      	str	r0, [sp, #20]
 80097e2:	3307      	adds	r3, #7
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	f103 0208 	add.w	r2, r3, #8
 80097ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80097f0:	f8d4 b000 	ldr.w	fp, [r4]
 80097f4:	f8c8 2000 	str.w	r2, [r8]
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009800:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009804:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009808:	9307      	str	r3, [sp, #28]
 800980a:	f8cd 8018 	str.w	r8, [sp, #24]
 800980e:	f04f 32ff 	mov.w	r2, #4294967295
 8009812:	4ba7      	ldr	r3, [pc, #668]	; (8009ab0 <_printf_float+0x2f8>)
 8009814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009818:	f7f7 f990 	bl	8000b3c <__aeabi_dcmpun>
 800981c:	bb70      	cbnz	r0, 800987c <_printf_float+0xc4>
 800981e:	f04f 32ff 	mov.w	r2, #4294967295
 8009822:	4ba3      	ldr	r3, [pc, #652]	; (8009ab0 <_printf_float+0x2f8>)
 8009824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009828:	f7f7 f96a 	bl	8000b00 <__aeabi_dcmple>
 800982c:	bb30      	cbnz	r0, 800987c <_printf_float+0xc4>
 800982e:	2200      	movs	r2, #0
 8009830:	2300      	movs	r3, #0
 8009832:	4640      	mov	r0, r8
 8009834:	4649      	mov	r1, r9
 8009836:	f7f7 f959 	bl	8000aec <__aeabi_dcmplt>
 800983a:	b110      	cbz	r0, 8009842 <_printf_float+0x8a>
 800983c:	232d      	movs	r3, #45	; 0x2d
 800983e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009842:	4a9c      	ldr	r2, [pc, #624]	; (8009ab4 <_printf_float+0x2fc>)
 8009844:	4b9c      	ldr	r3, [pc, #624]	; (8009ab8 <_printf_float+0x300>)
 8009846:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800984a:	bf8c      	ite	hi
 800984c:	4690      	movhi	r8, r2
 800984e:	4698      	movls	r8, r3
 8009850:	2303      	movs	r3, #3
 8009852:	f02b 0204 	bic.w	r2, fp, #4
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	6022      	str	r2, [r4, #0]
 800985a:	f04f 0900 	mov.w	r9, #0
 800985e:	9700      	str	r7, [sp, #0]
 8009860:	4633      	mov	r3, r6
 8009862:	aa0b      	add	r2, sp, #44	; 0x2c
 8009864:	4621      	mov	r1, r4
 8009866:	4628      	mov	r0, r5
 8009868:	f000 f9e6 	bl	8009c38 <_printf_common>
 800986c:	3001      	adds	r0, #1
 800986e:	f040 808d 	bne.w	800998c <_printf_float+0x1d4>
 8009872:	f04f 30ff 	mov.w	r0, #4294967295
 8009876:	b00d      	add	sp, #52	; 0x34
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4642      	mov	r2, r8
 800987e:	464b      	mov	r3, r9
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f7 f95a 	bl	8000b3c <__aeabi_dcmpun>
 8009888:	b110      	cbz	r0, 8009890 <_printf_float+0xd8>
 800988a:	4a8c      	ldr	r2, [pc, #560]	; (8009abc <_printf_float+0x304>)
 800988c:	4b8c      	ldr	r3, [pc, #560]	; (8009ac0 <_printf_float+0x308>)
 800988e:	e7da      	b.n	8009846 <_printf_float+0x8e>
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	1c4b      	adds	r3, r1, #1
 8009894:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009898:	a80a      	add	r0, sp, #40	; 0x28
 800989a:	d13e      	bne.n	800991a <_printf_float+0x162>
 800989c:	2306      	movs	r3, #6
 800989e:	6063      	str	r3, [r4, #4]
 80098a0:	2300      	movs	r3, #0
 80098a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80098a6:	ab09      	add	r3, sp, #36	; 0x24
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	ec49 8b10 	vmov	d0, r8, r9
 80098ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098b2:	6022      	str	r2, [r4, #0]
 80098b4:	f8cd a004 	str.w	sl, [sp, #4]
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7ff fee8 	bl	8009690 <__cvt>
 80098c0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80098c4:	2b47      	cmp	r3, #71	; 0x47
 80098c6:	4680      	mov	r8, r0
 80098c8:	d109      	bne.n	80098de <_printf_float+0x126>
 80098ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098cc:	1cd8      	adds	r0, r3, #3
 80098ce:	db02      	blt.n	80098d6 <_printf_float+0x11e>
 80098d0:	6862      	ldr	r2, [r4, #4]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	dd47      	ble.n	8009966 <_printf_float+0x1ae>
 80098d6:	f1aa 0a02 	sub.w	sl, sl, #2
 80098da:	fa5f fa8a 	uxtb.w	sl, sl
 80098de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80098e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098e4:	d824      	bhi.n	8009930 <_printf_float+0x178>
 80098e6:	3901      	subs	r1, #1
 80098e8:	4652      	mov	r2, sl
 80098ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098ee:	9109      	str	r1, [sp, #36]	; 0x24
 80098f0:	f7ff ff2f 	bl	8009752 <__exponent>
 80098f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f6:	1813      	adds	r3, r2, r0
 80098f8:	2a01      	cmp	r2, #1
 80098fa:	4681      	mov	r9, r0
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	dc02      	bgt.n	8009906 <_printf_float+0x14e>
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	07d1      	lsls	r1, r2, #31
 8009904:	d501      	bpl.n	800990a <_printf_float+0x152>
 8009906:	3301      	adds	r3, #1
 8009908:	6123      	str	r3, [r4, #16]
 800990a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0a5      	beq.n	800985e <_printf_float+0xa6>
 8009912:	232d      	movs	r3, #45	; 0x2d
 8009914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009918:	e7a1      	b.n	800985e <_printf_float+0xa6>
 800991a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800991e:	f000 8177 	beq.w	8009c10 <_printf_float+0x458>
 8009922:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009926:	d1bb      	bne.n	80098a0 <_printf_float+0xe8>
 8009928:	2900      	cmp	r1, #0
 800992a:	d1b9      	bne.n	80098a0 <_printf_float+0xe8>
 800992c:	2301      	movs	r3, #1
 800992e:	e7b6      	b.n	800989e <_printf_float+0xe6>
 8009930:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009934:	d119      	bne.n	800996a <_printf_float+0x1b2>
 8009936:	2900      	cmp	r1, #0
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	dd0c      	ble.n	8009956 <_printf_float+0x19e>
 800993c:	6121      	str	r1, [r4, #16]
 800993e:	b913      	cbnz	r3, 8009946 <_printf_float+0x18e>
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	07d2      	lsls	r2, r2, #31
 8009944:	d502      	bpl.n	800994c <_printf_float+0x194>
 8009946:	3301      	adds	r3, #1
 8009948:	440b      	add	r3, r1
 800994a:	6123      	str	r3, [r4, #16]
 800994c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009950:	f04f 0900 	mov.w	r9, #0
 8009954:	e7d9      	b.n	800990a <_printf_float+0x152>
 8009956:	b913      	cbnz	r3, 800995e <_printf_float+0x1a6>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	07d0      	lsls	r0, r2, #31
 800995c:	d501      	bpl.n	8009962 <_printf_float+0x1aa>
 800995e:	3302      	adds	r3, #2
 8009960:	e7f3      	b.n	800994a <_printf_float+0x192>
 8009962:	2301      	movs	r3, #1
 8009964:	e7f1      	b.n	800994a <_printf_float+0x192>
 8009966:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800996a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800996e:	4293      	cmp	r3, r2
 8009970:	db05      	blt.n	800997e <_printf_float+0x1c6>
 8009972:	6822      	ldr	r2, [r4, #0]
 8009974:	6123      	str	r3, [r4, #16]
 8009976:	07d1      	lsls	r1, r2, #31
 8009978:	d5e8      	bpl.n	800994c <_printf_float+0x194>
 800997a:	3301      	adds	r3, #1
 800997c:	e7e5      	b.n	800994a <_printf_float+0x192>
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfd4      	ite	le
 8009982:	f1c3 0302 	rsble	r3, r3, #2
 8009986:	2301      	movgt	r3, #1
 8009988:	4413      	add	r3, r2
 800998a:	e7de      	b.n	800994a <_printf_float+0x192>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	055a      	lsls	r2, r3, #21
 8009990:	d407      	bmi.n	80099a2 <_printf_float+0x1ea>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	4642      	mov	r2, r8
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	d12b      	bne.n	80099f8 <_printf_float+0x240>
 80099a0:	e767      	b.n	8009872 <_printf_float+0xba>
 80099a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80099a6:	f240 80dc 	bls.w	8009b62 <_printf_float+0x3aa>
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b2:	f7f7 f891 	bl	8000ad8 <__aeabi_dcmpeq>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d033      	beq.n	8009a22 <_printf_float+0x26a>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4a41      	ldr	r2, [pc, #260]	; (8009ac4 <_printf_float+0x30c>)
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	f43f af54 	beq.w	8009872 <_printf_float+0xba>
 80099ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ce:	429a      	cmp	r2, r3
 80099d0:	db02      	blt.n	80099d8 <_printf_float+0x220>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	07d8      	lsls	r0, r3, #31
 80099d6:	d50f      	bpl.n	80099f8 <_printf_float+0x240>
 80099d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f af45 	beq.w	8009872 <_printf_float+0xba>
 80099e8:	f04f 0800 	mov.w	r8, #0
 80099ec:	f104 091a 	add.w	r9, r4, #26
 80099f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099f2:	3b01      	subs	r3, #1
 80099f4:	4543      	cmp	r3, r8
 80099f6:	dc09      	bgt.n	8009a0c <_printf_float+0x254>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	079b      	lsls	r3, r3, #30
 80099fc:	f100 8103 	bmi.w	8009c06 <_printf_float+0x44e>
 8009a00:	68e0      	ldr	r0, [r4, #12]
 8009a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a04:	4298      	cmp	r0, r3
 8009a06:	bfb8      	it	lt
 8009a08:	4618      	movlt	r0, r3
 8009a0a:	e734      	b.n	8009876 <_printf_float+0xbe>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	464a      	mov	r2, r9
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f af2b 	beq.w	8009872 <_printf_float+0xba>
 8009a1c:	f108 0801 	add.w	r8, r8, #1
 8009a20:	e7e6      	b.n	80099f0 <_printf_float+0x238>
 8009a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dc2b      	bgt.n	8009a80 <_printf_float+0x2c8>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4a26      	ldr	r2, [pc, #152]	; (8009ac4 <_printf_float+0x30c>)
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f af1d 	beq.w	8009872 <_printf_float+0xba>
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	b923      	cbnz	r3, 8009a46 <_printf_float+0x28e>
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3e:	b913      	cbnz	r3, 8009a46 <_printf_float+0x28e>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	07d9      	lsls	r1, r3, #31
 8009a44:	d5d8      	bpl.n	80099f8 <_printf_float+0x240>
 8009a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f af0e 	beq.w	8009872 <_printf_float+0xba>
 8009a56:	f04f 0900 	mov.w	r9, #0
 8009a5a:	f104 0a1a 	add.w	sl, r4, #26
 8009a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a60:	425b      	negs	r3, r3
 8009a62:	454b      	cmp	r3, r9
 8009a64:	dc01      	bgt.n	8009a6a <_printf_float+0x2b2>
 8009a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a68:	e794      	b.n	8009994 <_printf_float+0x1dc>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f aefc 	beq.w	8009872 <_printf_float+0xba>
 8009a7a:	f109 0901 	add.w	r9, r9, #1
 8009a7e:	e7ee      	b.n	8009a5e <_printf_float+0x2a6>
 8009a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a84:	429a      	cmp	r2, r3
 8009a86:	bfa8      	it	ge
 8009a88:	461a      	movge	r2, r3
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	4691      	mov	r9, r2
 8009a8e:	dd07      	ble.n	8009aa0 <_printf_float+0x2e8>
 8009a90:	4613      	mov	r3, r2
 8009a92:	4631      	mov	r1, r6
 8009a94:	4642      	mov	r2, r8
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	f43f aee9 	beq.w	8009872 <_printf_float+0xba>
 8009aa0:	f104 031a 	add.w	r3, r4, #26
 8009aa4:	f04f 0b00 	mov.w	fp, #0
 8009aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aac:	9306      	str	r3, [sp, #24]
 8009aae:	e015      	b.n	8009adc <_printf_float+0x324>
 8009ab0:	7fefffff 	.word	0x7fefffff
 8009ab4:	0800b810 	.word	0x0800b810
 8009ab8:	0800b80c 	.word	0x0800b80c
 8009abc:	0800b818 	.word	0x0800b818
 8009ac0:	0800b814 	.word	0x0800b814
 8009ac4:	0800b81c 	.word	0x0800b81c
 8009ac8:	2301      	movs	r3, #1
 8009aca:	9a06      	ldr	r2, [sp, #24]
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f43f aecd 	beq.w	8009872 <_printf_float+0xba>
 8009ad8:	f10b 0b01 	add.w	fp, fp, #1
 8009adc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ae0:	ebaa 0309 	sub.w	r3, sl, r9
 8009ae4:	455b      	cmp	r3, fp
 8009ae6:	dcef      	bgt.n	8009ac8 <_printf_float+0x310>
 8009ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aec:	429a      	cmp	r2, r3
 8009aee:	44d0      	add	r8, sl
 8009af0:	db15      	blt.n	8009b1e <_printf_float+0x366>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	07da      	lsls	r2, r3, #31
 8009af6:	d412      	bmi.n	8009b1e <_printf_float+0x366>
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009afc:	eba3 020a 	sub.w	r2, r3, sl
 8009b00:	eba3 0a01 	sub.w	sl, r3, r1
 8009b04:	4592      	cmp	sl, r2
 8009b06:	bfa8      	it	ge
 8009b08:	4692      	movge	sl, r2
 8009b0a:	f1ba 0f00 	cmp.w	sl, #0
 8009b0e:	dc0e      	bgt.n	8009b2e <_printf_float+0x376>
 8009b10:	f04f 0800 	mov.w	r8, #0
 8009b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b18:	f104 091a 	add.w	r9, r4, #26
 8009b1c:	e019      	b.n	8009b52 <_printf_float+0x39a>
 8009b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b22:	4631      	mov	r1, r6
 8009b24:	4628      	mov	r0, r5
 8009b26:	47b8      	blx	r7
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d1e5      	bne.n	8009af8 <_printf_float+0x340>
 8009b2c:	e6a1      	b.n	8009872 <_printf_float+0xba>
 8009b2e:	4653      	mov	r3, sl
 8009b30:	4642      	mov	r2, r8
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1e9      	bne.n	8009b10 <_printf_float+0x358>
 8009b3c:	e699      	b.n	8009872 <_printf_float+0xba>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	464a      	mov	r2, r9
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f ae92 	beq.w	8009872 <_printf_float+0xba>
 8009b4e:	f108 0801 	add.w	r8, r8, #1
 8009b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	eba3 030a 	sub.w	r3, r3, sl
 8009b5c:	4543      	cmp	r3, r8
 8009b5e:	dcee      	bgt.n	8009b3e <_printf_float+0x386>
 8009b60:	e74a      	b.n	80099f8 <_printf_float+0x240>
 8009b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b64:	2a01      	cmp	r2, #1
 8009b66:	dc01      	bgt.n	8009b6c <_printf_float+0x3b4>
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	d53a      	bpl.n	8009be2 <_printf_float+0x42a>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4642      	mov	r2, r8
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f ae7b 	beq.w	8009872 <_printf_float+0xba>
 8009b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f108 0801 	add.w	r8, r8, #1
 8009b8c:	f43f ae71 	beq.w	8009872 <_printf_float+0xba>
 8009b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b92:	2200      	movs	r2, #0
 8009b94:	f103 3aff 	add.w	sl, r3, #4294967295
 8009b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f7f6 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ba2:	b9c8      	cbnz	r0, 8009bd8 <_printf_float+0x420>
 8009ba4:	4653      	mov	r3, sl
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d10e      	bne.n	8009bd0 <_printf_float+0x418>
 8009bb2:	e65e      	b.n	8009872 <_printf_float+0xba>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4652      	mov	r2, sl
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f ae57 	beq.w	8009872 <_printf_float+0xba>
 8009bc4:	f108 0801 	add.w	r8, r8, #1
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	4543      	cmp	r3, r8
 8009bce:	dcf1      	bgt.n	8009bb4 <_printf_float+0x3fc>
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd6:	e6de      	b.n	8009996 <_printf_float+0x1de>
 8009bd8:	f04f 0800 	mov.w	r8, #0
 8009bdc:	f104 0a1a 	add.w	sl, r4, #26
 8009be0:	e7f2      	b.n	8009bc8 <_printf_float+0x410>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e7df      	b.n	8009ba6 <_printf_float+0x3ee>
 8009be6:	2301      	movs	r3, #1
 8009be8:	464a      	mov	r2, r9
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae3e 	beq.w	8009872 <_printf_float+0xba>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	4543      	cmp	r3, r8
 8009c02:	dcf0      	bgt.n	8009be6 <_printf_float+0x42e>
 8009c04:	e6fc      	b.n	8009a00 <_printf_float+0x248>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	f104 0919 	add.w	r9, r4, #25
 8009c0e:	e7f4      	b.n	8009bfa <_printf_float+0x442>
 8009c10:	2900      	cmp	r1, #0
 8009c12:	f43f ae8b 	beq.w	800992c <_printf_float+0x174>
 8009c16:	2300      	movs	r3, #0
 8009c18:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009c1c:	ab09      	add	r3, sp, #36	; 0x24
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	ec49 8b10 	vmov	d0, r8, r9
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	f8cd a004 	str.w	sl, [sp, #4]
 8009c2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f7ff fd2e 	bl	8009690 <__cvt>
 8009c34:	4680      	mov	r8, r0
 8009c36:	e648      	b.n	80098ca <_printf_float+0x112>

08009c38 <_printf_common>:
 8009c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3c:	4691      	mov	r9, r2
 8009c3e:	461f      	mov	r7, r3
 8009c40:	688a      	ldr	r2, [r1, #8]
 8009c42:	690b      	ldr	r3, [r1, #16]
 8009c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bfb8      	it	lt
 8009c4c:	4613      	movlt	r3, r2
 8009c4e:	f8c9 3000 	str.w	r3, [r9]
 8009c52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c56:	4606      	mov	r6, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	b112      	cbz	r2, 8009c62 <_printf_common+0x2a>
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	f8c9 3000 	str.w	r3, [r9]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	0699      	lsls	r1, r3, #26
 8009c66:	bf42      	ittt	mi
 8009c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c6c:	3302      	addmi	r3, #2
 8009c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	f015 0506 	ands.w	r5, r5, #6
 8009c78:	d107      	bne.n	8009c8a <_printf_common+0x52>
 8009c7a:	f104 0a19 	add.w	sl, r4, #25
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	f8d9 2000 	ldr.w	r2, [r9]
 8009c84:	1a9b      	subs	r3, r3, r2
 8009c86:	42ab      	cmp	r3, r5
 8009c88:	dc28      	bgt.n	8009cdc <_printf_common+0xa4>
 8009c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	3300      	adds	r3, #0
 8009c92:	bf18      	it	ne
 8009c94:	2301      	movne	r3, #1
 8009c96:	0692      	lsls	r2, r2, #26
 8009c98:	d42d      	bmi.n	8009cf6 <_printf_common+0xbe>
 8009c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	47c0      	blx	r8
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d020      	beq.n	8009cea <_printf_common+0xb2>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	68e5      	ldr	r5, [r4, #12]
 8009cac:	f8d9 2000 	ldr.w	r2, [r9]
 8009cb0:	f003 0306 	and.w	r3, r3, #6
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	bf08      	it	eq
 8009cb8:	1aad      	subeq	r5, r5, r2
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	6922      	ldr	r2, [r4, #16]
 8009cbe:	bf0c      	ite	eq
 8009cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc4:	2500      	movne	r5, #0
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	bfc4      	itt	gt
 8009cca:	1a9b      	subgt	r3, r3, r2
 8009ccc:	18ed      	addgt	r5, r5, r3
 8009cce:	f04f 0900 	mov.w	r9, #0
 8009cd2:	341a      	adds	r4, #26
 8009cd4:	454d      	cmp	r5, r9
 8009cd6:	d11a      	bne.n	8009d0e <_printf_common+0xd6>
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e008      	b.n	8009cee <_printf_common+0xb6>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	4652      	mov	r2, sl
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	47c0      	blx	r8
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d103      	bne.n	8009cf2 <_printf_common+0xba>
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	3501      	adds	r5, #1
 8009cf4:	e7c3      	b.n	8009c7e <_printf_common+0x46>
 8009cf6:	18e1      	adds	r1, r4, r3
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	2030      	movs	r0, #48	; 0x30
 8009cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d00:	4422      	add	r2, r4
 8009d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0a:	3302      	adds	r3, #2
 8009d0c:	e7c5      	b.n	8009c9a <_printf_common+0x62>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4622      	mov	r2, r4
 8009d12:	4639      	mov	r1, r7
 8009d14:	4630      	mov	r0, r6
 8009d16:	47c0      	blx	r8
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0e6      	beq.n	8009cea <_printf_common+0xb2>
 8009d1c:	f109 0901 	add.w	r9, r9, #1
 8009d20:	e7d8      	b.n	8009cd4 <_printf_common+0x9c>
	...

08009d24 <_printf_i>:
 8009d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	7e09      	ldrb	r1, [r1, #24]
 8009d30:	b085      	sub	sp, #20
 8009d32:	296e      	cmp	r1, #110	; 0x6e
 8009d34:	4617      	mov	r7, r2
 8009d36:	4606      	mov	r6, r0
 8009d38:	4698      	mov	r8, r3
 8009d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d3c:	f000 80b3 	beq.w	8009ea6 <_printf_i+0x182>
 8009d40:	d822      	bhi.n	8009d88 <_printf_i+0x64>
 8009d42:	2963      	cmp	r1, #99	; 0x63
 8009d44:	d036      	beq.n	8009db4 <_printf_i+0x90>
 8009d46:	d80a      	bhi.n	8009d5e <_printf_i+0x3a>
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	f000 80b9 	beq.w	8009ec0 <_printf_i+0x19c>
 8009d4e:	2958      	cmp	r1, #88	; 0x58
 8009d50:	f000 8083 	beq.w	8009e5a <_printf_i+0x136>
 8009d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d5c:	e032      	b.n	8009dc4 <_printf_i+0xa0>
 8009d5e:	2964      	cmp	r1, #100	; 0x64
 8009d60:	d001      	beq.n	8009d66 <_printf_i+0x42>
 8009d62:	2969      	cmp	r1, #105	; 0x69
 8009d64:	d1f6      	bne.n	8009d54 <_printf_i+0x30>
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	6813      	ldr	r3, [r2, #0]
 8009d6a:	0605      	lsls	r5, r0, #24
 8009d6c:	f103 0104 	add.w	r1, r3, #4
 8009d70:	d52a      	bpl.n	8009dc8 <_printf_i+0xa4>
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da03      	bge.n	8009d82 <_printf_i+0x5e>
 8009d7a:	222d      	movs	r2, #45	; 0x2d
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d82:	486f      	ldr	r0, [pc, #444]	; (8009f40 <_printf_i+0x21c>)
 8009d84:	220a      	movs	r2, #10
 8009d86:	e039      	b.n	8009dfc <_printf_i+0xd8>
 8009d88:	2973      	cmp	r1, #115	; 0x73
 8009d8a:	f000 809d 	beq.w	8009ec8 <_printf_i+0x1a4>
 8009d8e:	d808      	bhi.n	8009da2 <_printf_i+0x7e>
 8009d90:	296f      	cmp	r1, #111	; 0x6f
 8009d92:	d020      	beq.n	8009dd6 <_printf_i+0xb2>
 8009d94:	2970      	cmp	r1, #112	; 0x70
 8009d96:	d1dd      	bne.n	8009d54 <_printf_i+0x30>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	f043 0320 	orr.w	r3, r3, #32
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	e003      	b.n	8009daa <_printf_i+0x86>
 8009da2:	2975      	cmp	r1, #117	; 0x75
 8009da4:	d017      	beq.n	8009dd6 <_printf_i+0xb2>
 8009da6:	2978      	cmp	r1, #120	; 0x78
 8009da8:	d1d4      	bne.n	8009d54 <_printf_i+0x30>
 8009daa:	2378      	movs	r3, #120	; 0x78
 8009dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009db0:	4864      	ldr	r0, [pc, #400]	; (8009f44 <_printf_i+0x220>)
 8009db2:	e055      	b.n	8009e60 <_printf_i+0x13c>
 8009db4:	6813      	ldr	r3, [r2, #0]
 8009db6:	1d19      	adds	r1, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6011      	str	r1, [r2, #0]
 8009dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e08c      	b.n	8009ee2 <_printf_i+0x1be>
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6011      	str	r1, [r2, #0]
 8009dcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dd0:	bf18      	it	ne
 8009dd2:	b21b      	sxthne	r3, r3
 8009dd4:	e7cf      	b.n	8009d76 <_printf_i+0x52>
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	6825      	ldr	r5, [r4, #0]
 8009dda:	1d18      	adds	r0, r3, #4
 8009ddc:	6010      	str	r0, [r2, #0]
 8009dde:	0628      	lsls	r0, r5, #24
 8009de0:	d501      	bpl.n	8009de6 <_printf_i+0xc2>
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	e002      	b.n	8009dec <_printf_i+0xc8>
 8009de6:	0668      	lsls	r0, r5, #25
 8009de8:	d5fb      	bpl.n	8009de2 <_printf_i+0xbe>
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	4854      	ldr	r0, [pc, #336]	; (8009f40 <_printf_i+0x21c>)
 8009dee:	296f      	cmp	r1, #111	; 0x6f
 8009df0:	bf14      	ite	ne
 8009df2:	220a      	movne	r2, #10
 8009df4:	2208      	moveq	r2, #8
 8009df6:	2100      	movs	r1, #0
 8009df8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dfc:	6865      	ldr	r5, [r4, #4]
 8009dfe:	60a5      	str	r5, [r4, #8]
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	f2c0 8095 	blt.w	8009f30 <_printf_i+0x20c>
 8009e06:	6821      	ldr	r1, [r4, #0]
 8009e08:	f021 0104 	bic.w	r1, r1, #4
 8009e0c:	6021      	str	r1, [r4, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d13d      	bne.n	8009e8e <_printf_i+0x16a>
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	f040 808e 	bne.w	8009f34 <_printf_i+0x210>
 8009e18:	4665      	mov	r5, ip
 8009e1a:	2a08      	cmp	r2, #8
 8009e1c:	d10b      	bne.n	8009e36 <_printf_i+0x112>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	07db      	lsls	r3, r3, #31
 8009e22:	d508      	bpl.n	8009e36 <_printf_i+0x112>
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	6862      	ldr	r2, [r4, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	bfde      	ittt	le
 8009e2c:	2330      	movle	r3, #48	; 0x30
 8009e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e36:	ebac 0305 	sub.w	r3, ip, r5
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	f8cd 8000 	str.w	r8, [sp]
 8009e40:	463b      	mov	r3, r7
 8009e42:	aa03      	add	r2, sp, #12
 8009e44:	4621      	mov	r1, r4
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff fef6 	bl	8009c38 <_printf_common>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d14d      	bne.n	8009eec <_printf_i+0x1c8>
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	b005      	add	sp, #20
 8009e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e5a:	4839      	ldr	r0, [pc, #228]	; (8009f40 <_printf_i+0x21c>)
 8009e5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e60:	6813      	ldr	r3, [r2, #0]
 8009e62:	6821      	ldr	r1, [r4, #0]
 8009e64:	1d1d      	adds	r5, r3, #4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6015      	str	r5, [r2, #0]
 8009e6a:	060a      	lsls	r2, r1, #24
 8009e6c:	d50b      	bpl.n	8009e86 <_printf_i+0x162>
 8009e6e:	07ca      	lsls	r2, r1, #31
 8009e70:	bf44      	itt	mi
 8009e72:	f041 0120 	orrmi.w	r1, r1, #32
 8009e76:	6021      	strmi	r1, [r4, #0]
 8009e78:	b91b      	cbnz	r3, 8009e82 <_printf_i+0x15e>
 8009e7a:	6822      	ldr	r2, [r4, #0]
 8009e7c:	f022 0220 	bic.w	r2, r2, #32
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	2210      	movs	r2, #16
 8009e84:	e7b7      	b.n	8009df6 <_printf_i+0xd2>
 8009e86:	064d      	lsls	r5, r1, #25
 8009e88:	bf48      	it	mi
 8009e8a:	b29b      	uxthmi	r3, r3
 8009e8c:	e7ef      	b.n	8009e6e <_printf_i+0x14a>
 8009e8e:	4665      	mov	r5, ip
 8009e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e94:	fb02 3311 	mls	r3, r2, r1, r3
 8009e98:	5cc3      	ldrb	r3, [r0, r3]
 8009e9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	2900      	cmp	r1, #0
 8009ea2:	d1f5      	bne.n	8009e90 <_printf_i+0x16c>
 8009ea4:	e7b9      	b.n	8009e1a <_printf_i+0xf6>
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	6825      	ldr	r5, [r4, #0]
 8009eaa:	6961      	ldr	r1, [r4, #20]
 8009eac:	1d18      	adds	r0, r3, #4
 8009eae:	6010      	str	r0, [r2, #0]
 8009eb0:	0628      	lsls	r0, r5, #24
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	d501      	bpl.n	8009eba <_printf_i+0x196>
 8009eb6:	6019      	str	r1, [r3, #0]
 8009eb8:	e002      	b.n	8009ec0 <_printf_i+0x19c>
 8009eba:	066a      	lsls	r2, r5, #25
 8009ebc:	d5fb      	bpl.n	8009eb6 <_printf_i+0x192>
 8009ebe:	8019      	strh	r1, [r3, #0]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	4665      	mov	r5, ip
 8009ec6:	e7b9      	b.n	8009e3c <_printf_i+0x118>
 8009ec8:	6813      	ldr	r3, [r2, #0]
 8009eca:	1d19      	adds	r1, r3, #4
 8009ecc:	6011      	str	r1, [r2, #0]
 8009ece:	681d      	ldr	r5, [r3, #0]
 8009ed0:	6862      	ldr	r2, [r4, #4]
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7f6 f98b 	bl	80001f0 <memchr>
 8009eda:	b108      	cbz	r0, 8009ee0 <_printf_i+0x1bc>
 8009edc:	1b40      	subs	r0, r0, r5
 8009ede:	6060      	str	r0, [r4, #4]
 8009ee0:	6863      	ldr	r3, [r4, #4]
 8009ee2:	6123      	str	r3, [r4, #16]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eea:	e7a7      	b.n	8009e3c <_printf_i+0x118>
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	462a      	mov	r2, r5
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d0aa      	beq.n	8009e50 <_printf_i+0x12c>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	079b      	lsls	r3, r3, #30
 8009efe:	d413      	bmi.n	8009f28 <_printf_i+0x204>
 8009f00:	68e0      	ldr	r0, [r4, #12]
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	4298      	cmp	r0, r3
 8009f06:	bfb8      	it	lt
 8009f08:	4618      	movlt	r0, r3
 8009f0a:	e7a3      	b.n	8009e54 <_printf_i+0x130>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	464a      	mov	r2, r9
 8009f10:	4639      	mov	r1, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	47c0      	blx	r8
 8009f16:	3001      	adds	r0, #1
 8009f18:	d09a      	beq.n	8009e50 <_printf_i+0x12c>
 8009f1a:	3501      	adds	r5, #1
 8009f1c:	68e3      	ldr	r3, [r4, #12]
 8009f1e:	9a03      	ldr	r2, [sp, #12]
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	42ab      	cmp	r3, r5
 8009f24:	dcf2      	bgt.n	8009f0c <_printf_i+0x1e8>
 8009f26:	e7eb      	b.n	8009f00 <_printf_i+0x1dc>
 8009f28:	2500      	movs	r5, #0
 8009f2a:	f104 0919 	add.w	r9, r4, #25
 8009f2e:	e7f5      	b.n	8009f1c <_printf_i+0x1f8>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1ac      	bne.n	8009e8e <_printf_i+0x16a>
 8009f34:	7803      	ldrb	r3, [r0, #0]
 8009f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f3e:	e76c      	b.n	8009e1a <_printf_i+0xf6>
 8009f40:	0800b81e 	.word	0x0800b81e
 8009f44:	0800b82f 	.word	0x0800b82f

08009f48 <_sbrk_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4c06      	ldr	r4, [pc, #24]	; (8009f64 <_sbrk_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4605      	mov	r5, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	f7f8 f894 	bl	8002080 <_sbrk>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_sbrk_r+0x1a>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_sbrk_r+0x1a>
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	20001e08 	.word	0x20001e08

08009f68 <siprintf>:
 8009f68:	b40e      	push	{r1, r2, r3}
 8009f6a:	b500      	push	{lr}
 8009f6c:	b09c      	sub	sp, #112	; 0x70
 8009f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f70:	9002      	str	r0, [sp, #8]
 8009f72:	9006      	str	r0, [sp, #24]
 8009f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f78:	4809      	ldr	r0, [pc, #36]	; (8009fa0 <siprintf+0x38>)
 8009f7a:	9107      	str	r1, [sp, #28]
 8009f7c:	9104      	str	r1, [sp, #16]
 8009f7e:	4909      	ldr	r1, [pc, #36]	; (8009fa4 <siprintf+0x3c>)
 8009f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f84:	9105      	str	r1, [sp, #20]
 8009f86:	6800      	ldr	r0, [r0, #0]
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	a902      	add	r1, sp, #8
 8009f8c:	f001 fa4e 	bl	800b42c <_svfiprintf_r>
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	b01c      	add	sp, #112	; 0x70
 8009f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f9c:	b003      	add	sp, #12
 8009f9e:	4770      	bx	lr
 8009fa0:	20000010 	.word	0x20000010
 8009fa4:	ffff0208 	.word	0xffff0208

08009fa8 <_strtol_l.isra.0>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	4680      	mov	r8, r0
 8009fae:	4689      	mov	r9, r1
 8009fb0:	4692      	mov	sl, r2
 8009fb2:	461e      	mov	r6, r3
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	463d      	mov	r5, r7
 8009fb8:	9808      	ldr	r0, [sp, #32]
 8009fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fbe:	f000 fecb 	bl	800ad58 <__locale_ctype_ptr_l>
 8009fc2:	4420      	add	r0, r4
 8009fc4:	7843      	ldrb	r3, [r0, #1]
 8009fc6:	f013 0308 	ands.w	r3, r3, #8
 8009fca:	d132      	bne.n	800a032 <_strtol_l.isra.0+0x8a>
 8009fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8009fce:	d132      	bne.n	800a036 <_strtol_l.isra.0+0x8e>
 8009fd0:	787c      	ldrb	r4, [r7, #1]
 8009fd2:	1cbd      	adds	r5, r7, #2
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	d05d      	beq.n	800a096 <_strtol_l.isra.0+0xee>
 8009fda:	2e10      	cmp	r6, #16
 8009fdc:	d109      	bne.n	8009ff2 <_strtol_l.isra.0+0x4a>
 8009fde:	2c30      	cmp	r4, #48	; 0x30
 8009fe0:	d107      	bne.n	8009ff2 <_strtol_l.isra.0+0x4a>
 8009fe2:	782b      	ldrb	r3, [r5, #0]
 8009fe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fe8:	2b58      	cmp	r3, #88	; 0x58
 8009fea:	d14f      	bne.n	800a08c <_strtol_l.isra.0+0xe4>
 8009fec:	786c      	ldrb	r4, [r5, #1]
 8009fee:	2610      	movs	r6, #16
 8009ff0:	3502      	adds	r5, #2
 8009ff2:	2a00      	cmp	r2, #0
 8009ff4:	bf14      	ite	ne
 8009ff6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009ffa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009ffe:	2700      	movs	r7, #0
 800a000:	fbb1 fcf6 	udiv	ip, r1, r6
 800a004:	4638      	mov	r0, r7
 800a006:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a00a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a00e:	2b09      	cmp	r3, #9
 800a010:	d817      	bhi.n	800a042 <_strtol_l.isra.0+0x9a>
 800a012:	461c      	mov	r4, r3
 800a014:	42a6      	cmp	r6, r4
 800a016:	dd23      	ble.n	800a060 <_strtol_l.isra.0+0xb8>
 800a018:	1c7b      	adds	r3, r7, #1
 800a01a:	d007      	beq.n	800a02c <_strtol_l.isra.0+0x84>
 800a01c:	4584      	cmp	ip, r0
 800a01e:	d31c      	bcc.n	800a05a <_strtol_l.isra.0+0xb2>
 800a020:	d101      	bne.n	800a026 <_strtol_l.isra.0+0x7e>
 800a022:	45a6      	cmp	lr, r4
 800a024:	db19      	blt.n	800a05a <_strtol_l.isra.0+0xb2>
 800a026:	fb00 4006 	mla	r0, r0, r6, r4
 800a02a:	2701      	movs	r7, #1
 800a02c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a030:	e7eb      	b.n	800a00a <_strtol_l.isra.0+0x62>
 800a032:	462f      	mov	r7, r5
 800a034:	e7bf      	b.n	8009fb6 <_strtol_l.isra.0+0xe>
 800a036:	2c2b      	cmp	r4, #43	; 0x2b
 800a038:	bf04      	itt	eq
 800a03a:	1cbd      	addeq	r5, r7, #2
 800a03c:	787c      	ldrbeq	r4, [r7, #1]
 800a03e:	461a      	mov	r2, r3
 800a040:	e7c9      	b.n	8009fd6 <_strtol_l.isra.0+0x2e>
 800a042:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a046:	2b19      	cmp	r3, #25
 800a048:	d801      	bhi.n	800a04e <_strtol_l.isra.0+0xa6>
 800a04a:	3c37      	subs	r4, #55	; 0x37
 800a04c:	e7e2      	b.n	800a014 <_strtol_l.isra.0+0x6c>
 800a04e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a052:	2b19      	cmp	r3, #25
 800a054:	d804      	bhi.n	800a060 <_strtol_l.isra.0+0xb8>
 800a056:	3c57      	subs	r4, #87	; 0x57
 800a058:	e7dc      	b.n	800a014 <_strtol_l.isra.0+0x6c>
 800a05a:	f04f 37ff 	mov.w	r7, #4294967295
 800a05e:	e7e5      	b.n	800a02c <_strtol_l.isra.0+0x84>
 800a060:	1c7b      	adds	r3, r7, #1
 800a062:	d108      	bne.n	800a076 <_strtol_l.isra.0+0xce>
 800a064:	2322      	movs	r3, #34	; 0x22
 800a066:	f8c8 3000 	str.w	r3, [r8]
 800a06a:	4608      	mov	r0, r1
 800a06c:	f1ba 0f00 	cmp.w	sl, #0
 800a070:	d107      	bne.n	800a082 <_strtol_l.isra.0+0xda>
 800a072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a076:	b102      	cbz	r2, 800a07a <_strtol_l.isra.0+0xd2>
 800a078:	4240      	negs	r0, r0
 800a07a:	f1ba 0f00 	cmp.w	sl, #0
 800a07e:	d0f8      	beq.n	800a072 <_strtol_l.isra.0+0xca>
 800a080:	b10f      	cbz	r7, 800a086 <_strtol_l.isra.0+0xde>
 800a082:	f105 39ff 	add.w	r9, r5, #4294967295
 800a086:	f8ca 9000 	str.w	r9, [sl]
 800a08a:	e7f2      	b.n	800a072 <_strtol_l.isra.0+0xca>
 800a08c:	2430      	movs	r4, #48	; 0x30
 800a08e:	2e00      	cmp	r6, #0
 800a090:	d1af      	bne.n	8009ff2 <_strtol_l.isra.0+0x4a>
 800a092:	2608      	movs	r6, #8
 800a094:	e7ad      	b.n	8009ff2 <_strtol_l.isra.0+0x4a>
 800a096:	2c30      	cmp	r4, #48	; 0x30
 800a098:	d0a3      	beq.n	8009fe2 <_strtol_l.isra.0+0x3a>
 800a09a:	260a      	movs	r6, #10
 800a09c:	e7a9      	b.n	8009ff2 <_strtol_l.isra.0+0x4a>
	...

0800a0a0 <strtol>:
 800a0a0:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <strtol+0x24>)
 800a0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a4:	681c      	ldr	r4, [r3, #0]
 800a0a6:	4d08      	ldr	r5, [pc, #32]	; (800a0c8 <strtol+0x28>)
 800a0a8:	6a23      	ldr	r3, [r4, #32]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bf08      	it	eq
 800a0ae:	462b      	moveq	r3, r5
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	460a      	mov	r2, r1
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff ff75 	bl	8009fa8 <_strtol_l.isra.0>
 800a0be:	b003      	add	sp, #12
 800a0c0:	bd30      	pop	{r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000010 	.word	0x20000010
 800a0c8:	20000074 	.word	0x20000074

0800a0cc <quorem>:
 800a0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	6903      	ldr	r3, [r0, #16]
 800a0d2:	690c      	ldr	r4, [r1, #16]
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	f2c0 8082 	blt.w	800a1e0 <quorem+0x114>
 800a0dc:	3c01      	subs	r4, #1
 800a0de:	f101 0714 	add.w	r7, r1, #20
 800a0e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a0e6:	f100 0614 	add.w	r6, r0, #20
 800a0ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a0ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a0f2:	eb06 030c 	add.w	r3, r6, ip
 800a0f6:	3501      	adds	r5, #1
 800a0f8:	eb07 090c 	add.w	r9, r7, ip
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800a102:	b395      	cbz	r5, 800a16a <quorem+0x9e>
 800a104:	f04f 0a00 	mov.w	sl, #0
 800a108:	4638      	mov	r0, r7
 800a10a:	46b6      	mov	lr, r6
 800a10c:	46d3      	mov	fp, sl
 800a10e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a112:	b293      	uxth	r3, r2
 800a114:	fb05 a303 	mla	r3, r5, r3, sl
 800a118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	ebab 0303 	sub.w	r3, fp, r3
 800a122:	0c12      	lsrs	r2, r2, #16
 800a124:	f8de b000 	ldr.w	fp, [lr]
 800a128:	fb05 a202 	mla	r2, r5, r2, sl
 800a12c:	fa13 f38b 	uxtah	r3, r3, fp
 800a130:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a134:	fa1f fb82 	uxth.w	fp, r2
 800a138:	f8de 2000 	ldr.w	r2, [lr]
 800a13c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a144:	b29b      	uxth	r3, r3
 800a146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a14a:	4581      	cmp	r9, r0
 800a14c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a150:	f84e 3b04 	str.w	r3, [lr], #4
 800a154:	d2db      	bcs.n	800a10e <quorem+0x42>
 800a156:	f856 300c 	ldr.w	r3, [r6, ip]
 800a15a:	b933      	cbnz	r3, 800a16a <quorem+0x9e>
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	3b04      	subs	r3, #4
 800a160:	429e      	cmp	r6, r3
 800a162:	461a      	mov	r2, r3
 800a164:	d330      	bcc.n	800a1c8 <quorem+0xfc>
 800a166:	f8c8 4010 	str.w	r4, [r8, #16]
 800a16a:	4640      	mov	r0, r8
 800a16c:	f001 f830 	bl	800b1d0 <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	db25      	blt.n	800a1c0 <quorem+0xf4>
 800a174:	3501      	adds	r5, #1
 800a176:	4630      	mov	r0, r6
 800a178:	f04f 0c00 	mov.w	ip, #0
 800a17c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a180:	f8d0 e000 	ldr.w	lr, [r0]
 800a184:	b293      	uxth	r3, r2
 800a186:	ebac 0303 	sub.w	r3, ip, r3
 800a18a:	0c12      	lsrs	r2, r2, #16
 800a18c:	fa13 f38e 	uxtah	r3, r3, lr
 800a190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a198:	b29b      	uxth	r3, r3
 800a19a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a19e:	45b9      	cmp	r9, r7
 800a1a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1a4:	f840 3b04 	str.w	r3, [r0], #4
 800a1a8:	d2e8      	bcs.n	800a17c <quorem+0xb0>
 800a1aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a1ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a1b2:	b92a      	cbnz	r2, 800a1c0 <quorem+0xf4>
 800a1b4:	3b04      	subs	r3, #4
 800a1b6:	429e      	cmp	r6, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	d30b      	bcc.n	800a1d4 <quorem+0x108>
 800a1bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	b003      	add	sp, #12
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	6812      	ldr	r2, [r2, #0]
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	d1ca      	bne.n	800a166 <quorem+0x9a>
 800a1d0:	3c01      	subs	r4, #1
 800a1d2:	e7c5      	b.n	800a160 <quorem+0x94>
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	d1ef      	bne.n	800a1bc <quorem+0xf0>
 800a1dc:	3c01      	subs	r4, #1
 800a1de:	e7ea      	b.n	800a1b6 <quorem+0xea>
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e7ee      	b.n	800a1c2 <quorem+0xf6>
 800a1e4:	0000      	movs	r0, r0
	...

0800a1e8 <_dtoa_r>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ec57 6b10 	vmov	r6, r7, d0
 800a1f0:	b097      	sub	sp, #92	; 0x5c
 800a1f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1f4:	9106      	str	r1, [sp, #24]
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a1fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a200:	e9cd 6700 	strd	r6, r7, [sp]
 800a204:	b93d      	cbnz	r5, 800a216 <_dtoa_r+0x2e>
 800a206:	2010      	movs	r0, #16
 800a208:	f7ff f97e 	bl	8009508 <malloc>
 800a20c:	6260      	str	r0, [r4, #36]	; 0x24
 800a20e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a212:	6005      	str	r5, [r0, #0]
 800a214:	60c5      	str	r5, [r0, #12]
 800a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a218:	6819      	ldr	r1, [r3, #0]
 800a21a:	b151      	cbz	r1, 800a232 <_dtoa_r+0x4a>
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	604a      	str	r2, [r1, #4]
 800a220:	2301      	movs	r3, #1
 800a222:	4093      	lsls	r3, r2
 800a224:	608b      	str	r3, [r1, #8]
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fdf0 	bl	800ae0c <_Bfree>
 800a22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	1e3b      	subs	r3, r7, #0
 800a234:	bfbb      	ittet	lt
 800a236:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a23a:	9301      	strlt	r3, [sp, #4]
 800a23c:	2300      	movge	r3, #0
 800a23e:	2201      	movlt	r2, #1
 800a240:	bfac      	ite	ge
 800a242:	f8c8 3000 	strge.w	r3, [r8]
 800a246:	f8c8 2000 	strlt.w	r2, [r8]
 800a24a:	4baf      	ldr	r3, [pc, #700]	; (800a508 <_dtoa_r+0x320>)
 800a24c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a250:	ea33 0308 	bics.w	r3, r3, r8
 800a254:	d114      	bne.n	800a280 <_dtoa_r+0x98>
 800a256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a258:	f242 730f 	movw	r3, #9999	; 0x270f
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	b923      	cbnz	r3, 800a26c <_dtoa_r+0x84>
 800a262:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a266:	2800      	cmp	r0, #0
 800a268:	f000 8542 	beq.w	800acf0 <_dtoa_r+0xb08>
 800a26c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a26e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a51c <_dtoa_r+0x334>
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 8544 	beq.w	800ad00 <_dtoa_r+0xb18>
 800a278:	f10b 0303 	add.w	r3, fp, #3
 800a27c:	f000 bd3e 	b.w	800acfc <_dtoa_r+0xb14>
 800a280:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 800a290:	4681      	mov	r9, r0
 800a292:	b168      	cbz	r0, 800a2b0 <_dtoa_r+0xc8>
 800a294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a296:	2301      	movs	r3, #1
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8524 	beq.w	800acea <_dtoa_r+0xb02>
 800a2a2:	4b9a      	ldr	r3, [pc, #616]	; (800a50c <_dtoa_r+0x324>)
 800a2a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	f000 bd28 	b.w	800ad00 <_dtoa_r+0xb18>
 800a2b0:	aa14      	add	r2, sp, #80	; 0x50
 800a2b2:	a915      	add	r1, sp, #84	; 0x54
 800a2b4:	ec47 6b10 	vmov	d0, r6, r7
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f001 f800 	bl	800b2be <__d2b>
 800a2be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a2c2:	9004      	str	r0, [sp, #16]
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	d07c      	beq.n	800a3c2 <_dtoa_r+0x1da>
 800a2c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a2d0:	46b2      	mov	sl, r6
 800a2d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4b8b      	ldr	r3, [pc, #556]	; (800a510 <_dtoa_r+0x328>)
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	4659      	mov	r1, fp
 800a2e6:	f7f5 ffd7 	bl	8000298 <__aeabi_dsub>
 800a2ea:	a381      	add	r3, pc, #516	; (adr r3, 800a4f0 <_dtoa_r+0x308>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f6 f98a 	bl	8000608 <__aeabi_dmul>
 800a2f4:	a380      	add	r3, pc, #512	; (adr r3, 800a4f8 <_dtoa_r+0x310>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	f7f5 ffcf 	bl	800029c <__adddf3>
 800a2fe:	4606      	mov	r6, r0
 800a300:	4628      	mov	r0, r5
 800a302:	460f      	mov	r7, r1
 800a304:	f7f6 f916 	bl	8000534 <__aeabi_i2d>
 800a308:	a37d      	add	r3, pc, #500	; (adr r3, 800a500 <_dtoa_r+0x318>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f6 f97b 	bl	8000608 <__aeabi_dmul>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4630      	mov	r0, r6
 800a318:	4639      	mov	r1, r7
 800a31a:	f7f5 ffbf 	bl	800029c <__adddf3>
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	f7f6 fc21 	bl	8000b68 <__aeabi_d2iz>
 800a326:	2200      	movs	r2, #0
 800a328:	4682      	mov	sl, r0
 800a32a:	2300      	movs	r3, #0
 800a32c:	4630      	mov	r0, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	f7f6 fbdc 	bl	8000aec <__aeabi_dcmplt>
 800a334:	b148      	cbz	r0, 800a34a <_dtoa_r+0x162>
 800a336:	4650      	mov	r0, sl
 800a338:	f7f6 f8fc 	bl	8000534 <__aeabi_i2d>
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	f7f6 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 800a344:	b908      	cbnz	r0, 800a34a <_dtoa_r+0x162>
 800a346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a34a:	f1ba 0f16 	cmp.w	sl, #22
 800a34e:	d859      	bhi.n	800a404 <_dtoa_r+0x21c>
 800a350:	4970      	ldr	r1, [pc, #448]	; (800a514 <_dtoa_r+0x32c>)
 800a352:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35e:	f7f6 fbe3 	bl	8000b28 <__aeabi_dcmpgt>
 800a362:	2800      	cmp	r0, #0
 800a364:	d050      	beq.n	800a408 <_dtoa_r+0x220>
 800a366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a36a:	2300      	movs	r3, #0
 800a36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a370:	1b5d      	subs	r5, r3, r5
 800a372:	f1b5 0801 	subs.w	r8, r5, #1
 800a376:	bf49      	itett	mi
 800a378:	f1c5 0301 	rsbmi	r3, r5, #1
 800a37c:	2300      	movpl	r3, #0
 800a37e:	9305      	strmi	r3, [sp, #20]
 800a380:	f04f 0800 	movmi.w	r8, #0
 800a384:	bf58      	it	pl
 800a386:	9305      	strpl	r3, [sp, #20]
 800a388:	f1ba 0f00 	cmp.w	sl, #0
 800a38c:	db3e      	blt.n	800a40c <_dtoa_r+0x224>
 800a38e:	2300      	movs	r3, #0
 800a390:	44d0      	add	r8, sl
 800a392:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a396:	9307      	str	r3, [sp, #28]
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	f200 8090 	bhi.w	800a4c0 <_dtoa_r+0x2d8>
 800a3a0:	2b05      	cmp	r3, #5
 800a3a2:	bfc4      	itt	gt
 800a3a4:	3b04      	subgt	r3, #4
 800a3a6:	9306      	strgt	r3, [sp, #24]
 800a3a8:	9b06      	ldr	r3, [sp, #24]
 800a3aa:	f1a3 0302 	sub.w	r3, r3, #2
 800a3ae:	bfcc      	ite	gt
 800a3b0:	2500      	movgt	r5, #0
 800a3b2:	2501      	movle	r5, #1
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	f200 808f 	bhi.w	800a4d8 <_dtoa_r+0x2f0>
 800a3ba:	e8df f003 	tbb	[pc, r3]
 800a3be:	7f7d      	.short	0x7f7d
 800a3c0:	7131      	.short	0x7131
 800a3c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a3c6:	441d      	add	r5, r3
 800a3c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a3cc:	2820      	cmp	r0, #32
 800a3ce:	dd13      	ble.n	800a3f8 <_dtoa_r+0x210>
 800a3d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	fa08 f800 	lsl.w	r8, r8, r0
 800a3da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a3de:	fa23 f000 	lsr.w	r0, r3, r0
 800a3e2:	ea48 0000 	orr.w	r0, r8, r0
 800a3e6:	f7f6 f895 	bl	8000514 <__aeabi_ui2d>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a3f2:	3d01      	subs	r5, #1
 800a3f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3f6:	e772      	b.n	800a2de <_dtoa_r+0xf6>
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	f1c0 0020 	rsb	r0, r0, #32
 800a3fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a402:	e7f0      	b.n	800a3e6 <_dtoa_r+0x1fe>
 800a404:	2301      	movs	r3, #1
 800a406:	e7b1      	b.n	800a36c <_dtoa_r+0x184>
 800a408:	900f      	str	r0, [sp, #60]	; 0x3c
 800a40a:	e7b0      	b.n	800a36e <_dtoa_r+0x186>
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	eba3 030a 	sub.w	r3, r3, sl
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	f1ca 0300 	rsb	r3, sl, #0
 800a418:	9307      	str	r3, [sp, #28]
 800a41a:	2300      	movs	r3, #0
 800a41c:	930e      	str	r3, [sp, #56]	; 0x38
 800a41e:	e7bb      	b.n	800a398 <_dtoa_r+0x1b0>
 800a420:	2301      	movs	r3, #1
 800a422:	930a      	str	r3, [sp, #40]	; 0x28
 800a424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd59      	ble.n	800a4de <_dtoa_r+0x2f6>
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	4699      	mov	r9, r3
 800a42e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a430:	2200      	movs	r2, #0
 800a432:	6072      	str	r2, [r6, #4]
 800a434:	2204      	movs	r2, #4
 800a436:	f102 0014 	add.w	r0, r2, #20
 800a43a:	4298      	cmp	r0, r3
 800a43c:	6871      	ldr	r1, [r6, #4]
 800a43e:	d953      	bls.n	800a4e8 <_dtoa_r+0x300>
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fcaf 	bl	800ada4 <_Balloc>
 800a446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a448:	6030      	str	r0, [r6, #0]
 800a44a:	f1b9 0f0e 	cmp.w	r9, #14
 800a44e:	f8d3 b000 	ldr.w	fp, [r3]
 800a452:	f200 80e6 	bhi.w	800a622 <_dtoa_r+0x43a>
 800a456:	2d00      	cmp	r5, #0
 800a458:	f000 80e3 	beq.w	800a622 <_dtoa_r+0x43a>
 800a45c:	ed9d 7b00 	vldr	d7, [sp]
 800a460:	f1ba 0f00 	cmp.w	sl, #0
 800a464:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a468:	dd74      	ble.n	800a554 <_dtoa_r+0x36c>
 800a46a:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <_dtoa_r+0x32c>)
 800a46c:	f00a 030f 	and.w	r3, sl, #15
 800a470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a474:	ed93 7b00 	vldr	d7, [r3]
 800a478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a47c:	06f0      	lsls	r0, r6, #27
 800a47e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a482:	d565      	bpl.n	800a550 <_dtoa_r+0x368>
 800a484:	4b24      	ldr	r3, [pc, #144]	; (800a518 <_dtoa_r+0x330>)
 800a486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a48a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a48e:	f7f6 f9e5 	bl	800085c <__aeabi_ddiv>
 800a492:	e9cd 0100 	strd	r0, r1, [sp]
 800a496:	f006 060f 	and.w	r6, r6, #15
 800a49a:	2503      	movs	r5, #3
 800a49c:	4f1e      	ldr	r7, [pc, #120]	; (800a518 <_dtoa_r+0x330>)
 800a49e:	e04c      	b.n	800a53a <_dtoa_r+0x352>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a6:	4453      	add	r3, sl
 800a4a8:	f103 0901 	add.w	r9, r3, #1
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	bfb8      	it	lt
 800a4b4:	2301      	movlt	r3, #1
 800a4b6:	e7ba      	b.n	800a42e <_dtoa_r+0x246>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	e7b2      	b.n	800a422 <_dtoa_r+0x23a>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e7f0      	b.n	800a4a2 <_dtoa_r+0x2ba>
 800a4c0:	2501      	movs	r5, #1
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9306      	str	r3, [sp, #24]
 800a4c6:	950a      	str	r5, [sp, #40]	; 0x28
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2312      	movs	r3, #18
 800a4d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4d6:	e7aa      	b.n	800a42e <_dtoa_r+0x246>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	930a      	str	r3, [sp, #40]	; 0x28
 800a4dc:	e7f4      	b.n	800a4c8 <_dtoa_r+0x2e0>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	4699      	mov	r9, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	e7f5      	b.n	800a4d4 <_dtoa_r+0x2ec>
 800a4e8:	3101      	adds	r1, #1
 800a4ea:	6071      	str	r1, [r6, #4]
 800a4ec:	0052      	lsls	r2, r2, #1
 800a4ee:	e7a2      	b.n	800a436 <_dtoa_r+0x24e>
 800a4f0:	636f4361 	.word	0x636f4361
 800a4f4:	3fd287a7 	.word	0x3fd287a7
 800a4f8:	8b60c8b3 	.word	0x8b60c8b3
 800a4fc:	3fc68a28 	.word	0x3fc68a28
 800a500:	509f79fb 	.word	0x509f79fb
 800a504:	3fd34413 	.word	0x3fd34413
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	0800b81d 	.word	0x0800b81d
 800a510:	3ff80000 	.word	0x3ff80000
 800a514:	0800b880 	.word	0x0800b880
 800a518:	0800b858 	.word	0x0800b858
 800a51c:	0800b849 	.word	0x0800b849
 800a520:	07f1      	lsls	r1, r6, #31
 800a522:	d508      	bpl.n	800a536 <_dtoa_r+0x34e>
 800a524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52c:	f7f6 f86c 	bl	8000608 <__aeabi_dmul>
 800a530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a534:	3501      	adds	r5, #1
 800a536:	1076      	asrs	r6, r6, #1
 800a538:	3708      	adds	r7, #8
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	d1f0      	bne.n	800a520 <_dtoa_r+0x338>
 800a53e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a542:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a546:	f7f6 f989 	bl	800085c <__aeabi_ddiv>
 800a54a:	e9cd 0100 	strd	r0, r1, [sp]
 800a54e:	e01a      	b.n	800a586 <_dtoa_r+0x39e>
 800a550:	2502      	movs	r5, #2
 800a552:	e7a3      	b.n	800a49c <_dtoa_r+0x2b4>
 800a554:	f000 80a0 	beq.w	800a698 <_dtoa_r+0x4b0>
 800a558:	f1ca 0600 	rsb	r6, sl, #0
 800a55c:	4b9f      	ldr	r3, [pc, #636]	; (800a7dc <_dtoa_r+0x5f4>)
 800a55e:	4fa0      	ldr	r7, [pc, #640]	; (800a7e0 <_dtoa_r+0x5f8>)
 800a560:	f006 020f 	and.w	r2, r6, #15
 800a564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a570:	f7f6 f84a 	bl	8000608 <__aeabi_dmul>
 800a574:	e9cd 0100 	strd	r0, r1, [sp]
 800a578:	1136      	asrs	r6, r6, #4
 800a57a:	2300      	movs	r3, #0
 800a57c:	2502      	movs	r5, #2
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d17f      	bne.n	800a682 <_dtoa_r+0x49a>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e1      	bne.n	800a54a <_dtoa_r+0x362>
 800a586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8087 	beq.w	800a69c <_dtoa_r+0x4b4>
 800a58e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a592:	2200      	movs	r2, #0
 800a594:	4b93      	ldr	r3, [pc, #588]	; (800a7e4 <_dtoa_r+0x5fc>)
 800a596:	4630      	mov	r0, r6
 800a598:	4639      	mov	r1, r7
 800a59a:	f7f6 faa7 	bl	8000aec <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d07c      	beq.n	800a69c <_dtoa_r+0x4b4>
 800a5a2:	f1b9 0f00 	cmp.w	r9, #0
 800a5a6:	d079      	beq.n	800a69c <_dtoa_r+0x4b4>
 800a5a8:	9b02      	ldr	r3, [sp, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dd35      	ble.n	800a61a <_dtoa_r+0x432>
 800a5ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5b2:	9308      	str	r3, [sp, #32]
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4b8b      	ldr	r3, [pc, #556]	; (800a7e8 <_dtoa_r+0x600>)
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7f6 f824 	bl	8000608 <__aeabi_dmul>
 800a5c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c4:	9f02      	ldr	r7, [sp, #8]
 800a5c6:	3501      	adds	r5, #1
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f7f5 ffb3 	bl	8000534 <__aeabi_i2d>
 800a5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d2:	f7f6 f819 	bl	8000608 <__aeabi_dmul>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4b84      	ldr	r3, [pc, #528]	; (800a7ec <_dtoa_r+0x604>)
 800a5da:	f7f5 fe5f 	bl	800029c <__adddf3>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	d15d      	bne.n	800a6a4 <_dtoa_r+0x4bc>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4b81      	ldr	r3, [pc, #516]	; (800a7f0 <_dtoa_r+0x608>)
 800a5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5f0:	f7f5 fe52 	bl	8000298 <__aeabi_dsub>
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4633      	mov	r3, r6
 800a5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5fc:	f7f6 fa94 	bl	8000b28 <__aeabi_dcmpgt>
 800a600:	2800      	cmp	r0, #0
 800a602:	f040 8288 	bne.w	800ab16 <_dtoa_r+0x92e>
 800a606:	462a      	mov	r2, r5
 800a608:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a610:	f7f6 fa6c 	bl	8000aec <__aeabi_dcmplt>
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 827c 	bne.w	800ab12 <_dtoa_r+0x92a>
 800a61a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a61e:	e9cd 2300 	strd	r2, r3, [sp]
 800a622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a624:	2b00      	cmp	r3, #0
 800a626:	f2c0 8150 	blt.w	800a8ca <_dtoa_r+0x6e2>
 800a62a:	f1ba 0f0e 	cmp.w	sl, #14
 800a62e:	f300 814c 	bgt.w	800a8ca <_dtoa_r+0x6e2>
 800a632:	4b6a      	ldr	r3, [pc, #424]	; (800a7dc <_dtoa_r+0x5f4>)
 800a634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a638:	ed93 7b00 	vldr	d7, [r3]
 800a63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a644:	f280 80d8 	bge.w	800a7f8 <_dtoa_r+0x610>
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	f300 80d4 	bgt.w	800a7f8 <_dtoa_r+0x610>
 800a650:	f040 825e 	bne.w	800ab10 <_dtoa_r+0x928>
 800a654:	2200      	movs	r2, #0
 800a656:	4b66      	ldr	r3, [pc, #408]	; (800a7f0 <_dtoa_r+0x608>)
 800a658:	ec51 0b17 	vmov	r0, r1, d7
 800a65c:	f7f5 ffd4 	bl	8000608 <__aeabi_dmul>
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	f7f6 fa56 	bl	8000b14 <__aeabi_dcmpge>
 800a668:	464f      	mov	r7, r9
 800a66a:	464e      	mov	r6, r9
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f040 8234 	bne.w	800aada <_dtoa_r+0x8f2>
 800a672:	2331      	movs	r3, #49	; 0x31
 800a674:	f10b 0501 	add.w	r5, fp, #1
 800a678:	f88b 3000 	strb.w	r3, [fp]
 800a67c:	f10a 0a01 	add.w	sl, sl, #1
 800a680:	e22f      	b.n	800aae2 <_dtoa_r+0x8fa>
 800a682:	07f2      	lsls	r2, r6, #31
 800a684:	d505      	bpl.n	800a692 <_dtoa_r+0x4aa>
 800a686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a68a:	f7f5 ffbd 	bl	8000608 <__aeabi_dmul>
 800a68e:	3501      	adds	r5, #1
 800a690:	2301      	movs	r3, #1
 800a692:	1076      	asrs	r6, r6, #1
 800a694:	3708      	adds	r7, #8
 800a696:	e772      	b.n	800a57e <_dtoa_r+0x396>
 800a698:	2502      	movs	r5, #2
 800a69a:	e774      	b.n	800a586 <_dtoa_r+0x39e>
 800a69c:	f8cd a020 	str.w	sl, [sp, #32]
 800a6a0:	464f      	mov	r7, r9
 800a6a2:	e791      	b.n	800a5c8 <_dtoa_r+0x3e0>
 800a6a4:	4b4d      	ldr	r3, [pc, #308]	; (800a7dc <_dtoa_r+0x5f4>)
 800a6a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d047      	beq.n	800a744 <_dtoa_r+0x55c>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	494e      	ldr	r1, [pc, #312]	; (800a7f4 <_dtoa_r+0x60c>)
 800a6bc:	f7f6 f8ce 	bl	800085c <__aeabi_ddiv>
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4633      	mov	r3, r6
 800a6c4:	f7f5 fde8 	bl	8000298 <__aeabi_dsub>
 800a6c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6cc:	465d      	mov	r5, fp
 800a6ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d2:	f7f6 fa49 	bl	8000b68 <__aeabi_d2iz>
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	f7f5 ff2c 	bl	8000534 <__aeabi_i2d>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e4:	f7f5 fdd8 	bl	8000298 <__aeabi_dsub>
 800a6e8:	3630      	adds	r6, #48	; 0x30
 800a6ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a6f6:	f7f6 f9f9 	bl	8000aec <__aeabi_dcmplt>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d163      	bne.n	800a7c6 <_dtoa_r+0x5de>
 800a6fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a702:	2000      	movs	r0, #0
 800a704:	4937      	ldr	r1, [pc, #220]	; (800a7e4 <_dtoa_r+0x5fc>)
 800a706:	f7f5 fdc7 	bl	8000298 <__aeabi_dsub>
 800a70a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a70e:	f7f6 f9ed 	bl	8000aec <__aeabi_dcmplt>
 800a712:	2800      	cmp	r0, #0
 800a714:	f040 80b7 	bne.w	800a886 <_dtoa_r+0x69e>
 800a718:	eba5 030b 	sub.w	r3, r5, fp
 800a71c:	429f      	cmp	r7, r3
 800a71e:	f77f af7c 	ble.w	800a61a <_dtoa_r+0x432>
 800a722:	2200      	movs	r2, #0
 800a724:	4b30      	ldr	r3, [pc, #192]	; (800a7e8 <_dtoa_r+0x600>)
 800a726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a72a:	f7f5 ff6d 	bl	8000608 <__aeabi_dmul>
 800a72e:	2200      	movs	r2, #0
 800a730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a734:	4b2c      	ldr	r3, [pc, #176]	; (800a7e8 <_dtoa_r+0x600>)
 800a736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73a:	f7f5 ff65 	bl	8000608 <__aeabi_dmul>
 800a73e:	e9cd 0100 	strd	r0, r1, [sp]
 800a742:	e7c4      	b.n	800a6ce <_dtoa_r+0x4e6>
 800a744:	462a      	mov	r2, r5
 800a746:	4633      	mov	r3, r6
 800a748:	f7f5 ff5e 	bl	8000608 <__aeabi_dmul>
 800a74c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a750:	eb0b 0507 	add.w	r5, fp, r7
 800a754:	465e      	mov	r6, fp
 800a756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a75a:	f7f6 fa05 	bl	8000b68 <__aeabi_d2iz>
 800a75e:	4607      	mov	r7, r0
 800a760:	f7f5 fee8 	bl	8000534 <__aeabi_i2d>
 800a764:	3730      	adds	r7, #48	; 0x30
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a76e:	f7f5 fd93 	bl	8000298 <__aeabi_dsub>
 800a772:	f806 7b01 	strb.w	r7, [r6], #1
 800a776:	42ae      	cmp	r6, r5
 800a778:	e9cd 0100 	strd	r0, r1, [sp]
 800a77c:	f04f 0200 	mov.w	r2, #0
 800a780:	d126      	bne.n	800a7d0 <_dtoa_r+0x5e8>
 800a782:	4b1c      	ldr	r3, [pc, #112]	; (800a7f4 <_dtoa_r+0x60c>)
 800a784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a788:	f7f5 fd88 	bl	800029c <__adddf3>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a794:	f7f6 f9c8 	bl	8000b28 <__aeabi_dcmpgt>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d174      	bne.n	800a886 <_dtoa_r+0x69e>
 800a79c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4914      	ldr	r1, [pc, #80]	; (800a7f4 <_dtoa_r+0x60c>)
 800a7a4:	f7f5 fd78 	bl	8000298 <__aeabi_dsub>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7b0:	f7f6 f99c 	bl	8000aec <__aeabi_dcmplt>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	f43f af30 	beq.w	800a61a <_dtoa_r+0x432>
 800a7ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7be:	2b30      	cmp	r3, #48	; 0x30
 800a7c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a7c4:	d002      	beq.n	800a7cc <_dtoa_r+0x5e4>
 800a7c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a7ca:	e04a      	b.n	800a862 <_dtoa_r+0x67a>
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	e7f4      	b.n	800a7ba <_dtoa_r+0x5d2>
 800a7d0:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <_dtoa_r+0x600>)
 800a7d2:	f7f5 ff19 	bl	8000608 <__aeabi_dmul>
 800a7d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7da:	e7bc      	b.n	800a756 <_dtoa_r+0x56e>
 800a7dc:	0800b880 	.word	0x0800b880
 800a7e0:	0800b858 	.word	0x0800b858
 800a7e4:	3ff00000 	.word	0x3ff00000
 800a7e8:	40240000 	.word	0x40240000
 800a7ec:	401c0000 	.word	0x401c0000
 800a7f0:	40140000 	.word	0x40140000
 800a7f4:	3fe00000 	.word	0x3fe00000
 800a7f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7fc:	465d      	mov	r5, fp
 800a7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a802:	4630      	mov	r0, r6
 800a804:	4639      	mov	r1, r7
 800a806:	f7f6 f829 	bl	800085c <__aeabi_ddiv>
 800a80a:	f7f6 f9ad 	bl	8000b68 <__aeabi_d2iz>
 800a80e:	4680      	mov	r8, r0
 800a810:	f7f5 fe90 	bl	8000534 <__aeabi_i2d>
 800a814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a818:	f7f5 fef6 	bl	8000608 <__aeabi_dmul>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a828:	f7f5 fd36 	bl	8000298 <__aeabi_dsub>
 800a82c:	f805 6b01 	strb.w	r6, [r5], #1
 800a830:	eba5 060b 	sub.w	r6, r5, fp
 800a834:	45b1      	cmp	r9, r6
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	d139      	bne.n	800a8b0 <_dtoa_r+0x6c8>
 800a83c:	f7f5 fd2e 	bl	800029c <__adddf3>
 800a840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	f7f6 f96e 	bl	8000b28 <__aeabi_dcmpgt>
 800a84c:	b9c8      	cbnz	r0, 800a882 <_dtoa_r+0x69a>
 800a84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f6 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a85a:	b110      	cbz	r0, 800a862 <_dtoa_r+0x67a>
 800a85c:	f018 0f01 	tst.w	r8, #1
 800a860:	d10f      	bne.n	800a882 <_dtoa_r+0x69a>
 800a862:	9904      	ldr	r1, [sp, #16]
 800a864:	4620      	mov	r0, r4
 800a866:	f000 fad1 	bl	800ae0c <_Bfree>
 800a86a:	2300      	movs	r3, #0
 800a86c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a86e:	702b      	strb	r3, [r5, #0]
 800a870:	f10a 0301 	add.w	r3, sl, #1
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 8241 	beq.w	800ad00 <_dtoa_r+0xb18>
 800a87e:	601d      	str	r5, [r3, #0]
 800a880:	e23e      	b.n	800ad00 <_dtoa_r+0xb18>
 800a882:	f8cd a020 	str.w	sl, [sp, #32]
 800a886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a88a:	2a39      	cmp	r2, #57	; 0x39
 800a88c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a890:	d108      	bne.n	800a8a4 <_dtoa_r+0x6bc>
 800a892:	459b      	cmp	fp, r3
 800a894:	d10a      	bne.n	800a8ac <_dtoa_r+0x6c4>
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	3301      	adds	r3, #1
 800a89a:	9308      	str	r3, [sp, #32]
 800a89c:	2330      	movs	r3, #48	; 0x30
 800a89e:	f88b 3000 	strb.w	r3, [fp]
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	781a      	ldrb	r2, [r3, #0]
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	e78c      	b.n	800a7c6 <_dtoa_r+0x5de>
 800a8ac:	461d      	mov	r5, r3
 800a8ae:	e7ea      	b.n	800a886 <_dtoa_r+0x69e>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b9b      	ldr	r3, [pc, #620]	; (800ab20 <_dtoa_r+0x938>)
 800a8b4:	f7f5 fea8 	bl	8000608 <__aeabi_dmul>
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460f      	mov	r7, r1
 800a8c0:	f7f6 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d09a      	beq.n	800a7fe <_dtoa_r+0x616>
 800a8c8:	e7cb      	b.n	800a862 <_dtoa_r+0x67a>
 800a8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	f000 808b 	beq.w	800a9e8 <_dtoa_r+0x800>
 800a8d2:	9a06      	ldr	r2, [sp, #24]
 800a8d4:	2a01      	cmp	r2, #1
 800a8d6:	dc6e      	bgt.n	800a9b6 <_dtoa_r+0x7ce>
 800a8d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	d067      	beq.n	800a9ae <_dtoa_r+0x7c6>
 800a8de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8e2:	9f07      	ldr	r7, [sp, #28]
 800a8e4:	9d05      	ldr	r5, [sp, #20]
 800a8e6:	9a05      	ldr	r2, [sp, #20]
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	441a      	add	r2, r3
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	9205      	str	r2, [sp, #20]
 800a8f0:	4498      	add	r8, r3
 800a8f2:	f000 fb2b 	bl	800af4c <__i2b>
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	dd0c      	ble.n	800a916 <_dtoa_r+0x72e>
 800a8fc:	f1b8 0f00 	cmp.w	r8, #0
 800a900:	dd09      	ble.n	800a916 <_dtoa_r+0x72e>
 800a902:	4545      	cmp	r5, r8
 800a904:	9a05      	ldr	r2, [sp, #20]
 800a906:	462b      	mov	r3, r5
 800a908:	bfa8      	it	ge
 800a90a:	4643      	movge	r3, r8
 800a90c:	1ad2      	subs	r2, r2, r3
 800a90e:	9205      	str	r2, [sp, #20]
 800a910:	1aed      	subs	r5, r5, r3
 800a912:	eba8 0803 	sub.w	r8, r8, r3
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	b1eb      	cbz	r3, 800a956 <_dtoa_r+0x76e>
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d067      	beq.n	800a9f0 <_dtoa_r+0x808>
 800a920:	b18f      	cbz	r7, 800a946 <_dtoa_r+0x75e>
 800a922:	4631      	mov	r1, r6
 800a924:	463a      	mov	r2, r7
 800a926:	4620      	mov	r0, r4
 800a928:	f000 fbb0 	bl	800b08c <__pow5mult>
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	4601      	mov	r1, r0
 800a930:	4606      	mov	r6, r0
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fb13 	bl	800af5e <__multiply>
 800a938:	9904      	ldr	r1, [sp, #16]
 800a93a:	9008      	str	r0, [sp, #32]
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fa65 	bl	800ae0c <_Bfree>
 800a942:	9b08      	ldr	r3, [sp, #32]
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	9b07      	ldr	r3, [sp, #28]
 800a948:	1bda      	subs	r2, r3, r7
 800a94a:	d004      	beq.n	800a956 <_dtoa_r+0x76e>
 800a94c:	9904      	ldr	r1, [sp, #16]
 800a94e:	4620      	mov	r0, r4
 800a950:	f000 fb9c 	bl	800b08c <__pow5mult>
 800a954:	9004      	str	r0, [sp, #16]
 800a956:	2101      	movs	r1, #1
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 faf7 	bl	800af4c <__i2b>
 800a95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a960:	4607      	mov	r7, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 81d0 	beq.w	800ad08 <_dtoa_r+0xb20>
 800a968:	461a      	mov	r2, r3
 800a96a:	4601      	mov	r1, r0
 800a96c:	4620      	mov	r0, r4
 800a96e:	f000 fb8d 	bl	800b08c <__pow5mult>
 800a972:	9b06      	ldr	r3, [sp, #24]
 800a974:	2b01      	cmp	r3, #1
 800a976:	4607      	mov	r7, r0
 800a978:	dc40      	bgt.n	800a9fc <_dtoa_r+0x814>
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d139      	bne.n	800a9f4 <_dtoa_r+0x80c>
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a986:	2b00      	cmp	r3, #0
 800a988:	d136      	bne.n	800a9f8 <_dtoa_r+0x810>
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a990:	0d1b      	lsrs	r3, r3, #20
 800a992:	051b      	lsls	r3, r3, #20
 800a994:	b12b      	cbz	r3, 800a9a2 <_dtoa_r+0x7ba>
 800a996:	9b05      	ldr	r3, [sp, #20]
 800a998:	3301      	adds	r3, #1
 800a99a:	9305      	str	r3, [sp, #20]
 800a99c:	f108 0801 	add.w	r8, r8, #1
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	9307      	str	r3, [sp, #28]
 800a9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d12a      	bne.n	800aa00 <_dtoa_r+0x818>
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	e030      	b.n	800aa10 <_dtoa_r+0x828>
 800a9ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9b4:	e795      	b.n	800a8e2 <_dtoa_r+0x6fa>
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a9bc:	42bb      	cmp	r3, r7
 800a9be:	bfbf      	itttt	lt
 800a9c0:	9b07      	ldrlt	r3, [sp, #28]
 800a9c2:	9707      	strlt	r7, [sp, #28]
 800a9c4:	1afa      	sublt	r2, r7, r3
 800a9c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9c8:	bfbb      	ittet	lt
 800a9ca:	189b      	addlt	r3, r3, r2
 800a9cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9ce:	1bdf      	subge	r7, r3, r7
 800a9d0:	2700      	movlt	r7, #0
 800a9d2:	f1b9 0f00 	cmp.w	r9, #0
 800a9d6:	bfb5      	itete	lt
 800a9d8:	9b05      	ldrlt	r3, [sp, #20]
 800a9da:	9d05      	ldrge	r5, [sp, #20]
 800a9dc:	eba3 0509 	sublt.w	r5, r3, r9
 800a9e0:	464b      	movge	r3, r9
 800a9e2:	bfb8      	it	lt
 800a9e4:	2300      	movlt	r3, #0
 800a9e6:	e77e      	b.n	800a8e6 <_dtoa_r+0x6fe>
 800a9e8:	9f07      	ldr	r7, [sp, #28]
 800a9ea:	9d05      	ldr	r5, [sp, #20]
 800a9ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a9ee:	e783      	b.n	800a8f8 <_dtoa_r+0x710>
 800a9f0:	9a07      	ldr	r2, [sp, #28]
 800a9f2:	e7ab      	b.n	800a94c <_dtoa_r+0x764>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e7d4      	b.n	800a9a2 <_dtoa_r+0x7ba>
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	e7d2      	b.n	800a9a2 <_dtoa_r+0x7ba>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800aa06:	6918      	ldr	r0, [r3, #16]
 800aa08:	f000 fa52 	bl	800aeb0 <__hi0bits>
 800aa0c:	f1c0 0020 	rsb	r0, r0, #32
 800aa10:	4440      	add	r0, r8
 800aa12:	f010 001f 	ands.w	r0, r0, #31
 800aa16:	d047      	beq.n	800aaa8 <_dtoa_r+0x8c0>
 800aa18:	f1c0 0320 	rsb	r3, r0, #32
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	dd3b      	ble.n	800aa98 <_dtoa_r+0x8b0>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	f1c0 001c 	rsb	r0, r0, #28
 800aa26:	4403      	add	r3, r0
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	4405      	add	r5, r0
 800aa2c:	4480      	add	r8, r0
 800aa2e:	9b05      	ldr	r3, [sp, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dd05      	ble.n	800aa40 <_dtoa_r+0x858>
 800aa34:	461a      	mov	r2, r3
 800aa36:	9904      	ldr	r1, [sp, #16]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fb75 	bl	800b128 <__lshift>
 800aa3e:	9004      	str	r0, [sp, #16]
 800aa40:	f1b8 0f00 	cmp.w	r8, #0
 800aa44:	dd05      	ble.n	800aa52 <_dtoa_r+0x86a>
 800aa46:	4639      	mov	r1, r7
 800aa48:	4642      	mov	r2, r8
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fb6c 	bl	800b128 <__lshift>
 800aa50:	4607      	mov	r7, r0
 800aa52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa54:	b353      	cbz	r3, 800aaac <_dtoa_r+0x8c4>
 800aa56:	4639      	mov	r1, r7
 800aa58:	9804      	ldr	r0, [sp, #16]
 800aa5a:	f000 fbb9 	bl	800b1d0 <__mcmp>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	da24      	bge.n	800aaac <_dtoa_r+0x8c4>
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	9904      	ldr	r1, [sp, #16]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 f9e6 	bl	800ae3a <__multadd>
 800aa6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa70:	9004      	str	r0, [sp, #16]
 800aa72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 814d 	beq.w	800ad16 <_dtoa_r+0xb2e>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4631      	mov	r1, r6
 800aa80:	220a      	movs	r2, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 f9d9 	bl	800ae3a <__multadd>
 800aa88:	9b02      	ldr	r3, [sp, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	dc4f      	bgt.n	800ab30 <_dtoa_r+0x948>
 800aa90:	9b06      	ldr	r3, [sp, #24]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	dd4c      	ble.n	800ab30 <_dtoa_r+0x948>
 800aa96:	e011      	b.n	800aabc <_dtoa_r+0x8d4>
 800aa98:	d0c9      	beq.n	800aa2e <_dtoa_r+0x846>
 800aa9a:	9a05      	ldr	r2, [sp, #20]
 800aa9c:	331c      	adds	r3, #28
 800aa9e:	441a      	add	r2, r3
 800aaa0:	9205      	str	r2, [sp, #20]
 800aaa2:	441d      	add	r5, r3
 800aaa4:	4498      	add	r8, r3
 800aaa6:	e7c2      	b.n	800aa2e <_dtoa_r+0x846>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	e7f6      	b.n	800aa9a <_dtoa_r+0x8b2>
 800aaac:	f1b9 0f00 	cmp.w	r9, #0
 800aab0:	dc38      	bgt.n	800ab24 <_dtoa_r+0x93c>
 800aab2:	9b06      	ldr	r3, [sp, #24]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	dd35      	ble.n	800ab24 <_dtoa_r+0x93c>
 800aab8:	f8cd 9008 	str.w	r9, [sp, #8]
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	b963      	cbnz	r3, 800aada <_dtoa_r+0x8f2>
 800aac0:	4639      	mov	r1, r7
 800aac2:	2205      	movs	r2, #5
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 f9b8 	bl	800ae3a <__multadd>
 800aaca:	4601      	mov	r1, r0
 800aacc:	4607      	mov	r7, r0
 800aace:	9804      	ldr	r0, [sp, #16]
 800aad0:	f000 fb7e 	bl	800b1d0 <__mcmp>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f73f adcc 	bgt.w	800a672 <_dtoa_r+0x48a>
 800aada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aadc:	465d      	mov	r5, fp
 800aade:	ea6f 0a03 	mvn.w	sl, r3
 800aae2:	f04f 0900 	mov.w	r9, #0
 800aae6:	4639      	mov	r1, r7
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 f98f 	bl	800ae0c <_Bfree>
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	f43f aeb7 	beq.w	800a862 <_dtoa_r+0x67a>
 800aaf4:	f1b9 0f00 	cmp.w	r9, #0
 800aaf8:	d005      	beq.n	800ab06 <_dtoa_r+0x91e>
 800aafa:	45b1      	cmp	r9, r6
 800aafc:	d003      	beq.n	800ab06 <_dtoa_r+0x91e>
 800aafe:	4649      	mov	r1, r9
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 f983 	bl	800ae0c <_Bfree>
 800ab06:	4631      	mov	r1, r6
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 f97f 	bl	800ae0c <_Bfree>
 800ab0e:	e6a8      	b.n	800a862 <_dtoa_r+0x67a>
 800ab10:	2700      	movs	r7, #0
 800ab12:	463e      	mov	r6, r7
 800ab14:	e7e1      	b.n	800aada <_dtoa_r+0x8f2>
 800ab16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	e5a9      	b.n	800a672 <_dtoa_r+0x48a>
 800ab1e:	bf00      	nop
 800ab20:	40240000 	.word	0x40240000
 800ab24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab26:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 80fa 	beq.w	800ad24 <_dtoa_r+0xb3c>
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	dd05      	ble.n	800ab40 <_dtoa_r+0x958>
 800ab34:	4631      	mov	r1, r6
 800ab36:	462a      	mov	r2, r5
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 faf5 	bl	800b128 <__lshift>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	9b07      	ldr	r3, [sp, #28]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d04c      	beq.n	800abe0 <_dtoa_r+0x9f8>
 800ab46:	6871      	ldr	r1, [r6, #4]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 f92b 	bl	800ada4 <_Balloc>
 800ab4e:	6932      	ldr	r2, [r6, #16]
 800ab50:	3202      	adds	r2, #2
 800ab52:	4605      	mov	r5, r0
 800ab54:	0092      	lsls	r2, r2, #2
 800ab56:	f106 010c 	add.w	r1, r6, #12
 800ab5a:	300c      	adds	r0, #12
 800ab5c:	f7fe fcdc 	bl	8009518 <memcpy>
 800ab60:	2201      	movs	r2, #1
 800ab62:	4629      	mov	r1, r5
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fadf 	bl	800b128 <__lshift>
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	f8cd b014 	str.w	fp, [sp, #20]
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	46b1      	mov	r9, r6
 800ab76:	9307      	str	r3, [sp, #28]
 800ab78:	4606      	mov	r6, r0
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	9804      	ldr	r0, [sp, #16]
 800ab7e:	f7ff faa5 	bl	800a0cc <quorem>
 800ab82:	4649      	mov	r1, r9
 800ab84:	4605      	mov	r5, r0
 800ab86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab8a:	9804      	ldr	r0, [sp, #16]
 800ab8c:	f000 fb20 	bl	800b1d0 <__mcmp>
 800ab90:	4632      	mov	r2, r6
 800ab92:	9000      	str	r0, [sp, #0]
 800ab94:	4639      	mov	r1, r7
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fb34 	bl	800b204 <__mdiff>
 800ab9c:	68c3      	ldr	r3, [r0, #12]
 800ab9e:	4602      	mov	r2, r0
 800aba0:	bb03      	cbnz	r3, 800abe4 <_dtoa_r+0x9fc>
 800aba2:	4601      	mov	r1, r0
 800aba4:	9008      	str	r0, [sp, #32]
 800aba6:	9804      	ldr	r0, [sp, #16]
 800aba8:	f000 fb12 	bl	800b1d0 <__mcmp>
 800abac:	9a08      	ldr	r2, [sp, #32]
 800abae:	4603      	mov	r3, r0
 800abb0:	4611      	mov	r1, r2
 800abb2:	4620      	mov	r0, r4
 800abb4:	9308      	str	r3, [sp, #32]
 800abb6:	f000 f929 	bl	800ae0c <_Bfree>
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	b9a3      	cbnz	r3, 800abe8 <_dtoa_r+0xa00>
 800abbe:	9a06      	ldr	r2, [sp, #24]
 800abc0:	b992      	cbnz	r2, 800abe8 <_dtoa_r+0xa00>
 800abc2:	9a07      	ldr	r2, [sp, #28]
 800abc4:	b982      	cbnz	r2, 800abe8 <_dtoa_r+0xa00>
 800abc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abca:	d029      	beq.n	800ac20 <_dtoa_r+0xa38>
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd01      	ble.n	800abd6 <_dtoa_r+0x9ee>
 800abd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	1c5d      	adds	r5, r3, #1
 800abda:	f883 8000 	strb.w	r8, [r3]
 800abde:	e782      	b.n	800aae6 <_dtoa_r+0x8fe>
 800abe0:	4630      	mov	r0, r6
 800abe2:	e7c2      	b.n	800ab6a <_dtoa_r+0x982>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e7e3      	b.n	800abb0 <_dtoa_r+0x9c8>
 800abe8:	9a00      	ldr	r2, [sp, #0]
 800abea:	2a00      	cmp	r2, #0
 800abec:	db04      	blt.n	800abf8 <_dtoa_r+0xa10>
 800abee:	d125      	bne.n	800ac3c <_dtoa_r+0xa54>
 800abf0:	9a06      	ldr	r2, [sp, #24]
 800abf2:	bb1a      	cbnz	r2, 800ac3c <_dtoa_r+0xa54>
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	bb0a      	cbnz	r2, 800ac3c <_dtoa_r+0xa54>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	ddec      	ble.n	800abd6 <_dtoa_r+0x9ee>
 800abfc:	2201      	movs	r2, #1
 800abfe:	9904      	ldr	r1, [sp, #16]
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 fa91 	bl	800b128 <__lshift>
 800ac06:	4639      	mov	r1, r7
 800ac08:	9004      	str	r0, [sp, #16]
 800ac0a:	f000 fae1 	bl	800b1d0 <__mcmp>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dc03      	bgt.n	800ac1a <_dtoa_r+0xa32>
 800ac12:	d1e0      	bne.n	800abd6 <_dtoa_r+0x9ee>
 800ac14:	f018 0f01 	tst.w	r8, #1
 800ac18:	d0dd      	beq.n	800abd6 <_dtoa_r+0x9ee>
 800ac1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac1e:	d1d8      	bne.n	800abd2 <_dtoa_r+0x9ea>
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	9a05      	ldr	r2, [sp, #20]
 800ac24:	1c5d      	adds	r5, r3, #1
 800ac26:	2339      	movs	r3, #57	; 0x39
 800ac28:	7013      	strb	r3, [r2, #0]
 800ac2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac2e:	2b39      	cmp	r3, #57	; 0x39
 800ac30:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac34:	d04f      	beq.n	800acd6 <_dtoa_r+0xaee>
 800ac36:	3301      	adds	r3, #1
 800ac38:	7013      	strb	r3, [r2, #0]
 800ac3a:	e754      	b.n	800aae6 <_dtoa_r+0x8fe>
 800ac3c:	9a05      	ldr	r2, [sp, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f102 0501 	add.w	r5, r2, #1
 800ac44:	dd06      	ble.n	800ac54 <_dtoa_r+0xa6c>
 800ac46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac4a:	d0e9      	beq.n	800ac20 <_dtoa_r+0xa38>
 800ac4c:	f108 0801 	add.w	r8, r8, #1
 800ac50:	9b05      	ldr	r3, [sp, #20]
 800ac52:	e7c2      	b.n	800abda <_dtoa_r+0x9f2>
 800ac54:	9a02      	ldr	r2, [sp, #8]
 800ac56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ac5a:	eba5 030b 	sub.w	r3, r5, fp
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d021      	beq.n	800aca6 <_dtoa_r+0xabe>
 800ac62:	2300      	movs	r3, #0
 800ac64:	220a      	movs	r2, #10
 800ac66:	9904      	ldr	r1, [sp, #16]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 f8e6 	bl	800ae3a <__multadd>
 800ac6e:	45b1      	cmp	r9, r6
 800ac70:	9004      	str	r0, [sp, #16]
 800ac72:	f04f 0300 	mov.w	r3, #0
 800ac76:	f04f 020a 	mov.w	r2, #10
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	d105      	bne.n	800ac8c <_dtoa_r+0xaa4>
 800ac80:	f000 f8db 	bl	800ae3a <__multadd>
 800ac84:	4681      	mov	r9, r0
 800ac86:	4606      	mov	r6, r0
 800ac88:	9505      	str	r5, [sp, #20]
 800ac8a:	e776      	b.n	800ab7a <_dtoa_r+0x992>
 800ac8c:	f000 f8d5 	bl	800ae3a <__multadd>
 800ac90:	4631      	mov	r1, r6
 800ac92:	4681      	mov	r9, r0
 800ac94:	2300      	movs	r3, #0
 800ac96:	220a      	movs	r2, #10
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 f8ce 	bl	800ae3a <__multadd>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	e7f2      	b.n	800ac88 <_dtoa_r+0xaa0>
 800aca2:	f04f 0900 	mov.w	r9, #0
 800aca6:	2201      	movs	r2, #1
 800aca8:	9904      	ldr	r1, [sp, #16]
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fa3c 	bl	800b128 <__lshift>
 800acb0:	4639      	mov	r1, r7
 800acb2:	9004      	str	r0, [sp, #16]
 800acb4:	f000 fa8c 	bl	800b1d0 <__mcmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	dcb6      	bgt.n	800ac2a <_dtoa_r+0xa42>
 800acbc:	d102      	bne.n	800acc4 <_dtoa_r+0xadc>
 800acbe:	f018 0f01 	tst.w	r8, #1
 800acc2:	d1b2      	bne.n	800ac2a <_dtoa_r+0xa42>
 800acc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acc8:	2b30      	cmp	r3, #48	; 0x30
 800acca:	f105 32ff 	add.w	r2, r5, #4294967295
 800acce:	f47f af0a 	bne.w	800aae6 <_dtoa_r+0x8fe>
 800acd2:	4615      	mov	r5, r2
 800acd4:	e7f6      	b.n	800acc4 <_dtoa_r+0xadc>
 800acd6:	4593      	cmp	fp, r2
 800acd8:	d105      	bne.n	800ace6 <_dtoa_r+0xafe>
 800acda:	2331      	movs	r3, #49	; 0x31
 800acdc:	f10a 0a01 	add.w	sl, sl, #1
 800ace0:	f88b 3000 	strb.w	r3, [fp]
 800ace4:	e6ff      	b.n	800aae6 <_dtoa_r+0x8fe>
 800ace6:	4615      	mov	r5, r2
 800ace8:	e79f      	b.n	800ac2a <_dtoa_r+0xa42>
 800acea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ad50 <_dtoa_r+0xb68>
 800acee:	e007      	b.n	800ad00 <_dtoa_r+0xb18>
 800acf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ad54 <_dtoa_r+0xb6c>
 800acf6:	b11b      	cbz	r3, 800ad00 <_dtoa_r+0xb18>
 800acf8:	f10b 0308 	add.w	r3, fp, #8
 800acfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	4658      	mov	r0, fp
 800ad02:	b017      	add	sp, #92	; 0x5c
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	9b06      	ldr	r3, [sp, #24]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	f77f ae35 	ble.w	800a97a <_dtoa_r+0x792>
 800ad10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad12:	9307      	str	r3, [sp, #28]
 800ad14:	e649      	b.n	800a9aa <_dtoa_r+0x7c2>
 800ad16:	9b02      	ldr	r3, [sp, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dc03      	bgt.n	800ad24 <_dtoa_r+0xb3c>
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	f73f aecc 	bgt.w	800aabc <_dtoa_r+0x8d4>
 800ad24:	465d      	mov	r5, fp
 800ad26:	4639      	mov	r1, r7
 800ad28:	9804      	ldr	r0, [sp, #16]
 800ad2a:	f7ff f9cf 	bl	800a0cc <quorem>
 800ad2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad32:	f805 8b01 	strb.w	r8, [r5], #1
 800ad36:	9a02      	ldr	r2, [sp, #8]
 800ad38:	eba5 030b 	sub.w	r3, r5, fp
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	ddb0      	ble.n	800aca2 <_dtoa_r+0xaba>
 800ad40:	2300      	movs	r3, #0
 800ad42:	220a      	movs	r2, #10
 800ad44:	9904      	ldr	r1, [sp, #16]
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f877 	bl	800ae3a <__multadd>
 800ad4c:	9004      	str	r0, [sp, #16]
 800ad4e:	e7ea      	b.n	800ad26 <_dtoa_r+0xb3e>
 800ad50:	0800b81c 	.word	0x0800b81c
 800ad54:	0800b840 	.word	0x0800b840

0800ad58 <__locale_ctype_ptr_l>:
 800ad58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ad5c:	4770      	bx	lr
	...

0800ad60 <_localeconv_r>:
 800ad60:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <_localeconv_r+0x14>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6a18      	ldr	r0, [r3, #32]
 800ad66:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <_localeconv_r+0x18>)
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bf08      	it	eq
 800ad6c:	4618      	moveq	r0, r3
 800ad6e:	30f0      	adds	r0, #240	; 0xf0
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20000010 	.word	0x20000010
 800ad78:	20000074 	.word	0x20000074

0800ad7c <__ascii_mbtowc>:
 800ad7c:	b082      	sub	sp, #8
 800ad7e:	b901      	cbnz	r1, 800ad82 <__ascii_mbtowc+0x6>
 800ad80:	a901      	add	r1, sp, #4
 800ad82:	b142      	cbz	r2, 800ad96 <__ascii_mbtowc+0x1a>
 800ad84:	b14b      	cbz	r3, 800ad9a <__ascii_mbtowc+0x1e>
 800ad86:	7813      	ldrb	r3, [r2, #0]
 800ad88:	600b      	str	r3, [r1, #0]
 800ad8a:	7812      	ldrb	r2, [r2, #0]
 800ad8c:	1c10      	adds	r0, r2, #0
 800ad8e:	bf18      	it	ne
 800ad90:	2001      	movne	r0, #1
 800ad92:	b002      	add	sp, #8
 800ad94:	4770      	bx	lr
 800ad96:	4610      	mov	r0, r2
 800ad98:	e7fb      	b.n	800ad92 <__ascii_mbtowc+0x16>
 800ad9a:	f06f 0001 	mvn.w	r0, #1
 800ad9e:	e7f8      	b.n	800ad92 <__ascii_mbtowc+0x16>

0800ada0 <__malloc_lock>:
 800ada0:	4770      	bx	lr

0800ada2 <__malloc_unlock>:
 800ada2:	4770      	bx	lr

0800ada4 <_Balloc>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ada8:	4604      	mov	r4, r0
 800adaa:	460e      	mov	r6, r1
 800adac:	b93d      	cbnz	r5, 800adbe <_Balloc+0x1a>
 800adae:	2010      	movs	r0, #16
 800adb0:	f7fe fbaa 	bl	8009508 <malloc>
 800adb4:	6260      	str	r0, [r4, #36]	; 0x24
 800adb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adba:	6005      	str	r5, [r0, #0]
 800adbc:	60c5      	str	r5, [r0, #12]
 800adbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800adc0:	68eb      	ldr	r3, [r5, #12]
 800adc2:	b183      	cbz	r3, 800ade6 <_Balloc+0x42>
 800adc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800adcc:	b9b8      	cbnz	r0, 800adfe <_Balloc+0x5a>
 800adce:	2101      	movs	r1, #1
 800add0:	fa01 f506 	lsl.w	r5, r1, r6
 800add4:	1d6a      	adds	r2, r5, #5
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	4620      	mov	r0, r4
 800adda:	f000 fabf 	bl	800b35c <_calloc_r>
 800adde:	b160      	cbz	r0, 800adfa <_Balloc+0x56>
 800ade0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ade4:	e00e      	b.n	800ae04 <_Balloc+0x60>
 800ade6:	2221      	movs	r2, #33	; 0x21
 800ade8:	2104      	movs	r1, #4
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fab6 	bl	800b35c <_calloc_r>
 800adf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf2:	60e8      	str	r0, [r5, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e4      	bne.n	800adc4 <_Balloc+0x20>
 800adfa:	2000      	movs	r0, #0
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	6802      	ldr	r2, [r0, #0]
 800ae00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ae04:	2300      	movs	r3, #0
 800ae06:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae0a:	e7f7      	b.n	800adfc <_Balloc+0x58>

0800ae0c <_Bfree>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae10:	4606      	mov	r6, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	b93c      	cbnz	r4, 800ae26 <_Bfree+0x1a>
 800ae16:	2010      	movs	r0, #16
 800ae18:	f7fe fb76 	bl	8009508 <malloc>
 800ae1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae22:	6004      	str	r4, [r0, #0]
 800ae24:	60c4      	str	r4, [r0, #12]
 800ae26:	b13d      	cbz	r5, 800ae38 <_Bfree+0x2c>
 800ae28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae2a:	686a      	ldr	r2, [r5, #4]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae32:	6029      	str	r1, [r5, #0]
 800ae34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ae38:	bd70      	pop	{r4, r5, r6, pc}

0800ae3a <__multadd>:
 800ae3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	690d      	ldr	r5, [r1, #16]
 800ae40:	461f      	mov	r7, r3
 800ae42:	4606      	mov	r6, r0
 800ae44:	460c      	mov	r4, r1
 800ae46:	f101 0c14 	add.w	ip, r1, #20
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8dc 0000 	ldr.w	r0, [ip]
 800ae50:	b281      	uxth	r1, r0
 800ae52:	fb02 7101 	mla	r1, r2, r1, r7
 800ae56:	0c0f      	lsrs	r7, r1, #16
 800ae58:	0c00      	lsrs	r0, r0, #16
 800ae5a:	fb02 7000 	mla	r0, r2, r0, r7
 800ae5e:	b289      	uxth	r1, r1
 800ae60:	3301      	adds	r3, #1
 800ae62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ae66:	429d      	cmp	r5, r3
 800ae68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae6c:	f84c 1b04 	str.w	r1, [ip], #4
 800ae70:	dcec      	bgt.n	800ae4c <__multadd+0x12>
 800ae72:	b1d7      	cbz	r7, 800aeaa <__multadd+0x70>
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	42ab      	cmp	r3, r5
 800ae78:	dc12      	bgt.n	800aea0 <__multadd+0x66>
 800ae7a:	6861      	ldr	r1, [r4, #4]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	3101      	adds	r1, #1
 800ae80:	f7ff ff90 	bl	800ada4 <_Balloc>
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	3202      	adds	r2, #2
 800ae88:	f104 010c 	add.w	r1, r4, #12
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	0092      	lsls	r2, r2, #2
 800ae90:	300c      	adds	r0, #12
 800ae92:	f7fe fb41 	bl	8009518 <memcpy>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f7ff ffb7 	bl	800ae0c <_Bfree>
 800ae9e:	4644      	mov	r4, r8
 800aea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aea4:	3501      	adds	r5, #1
 800aea6:	615f      	str	r7, [r3, #20]
 800aea8:	6125      	str	r5, [r4, #16]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aeb0 <__hi0bits>:
 800aeb0:	0c02      	lsrs	r2, r0, #16
 800aeb2:	0412      	lsls	r2, r2, #16
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	b9b2      	cbnz	r2, 800aee6 <__hi0bits+0x36>
 800aeb8:	0403      	lsls	r3, r0, #16
 800aeba:	2010      	movs	r0, #16
 800aebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aec0:	bf04      	itt	eq
 800aec2:	021b      	lsleq	r3, r3, #8
 800aec4:	3008      	addeq	r0, #8
 800aec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aeca:	bf04      	itt	eq
 800aecc:	011b      	lsleq	r3, r3, #4
 800aece:	3004      	addeq	r0, #4
 800aed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aed4:	bf04      	itt	eq
 800aed6:	009b      	lsleq	r3, r3, #2
 800aed8:	3002      	addeq	r0, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	db06      	blt.n	800aeec <__hi0bits+0x3c>
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	d503      	bpl.n	800aeea <__hi0bits+0x3a>
 800aee2:	3001      	adds	r0, #1
 800aee4:	4770      	bx	lr
 800aee6:	2000      	movs	r0, #0
 800aee8:	e7e8      	b.n	800aebc <__hi0bits+0xc>
 800aeea:	2020      	movs	r0, #32
 800aeec:	4770      	bx	lr

0800aeee <__lo0bits>:
 800aeee:	6803      	ldr	r3, [r0, #0]
 800aef0:	f013 0207 	ands.w	r2, r3, #7
 800aef4:	4601      	mov	r1, r0
 800aef6:	d00b      	beq.n	800af10 <__lo0bits+0x22>
 800aef8:	07da      	lsls	r2, r3, #31
 800aefa:	d423      	bmi.n	800af44 <__lo0bits+0x56>
 800aefc:	0798      	lsls	r0, r3, #30
 800aefe:	bf49      	itett	mi
 800af00:	085b      	lsrmi	r3, r3, #1
 800af02:	089b      	lsrpl	r3, r3, #2
 800af04:	2001      	movmi	r0, #1
 800af06:	600b      	strmi	r3, [r1, #0]
 800af08:	bf5c      	itt	pl
 800af0a:	600b      	strpl	r3, [r1, #0]
 800af0c:	2002      	movpl	r0, #2
 800af0e:	4770      	bx	lr
 800af10:	b298      	uxth	r0, r3
 800af12:	b9a8      	cbnz	r0, 800af40 <__lo0bits+0x52>
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	2010      	movs	r0, #16
 800af18:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af1c:	bf04      	itt	eq
 800af1e:	0a1b      	lsreq	r3, r3, #8
 800af20:	3008      	addeq	r0, #8
 800af22:	071a      	lsls	r2, r3, #28
 800af24:	bf04      	itt	eq
 800af26:	091b      	lsreq	r3, r3, #4
 800af28:	3004      	addeq	r0, #4
 800af2a:	079a      	lsls	r2, r3, #30
 800af2c:	bf04      	itt	eq
 800af2e:	089b      	lsreq	r3, r3, #2
 800af30:	3002      	addeq	r0, #2
 800af32:	07da      	lsls	r2, r3, #31
 800af34:	d402      	bmi.n	800af3c <__lo0bits+0x4e>
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	d006      	beq.n	800af48 <__lo0bits+0x5a>
 800af3a:	3001      	adds	r0, #1
 800af3c:	600b      	str	r3, [r1, #0]
 800af3e:	4770      	bx	lr
 800af40:	4610      	mov	r0, r2
 800af42:	e7e9      	b.n	800af18 <__lo0bits+0x2a>
 800af44:	2000      	movs	r0, #0
 800af46:	4770      	bx	lr
 800af48:	2020      	movs	r0, #32
 800af4a:	4770      	bx	lr

0800af4c <__i2b>:
 800af4c:	b510      	push	{r4, lr}
 800af4e:	460c      	mov	r4, r1
 800af50:	2101      	movs	r1, #1
 800af52:	f7ff ff27 	bl	800ada4 <_Balloc>
 800af56:	2201      	movs	r2, #1
 800af58:	6144      	str	r4, [r0, #20]
 800af5a:	6102      	str	r2, [r0, #16]
 800af5c:	bd10      	pop	{r4, pc}

0800af5e <__multiply>:
 800af5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af62:	4614      	mov	r4, r2
 800af64:	690a      	ldr	r2, [r1, #16]
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	429a      	cmp	r2, r3
 800af6a:	bfb8      	it	lt
 800af6c:	460b      	movlt	r3, r1
 800af6e:	4688      	mov	r8, r1
 800af70:	bfbc      	itt	lt
 800af72:	46a0      	movlt	r8, r4
 800af74:	461c      	movlt	r4, r3
 800af76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af86:	eb07 0609 	add.w	r6, r7, r9
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	bfb8      	it	lt
 800af8e:	3101      	addlt	r1, #1
 800af90:	f7ff ff08 	bl	800ada4 <_Balloc>
 800af94:	f100 0514 	add.w	r5, r0, #20
 800af98:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800af9c:	462b      	mov	r3, r5
 800af9e:	2200      	movs	r2, #0
 800afa0:	4573      	cmp	r3, lr
 800afa2:	d316      	bcc.n	800afd2 <__multiply+0x74>
 800afa4:	f104 0214 	add.w	r2, r4, #20
 800afa8:	f108 0114 	add.w	r1, r8, #20
 800afac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800afb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	9b00      	ldr	r3, [sp, #0]
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	4293      	cmp	r3, r2
 800afbc:	d80c      	bhi.n	800afd8 <__multiply+0x7a>
 800afbe:	2e00      	cmp	r6, #0
 800afc0:	dd03      	ble.n	800afca <__multiply+0x6c>
 800afc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d05d      	beq.n	800b086 <__multiply+0x128>
 800afca:	6106      	str	r6, [r0, #16]
 800afcc:	b003      	add	sp, #12
 800afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd2:	f843 2b04 	str.w	r2, [r3], #4
 800afd6:	e7e3      	b.n	800afa0 <__multiply+0x42>
 800afd8:	f8b2 b000 	ldrh.w	fp, [r2]
 800afdc:	f1bb 0f00 	cmp.w	fp, #0
 800afe0:	d023      	beq.n	800b02a <__multiply+0xcc>
 800afe2:	4689      	mov	r9, r1
 800afe4:	46ac      	mov	ip, r5
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	f859 4b04 	ldr.w	r4, [r9], #4
 800afee:	f8dc a000 	ldr.w	sl, [ip]
 800aff2:	b2a3      	uxth	r3, r4
 800aff4:	fa1f fa8a 	uxth.w	sl, sl
 800aff8:	fb0b a303 	mla	r3, fp, r3, sl
 800affc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b000:	f8dc 4000 	ldr.w	r4, [ip]
 800b004:	4443      	add	r3, r8
 800b006:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b00a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b00e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b012:	46e2      	mov	sl, ip
 800b014:	b29b      	uxth	r3, r3
 800b016:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b01a:	454f      	cmp	r7, r9
 800b01c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b020:	f84a 3b04 	str.w	r3, [sl], #4
 800b024:	d82b      	bhi.n	800b07e <__multiply+0x120>
 800b026:	f8cc 8004 	str.w	r8, [ip, #4]
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b030:	3204      	adds	r2, #4
 800b032:	f1ba 0f00 	cmp.w	sl, #0
 800b036:	d020      	beq.n	800b07a <__multiply+0x11c>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	4689      	mov	r9, r1
 800b03c:	46a8      	mov	r8, r5
 800b03e:	f04f 0b00 	mov.w	fp, #0
 800b042:	f8b9 c000 	ldrh.w	ip, [r9]
 800b046:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b04a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b04e:	445c      	add	r4, fp
 800b050:	46c4      	mov	ip, r8
 800b052:	b29b      	uxth	r3, r3
 800b054:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b058:	f84c 3b04 	str.w	r3, [ip], #4
 800b05c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b060:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	fb0a b303 	mla	r3, sl, r3, fp
 800b06a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b06e:	454f      	cmp	r7, r9
 800b070:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b074:	d805      	bhi.n	800b082 <__multiply+0x124>
 800b076:	f8c8 3004 	str.w	r3, [r8, #4]
 800b07a:	3504      	adds	r5, #4
 800b07c:	e79b      	b.n	800afb6 <__multiply+0x58>
 800b07e:	46d4      	mov	ip, sl
 800b080:	e7b3      	b.n	800afea <__multiply+0x8c>
 800b082:	46e0      	mov	r8, ip
 800b084:	e7dd      	b.n	800b042 <__multiply+0xe4>
 800b086:	3e01      	subs	r6, #1
 800b088:	e799      	b.n	800afbe <__multiply+0x60>
	...

0800b08c <__pow5mult>:
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	4615      	mov	r5, r2
 800b092:	f012 0203 	ands.w	r2, r2, #3
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	d007      	beq.n	800b0ac <__pow5mult+0x20>
 800b09c:	3a01      	subs	r2, #1
 800b09e:	4c21      	ldr	r4, [pc, #132]	; (800b124 <__pow5mult+0x98>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0a6:	f7ff fec8 	bl	800ae3a <__multadd>
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	10ad      	asrs	r5, r5, #2
 800b0ae:	d035      	beq.n	800b11c <__pow5mult+0x90>
 800b0b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0b2:	b93c      	cbnz	r4, 800b0c4 <__pow5mult+0x38>
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	f7fe fa27 	bl	8009508 <malloc>
 800b0ba:	6270      	str	r0, [r6, #36]	; 0x24
 800b0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0c0:	6004      	str	r4, [r0, #0]
 800b0c2:	60c4      	str	r4, [r0, #12]
 800b0c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0cc:	b94c      	cbnz	r4, 800b0e2 <__pow5mult+0x56>
 800b0ce:	f240 2171 	movw	r1, #625	; 0x271
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7ff ff3a 	bl	800af4c <__i2b>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0de:	4604      	mov	r4, r0
 800b0e0:	6003      	str	r3, [r0, #0]
 800b0e2:	f04f 0800 	mov.w	r8, #0
 800b0e6:	07eb      	lsls	r3, r5, #31
 800b0e8:	d50a      	bpl.n	800b100 <__pow5mult+0x74>
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff ff35 	bl	800af5e <__multiply>
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	4681      	mov	r9, r0
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff fe87 	bl	800ae0c <_Bfree>
 800b0fe:	464f      	mov	r7, r9
 800b100:	106d      	asrs	r5, r5, #1
 800b102:	d00b      	beq.n	800b11c <__pow5mult+0x90>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	b938      	cbnz	r0, 800b118 <__pow5mult+0x8c>
 800b108:	4622      	mov	r2, r4
 800b10a:	4621      	mov	r1, r4
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7ff ff26 	bl	800af5e <__multiply>
 800b112:	6020      	str	r0, [r4, #0]
 800b114:	f8c0 8000 	str.w	r8, [r0]
 800b118:	4604      	mov	r4, r0
 800b11a:	e7e4      	b.n	800b0e6 <__pow5mult+0x5a>
 800b11c:	4638      	mov	r0, r7
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	bf00      	nop
 800b124:	0800b948 	.word	0x0800b948

0800b128 <__lshift>:
 800b128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b12c:	460c      	mov	r4, r1
 800b12e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	6849      	ldr	r1, [r1, #4]
 800b136:	eb0a 0903 	add.w	r9, sl, r3
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	4607      	mov	r7, r0
 800b13e:	4616      	mov	r6, r2
 800b140:	f109 0501 	add.w	r5, r9, #1
 800b144:	42ab      	cmp	r3, r5
 800b146:	db32      	blt.n	800b1ae <__lshift+0x86>
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff fe2b 	bl	800ada4 <_Balloc>
 800b14e:	2300      	movs	r3, #0
 800b150:	4680      	mov	r8, r0
 800b152:	f100 0114 	add.w	r1, r0, #20
 800b156:	461a      	mov	r2, r3
 800b158:	4553      	cmp	r3, sl
 800b15a:	db2b      	blt.n	800b1b4 <__lshift+0x8c>
 800b15c:	6920      	ldr	r0, [r4, #16]
 800b15e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b162:	f104 0314 	add.w	r3, r4, #20
 800b166:	f016 021f 	ands.w	r2, r6, #31
 800b16a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b16e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b172:	d025      	beq.n	800b1c0 <__lshift+0x98>
 800b174:	f1c2 0e20 	rsb	lr, r2, #32
 800b178:	2000      	movs	r0, #0
 800b17a:	681e      	ldr	r6, [r3, #0]
 800b17c:	468a      	mov	sl, r1
 800b17e:	4096      	lsls	r6, r2
 800b180:	4330      	orrs	r0, r6
 800b182:	f84a 0b04 	str.w	r0, [sl], #4
 800b186:	f853 0b04 	ldr.w	r0, [r3], #4
 800b18a:	459c      	cmp	ip, r3
 800b18c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b190:	d814      	bhi.n	800b1bc <__lshift+0x94>
 800b192:	6048      	str	r0, [r1, #4]
 800b194:	b108      	cbz	r0, 800b19a <__lshift+0x72>
 800b196:	f109 0502 	add.w	r5, r9, #2
 800b19a:	3d01      	subs	r5, #1
 800b19c:	4638      	mov	r0, r7
 800b19e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f7ff fe32 	bl	800ae0c <_Bfree>
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	3101      	adds	r1, #1
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	e7c7      	b.n	800b144 <__lshift+0x1c>
 800b1b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	e7cd      	b.n	800b158 <__lshift+0x30>
 800b1bc:	4651      	mov	r1, sl
 800b1be:	e7dc      	b.n	800b17a <__lshift+0x52>
 800b1c0:	3904      	subs	r1, #4
 800b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1ca:	459c      	cmp	ip, r3
 800b1cc:	d8f9      	bhi.n	800b1c2 <__lshift+0x9a>
 800b1ce:	e7e4      	b.n	800b19a <__lshift+0x72>

0800b1d0 <__mcmp>:
 800b1d0:	6903      	ldr	r3, [r0, #16]
 800b1d2:	690a      	ldr	r2, [r1, #16]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	b530      	push	{r4, r5, lr}
 800b1d8:	d10c      	bne.n	800b1f4 <__mcmp+0x24>
 800b1da:	0092      	lsls	r2, r2, #2
 800b1dc:	3014      	adds	r0, #20
 800b1de:	3114      	adds	r1, #20
 800b1e0:	1884      	adds	r4, r0, r2
 800b1e2:	4411      	add	r1, r2
 800b1e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1ec:	4295      	cmp	r5, r2
 800b1ee:	d003      	beq.n	800b1f8 <__mcmp+0x28>
 800b1f0:	d305      	bcc.n	800b1fe <__mcmp+0x2e>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	bd30      	pop	{r4, r5, pc}
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d3f3      	bcc.n	800b1e4 <__mcmp+0x14>
 800b1fc:	e7fa      	b.n	800b1f4 <__mcmp+0x24>
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b202:	e7f7      	b.n	800b1f4 <__mcmp+0x24>

0800b204 <__mdiff>:
 800b204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b208:	460d      	mov	r5, r1
 800b20a:	4607      	mov	r7, r0
 800b20c:	4611      	mov	r1, r2
 800b20e:	4628      	mov	r0, r5
 800b210:	4614      	mov	r4, r2
 800b212:	f7ff ffdd 	bl	800b1d0 <__mcmp>
 800b216:	1e06      	subs	r6, r0, #0
 800b218:	d108      	bne.n	800b22c <__mdiff+0x28>
 800b21a:	4631      	mov	r1, r6
 800b21c:	4638      	mov	r0, r7
 800b21e:	f7ff fdc1 	bl	800ada4 <_Balloc>
 800b222:	2301      	movs	r3, #1
 800b224:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22c:	bfa4      	itt	ge
 800b22e:	4623      	movge	r3, r4
 800b230:	462c      	movge	r4, r5
 800b232:	4638      	mov	r0, r7
 800b234:	6861      	ldr	r1, [r4, #4]
 800b236:	bfa6      	itte	ge
 800b238:	461d      	movge	r5, r3
 800b23a:	2600      	movge	r6, #0
 800b23c:	2601      	movlt	r6, #1
 800b23e:	f7ff fdb1 	bl	800ada4 <_Balloc>
 800b242:	692b      	ldr	r3, [r5, #16]
 800b244:	60c6      	str	r6, [r0, #12]
 800b246:	6926      	ldr	r6, [r4, #16]
 800b248:	f105 0914 	add.w	r9, r5, #20
 800b24c:	f104 0214 	add.w	r2, r4, #20
 800b250:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b254:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b258:	f100 0514 	add.w	r5, r0, #20
 800b25c:	f04f 0e00 	mov.w	lr, #0
 800b260:	f852 ab04 	ldr.w	sl, [r2], #4
 800b264:	f859 4b04 	ldr.w	r4, [r9], #4
 800b268:	fa1e f18a 	uxtah	r1, lr, sl
 800b26c:	b2a3      	uxth	r3, r4
 800b26e:	1ac9      	subs	r1, r1, r3
 800b270:	0c23      	lsrs	r3, r4, #16
 800b272:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b276:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b27a:	b289      	uxth	r1, r1
 800b27c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b280:	45c8      	cmp	r8, r9
 800b282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b286:	4694      	mov	ip, r2
 800b288:	f845 3b04 	str.w	r3, [r5], #4
 800b28c:	d8e8      	bhi.n	800b260 <__mdiff+0x5c>
 800b28e:	45bc      	cmp	ip, r7
 800b290:	d304      	bcc.n	800b29c <__mdiff+0x98>
 800b292:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b296:	b183      	cbz	r3, 800b2ba <__mdiff+0xb6>
 800b298:	6106      	str	r6, [r0, #16]
 800b29a:	e7c5      	b.n	800b228 <__mdiff+0x24>
 800b29c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2a0:	fa1e f381 	uxtah	r3, lr, r1
 800b2a4:	141a      	asrs	r2, r3, #16
 800b2a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2b4:	f845 3b04 	str.w	r3, [r5], #4
 800b2b8:	e7e9      	b.n	800b28e <__mdiff+0x8a>
 800b2ba:	3e01      	subs	r6, #1
 800b2bc:	e7e9      	b.n	800b292 <__mdiff+0x8e>

0800b2be <__d2b>:
 800b2be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2c2:	460e      	mov	r6, r1
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	ec59 8b10 	vmov	r8, r9, d0
 800b2ca:	4615      	mov	r5, r2
 800b2cc:	f7ff fd6a 	bl	800ada4 <_Balloc>
 800b2d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2da:	bb34      	cbnz	r4, 800b32a <__d2b+0x6c>
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f1b8 0300 	subs.w	r3, r8, #0
 800b2e2:	d027      	beq.n	800b334 <__d2b+0x76>
 800b2e4:	a802      	add	r0, sp, #8
 800b2e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b2ea:	f7ff fe00 	bl	800aeee <__lo0bits>
 800b2ee:	9900      	ldr	r1, [sp, #0]
 800b2f0:	b1f0      	cbz	r0, 800b330 <__d2b+0x72>
 800b2f2:	9a01      	ldr	r2, [sp, #4]
 800b2f4:	f1c0 0320 	rsb	r3, r0, #32
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	40c2      	lsrs	r2, r0
 800b300:	617b      	str	r3, [r7, #20]
 800b302:	9201      	str	r2, [sp, #4]
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	61bb      	str	r3, [r7, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	bf14      	ite	ne
 800b30c:	2102      	movne	r1, #2
 800b30e:	2101      	moveq	r1, #1
 800b310:	6139      	str	r1, [r7, #16]
 800b312:	b1c4      	cbz	r4, 800b346 <__d2b+0x88>
 800b314:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b318:	4404      	add	r4, r0
 800b31a:	6034      	str	r4, [r6, #0]
 800b31c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b320:	6028      	str	r0, [r5, #0]
 800b322:	4638      	mov	r0, r7
 800b324:	b003      	add	sp, #12
 800b326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b32a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b32e:	e7d5      	b.n	800b2dc <__d2b+0x1e>
 800b330:	6179      	str	r1, [r7, #20]
 800b332:	e7e7      	b.n	800b304 <__d2b+0x46>
 800b334:	a801      	add	r0, sp, #4
 800b336:	f7ff fdda 	bl	800aeee <__lo0bits>
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	2101      	movs	r1, #1
 800b340:	6139      	str	r1, [r7, #16]
 800b342:	3020      	adds	r0, #32
 800b344:	e7e5      	b.n	800b312 <__d2b+0x54>
 800b346:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b34a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b34e:	6030      	str	r0, [r6, #0]
 800b350:	6918      	ldr	r0, [r3, #16]
 800b352:	f7ff fdad 	bl	800aeb0 <__hi0bits>
 800b356:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b35a:	e7e1      	b.n	800b320 <__d2b+0x62>

0800b35c <_calloc_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	fb02 f401 	mul.w	r4, r2, r1
 800b362:	4621      	mov	r1, r4
 800b364:	f7fe f93a 	bl	80095dc <_malloc_r>
 800b368:	4605      	mov	r5, r0
 800b36a:	b118      	cbz	r0, 800b374 <_calloc_r+0x18>
 800b36c:	4622      	mov	r2, r4
 800b36e:	2100      	movs	r1, #0
 800b370:	f7fe f8dd 	bl	800952e <memset>
 800b374:	4628      	mov	r0, r5
 800b376:	bd38      	pop	{r3, r4, r5, pc}

0800b378 <__ssputs_r>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	688e      	ldr	r6, [r1, #8]
 800b37e:	429e      	cmp	r6, r3
 800b380:	4682      	mov	sl, r0
 800b382:	460c      	mov	r4, r1
 800b384:	4690      	mov	r8, r2
 800b386:	4699      	mov	r9, r3
 800b388:	d837      	bhi.n	800b3fa <__ssputs_r+0x82>
 800b38a:	898a      	ldrh	r2, [r1, #12]
 800b38c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b390:	d031      	beq.n	800b3f6 <__ssputs_r+0x7e>
 800b392:	6825      	ldr	r5, [r4, #0]
 800b394:	6909      	ldr	r1, [r1, #16]
 800b396:	1a6f      	subs	r7, r5, r1
 800b398:	6965      	ldr	r5, [r4, #20]
 800b39a:	2302      	movs	r3, #2
 800b39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b3a4:	f109 0301 	add.w	r3, r9, #1
 800b3a8:	443b      	add	r3, r7
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	bf38      	it	cc
 800b3ae:	461d      	movcc	r5, r3
 800b3b0:	0553      	lsls	r3, r2, #21
 800b3b2:	d530      	bpl.n	800b416 <__ssputs_r+0x9e>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7fe f911 	bl	80095dc <_malloc_r>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	b950      	cbnz	r0, 800b3d4 <__ssputs_r+0x5c>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	f8ca 3000 	str.w	r3, [sl]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	6921      	ldr	r1, [r4, #16]
 800b3d8:	f7fe f89e 	bl	8009518 <memcpy>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	6126      	str	r6, [r4, #16]
 800b3ea:	6165      	str	r5, [r4, #20]
 800b3ec:	443e      	add	r6, r7
 800b3ee:	1bed      	subs	r5, r5, r7
 800b3f0:	6026      	str	r6, [r4, #0]
 800b3f2:	60a5      	str	r5, [r4, #8]
 800b3f4:	464e      	mov	r6, r9
 800b3f6:	454e      	cmp	r6, r9
 800b3f8:	d900      	bls.n	800b3fc <__ssputs_r+0x84>
 800b3fa:	464e      	mov	r6, r9
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4641      	mov	r1, r8
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	f000 f918 	bl	800b636 <memmove>
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	441e      	add	r6, r3
 800b410:	6026      	str	r6, [r4, #0]
 800b412:	2000      	movs	r0, #0
 800b414:	e7dc      	b.n	800b3d0 <__ssputs_r+0x58>
 800b416:	462a      	mov	r2, r5
 800b418:	f000 f926 	bl	800b668 <_realloc_r>
 800b41c:	4606      	mov	r6, r0
 800b41e:	2800      	cmp	r0, #0
 800b420:	d1e2      	bne.n	800b3e8 <__ssputs_r+0x70>
 800b422:	6921      	ldr	r1, [r4, #16]
 800b424:	4650      	mov	r0, sl
 800b426:	f7fe f88b 	bl	8009540 <_free_r>
 800b42a:	e7c8      	b.n	800b3be <__ssputs_r+0x46>

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	461d      	mov	r5, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	061f      	lsls	r7, r3, #24
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4680      	mov	r8, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d50f      	bpl.n	800b460 <_svfiprintf_r+0x34>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b96b      	cbnz	r3, 800b460 <_svfiprintf_r+0x34>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7fe f8c9 	bl	80095dc <_malloc_r>
 800b44a:	6020      	str	r0, [r4, #0]
 800b44c:	6120      	str	r0, [r4, #16]
 800b44e:	b928      	cbnz	r0, 800b45c <_svfiprintf_r+0x30>
 800b450:	230c      	movs	r3, #12
 800b452:	f8c8 3000 	str.w	r3, [r8]
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	e0c8      	b.n	800b5ee <_svfiprintf_r+0x1c2>
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	2300      	movs	r3, #0
 800b462:	9309      	str	r3, [sp, #36]	; 0x24
 800b464:	2320      	movs	r3, #32
 800b466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b46a:	2330      	movs	r3, #48	; 0x30
 800b46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b470:	9503      	str	r5, [sp, #12]
 800b472:	f04f 0b01 	mov.w	fp, #1
 800b476:	4637      	mov	r7, r6
 800b478:	463d      	mov	r5, r7
 800b47a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b47e:	b10b      	cbz	r3, 800b484 <_svfiprintf_r+0x58>
 800b480:	2b25      	cmp	r3, #37	; 0x25
 800b482:	d13e      	bne.n	800b502 <_svfiprintf_r+0xd6>
 800b484:	ebb7 0a06 	subs.w	sl, r7, r6
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x76>
 800b48a:	4653      	mov	r3, sl
 800b48c:	4632      	mov	r2, r6
 800b48e:	4621      	mov	r1, r4
 800b490:	4640      	mov	r0, r8
 800b492:	f7ff ff71 	bl	800b378 <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80a4 	beq.w	800b5e4 <_svfiprintf_r+0x1b8>
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	4453      	add	r3, sl
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	783b      	ldrb	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 809d 	beq.w	800b5e4 <_svfiprintf_r+0x1b8>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	9307      	str	r3, [sp, #28]
 800b4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4be:	462f      	mov	r7, r5
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4c6:	4850      	ldr	r0, [pc, #320]	; (800b608 <_svfiprintf_r+0x1dc>)
 800b4c8:	f7f4 fe92 	bl	80001f0 <memchr>
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	b9d0      	cbnz	r0, 800b506 <_svfiprintf_r+0xda>
 800b4d0:	06d9      	lsls	r1, r3, #27
 800b4d2:	bf44      	itt	mi
 800b4d4:	2220      	movmi	r2, #32
 800b4d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4da:	071a      	lsls	r2, r3, #28
 800b4dc:	bf44      	itt	mi
 800b4de:	222b      	movmi	r2, #43	; 0x2b
 800b4e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4e4:	782a      	ldrb	r2, [r5, #0]
 800b4e6:	2a2a      	cmp	r2, #42	; 0x2a
 800b4e8:	d015      	beq.n	800b516 <_svfiprintf_r+0xea>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	462f      	mov	r7, r5
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	250a      	movs	r5, #10
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f8:	3b30      	subs	r3, #48	; 0x30
 800b4fa:	2b09      	cmp	r3, #9
 800b4fc:	d94d      	bls.n	800b59a <_svfiprintf_r+0x16e>
 800b4fe:	b1b8      	cbz	r0, 800b530 <_svfiprintf_r+0x104>
 800b500:	e00f      	b.n	800b522 <_svfiprintf_r+0xf6>
 800b502:	462f      	mov	r7, r5
 800b504:	e7b8      	b.n	800b478 <_svfiprintf_r+0x4c>
 800b506:	4a40      	ldr	r2, [pc, #256]	; (800b608 <_svfiprintf_r+0x1dc>)
 800b508:	1a80      	subs	r0, r0, r2
 800b50a:	fa0b f000 	lsl.w	r0, fp, r0
 800b50e:	4318      	orrs	r0, r3
 800b510:	9004      	str	r0, [sp, #16]
 800b512:	463d      	mov	r5, r7
 800b514:	e7d3      	b.n	800b4be <_svfiprintf_r+0x92>
 800b516:	9a03      	ldr	r2, [sp, #12]
 800b518:	1d11      	adds	r1, r2, #4
 800b51a:	6812      	ldr	r2, [r2, #0]
 800b51c:	9103      	str	r1, [sp, #12]
 800b51e:	2a00      	cmp	r2, #0
 800b520:	db01      	blt.n	800b526 <_svfiprintf_r+0xfa>
 800b522:	9207      	str	r2, [sp, #28]
 800b524:	e004      	b.n	800b530 <_svfiprintf_r+0x104>
 800b526:	4252      	negs	r2, r2
 800b528:	f043 0302 	orr.w	r3, r3, #2
 800b52c:	9207      	str	r2, [sp, #28]
 800b52e:	9304      	str	r3, [sp, #16]
 800b530:	783b      	ldrb	r3, [r7, #0]
 800b532:	2b2e      	cmp	r3, #46	; 0x2e
 800b534:	d10c      	bne.n	800b550 <_svfiprintf_r+0x124>
 800b536:	787b      	ldrb	r3, [r7, #1]
 800b538:	2b2a      	cmp	r3, #42	; 0x2a
 800b53a:	d133      	bne.n	800b5a4 <_svfiprintf_r+0x178>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	bfb8      	it	lt
 800b548:	f04f 33ff 	movlt.w	r3, #4294967295
 800b54c:	3702      	adds	r7, #2
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4d2e      	ldr	r5, [pc, #184]	; (800b60c <_svfiprintf_r+0x1e0>)
 800b552:	7839      	ldrb	r1, [r7, #0]
 800b554:	2203      	movs	r2, #3
 800b556:	4628      	mov	r0, r5
 800b558:	f7f4 fe4a 	bl	80001f0 <memchr>
 800b55c:	b138      	cbz	r0, 800b56e <_svfiprintf_r+0x142>
 800b55e:	2340      	movs	r3, #64	; 0x40
 800b560:	1b40      	subs	r0, r0, r5
 800b562:	fa03 f000 	lsl.w	r0, r3, r0
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	4303      	orrs	r3, r0
 800b56a:	3701      	adds	r7, #1
 800b56c:	9304      	str	r3, [sp, #16]
 800b56e:	7839      	ldrb	r1, [r7, #0]
 800b570:	4827      	ldr	r0, [pc, #156]	; (800b610 <_svfiprintf_r+0x1e4>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b576:	2206      	movs	r2, #6
 800b578:	1c7e      	adds	r6, r7, #1
 800b57a:	f7f4 fe39 	bl	80001f0 <memchr>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d038      	beq.n	800b5f4 <_svfiprintf_r+0x1c8>
 800b582:	4b24      	ldr	r3, [pc, #144]	; (800b614 <_svfiprintf_r+0x1e8>)
 800b584:	bb13      	cbnz	r3, 800b5cc <_svfiprintf_r+0x1a0>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	3307      	adds	r3, #7
 800b58a:	f023 0307 	bic.w	r3, r3, #7
 800b58e:	3308      	adds	r3, #8
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b594:	444b      	add	r3, r9
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	e76d      	b.n	800b476 <_svfiprintf_r+0x4a>
 800b59a:	fb05 3202 	mla	r2, r5, r2, r3
 800b59e:	2001      	movs	r0, #1
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	e7a6      	b.n	800b4f2 <_svfiprintf_r+0xc6>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	3701      	adds	r7, #1
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	250a      	movs	r5, #10
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b4:	3a30      	subs	r2, #48	; 0x30
 800b5b6:	2a09      	cmp	r2, #9
 800b5b8:	d903      	bls.n	800b5c2 <_svfiprintf_r+0x196>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c8      	beq.n	800b550 <_svfiprintf_r+0x124>
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	e7c6      	b.n	800b550 <_svfiprintf_r+0x124>
 800b5c2:	fb05 2101 	mla	r1, r5, r1, r2
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	e7f0      	b.n	800b5ae <_svfiprintf_r+0x182>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4b11      	ldr	r3, [pc, #68]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	f7fe f8ee 	bl	80097b8 <_printf_float>
 800b5dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	d1d6      	bne.n	800b592 <_svfiprintf_r+0x166>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	065b      	lsls	r3, r3, #25
 800b5e8:	f53f af35 	bmi.w	800b456 <_svfiprintf_r+0x2a>
 800b5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ee:	b01d      	add	sp, #116	; 0x74
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4b07      	ldr	r3, [pc, #28]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b5fc:	a904      	add	r1, sp, #16
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7fe fb90 	bl	8009d24 <_printf_i>
 800b604:	e7ea      	b.n	800b5dc <_svfiprintf_r+0x1b0>
 800b606:	bf00      	nop
 800b608:	0800b954 	.word	0x0800b954
 800b60c:	0800b95a 	.word	0x0800b95a
 800b610:	0800b95e 	.word	0x0800b95e
 800b614:	080097b9 	.word	0x080097b9
 800b618:	0800b379 	.word	0x0800b379

0800b61c <__ascii_wctomb>:
 800b61c:	b149      	cbz	r1, 800b632 <__ascii_wctomb+0x16>
 800b61e:	2aff      	cmp	r2, #255	; 0xff
 800b620:	bf85      	ittet	hi
 800b622:	238a      	movhi	r3, #138	; 0x8a
 800b624:	6003      	strhi	r3, [r0, #0]
 800b626:	700a      	strbls	r2, [r1, #0]
 800b628:	f04f 30ff 	movhi.w	r0, #4294967295
 800b62c:	bf98      	it	ls
 800b62e:	2001      	movls	r0, #1
 800b630:	4770      	bx	lr
 800b632:	4608      	mov	r0, r1
 800b634:	4770      	bx	lr

0800b636 <memmove>:
 800b636:	4288      	cmp	r0, r1
 800b638:	b510      	push	{r4, lr}
 800b63a:	eb01 0302 	add.w	r3, r1, r2
 800b63e:	d807      	bhi.n	800b650 <memmove+0x1a>
 800b640:	1e42      	subs	r2, r0, #1
 800b642:	4299      	cmp	r1, r3
 800b644:	d00a      	beq.n	800b65c <memmove+0x26>
 800b646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b64a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b64e:	e7f8      	b.n	800b642 <memmove+0xc>
 800b650:	4283      	cmp	r3, r0
 800b652:	d9f5      	bls.n	800b640 <memmove+0xa>
 800b654:	1881      	adds	r1, r0, r2
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	42d3      	cmn	r3, r2
 800b65a:	d100      	bne.n	800b65e <memmove+0x28>
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b662:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b666:	e7f7      	b.n	800b658 <memmove+0x22>

0800b668 <_realloc_r>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	4607      	mov	r7, r0
 800b66c:	4614      	mov	r4, r2
 800b66e:	460e      	mov	r6, r1
 800b670:	b921      	cbnz	r1, 800b67c <_realloc_r+0x14>
 800b672:	4611      	mov	r1, r2
 800b674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b678:	f7fd bfb0 	b.w	80095dc <_malloc_r>
 800b67c:	b922      	cbnz	r2, 800b688 <_realloc_r+0x20>
 800b67e:	f7fd ff5f 	bl	8009540 <_free_r>
 800b682:	4625      	mov	r5, r4
 800b684:	4628      	mov	r0, r5
 800b686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b688:	f000 f814 	bl	800b6b4 <_malloc_usable_size_r>
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d20f      	bcs.n	800b6b0 <_realloc_r+0x48>
 800b690:	4621      	mov	r1, r4
 800b692:	4638      	mov	r0, r7
 800b694:	f7fd ffa2 	bl	80095dc <_malloc_r>
 800b698:	4605      	mov	r5, r0
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d0f2      	beq.n	800b684 <_realloc_r+0x1c>
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	f7fd ff39 	bl	8009518 <memcpy>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	f7fd ff49 	bl	8009540 <_free_r>
 800b6ae:	e7e9      	b.n	800b684 <_realloc_r+0x1c>
 800b6b0:	4635      	mov	r5, r6
 800b6b2:	e7e7      	b.n	800b684 <_realloc_r+0x1c>

0800b6b4 <_malloc_usable_size_r>:
 800b6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b8:	1f18      	subs	r0, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bfbc      	itt	lt
 800b6be:	580b      	ldrlt	r3, [r1, r0]
 800b6c0:	18c0      	addlt	r0, r0, r3
 800b6c2:	4770      	bx	lr

0800b6c4 <_init>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_fini>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr
